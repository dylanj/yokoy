// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLegalEntities(t *testing.T) {
	t.Parallel()

	query := LegalEntities()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLegalEntitiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LegalEntities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLegalEntitiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LegalEntities().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LegalEntities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLegalEntitiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LegalEntitySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LegalEntities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLegalEntitiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LegalEntityExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LegalEntity exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LegalEntityExists to return true, but got false.")
	}
}

func testLegalEntitiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	legalEntityFound, err := FindLegalEntity(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if legalEntityFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLegalEntitiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LegalEntities().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLegalEntitiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LegalEntities().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLegalEntitiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	legalEntityOne := &LegalEntity{}
	legalEntityTwo := &LegalEntity{}
	if err = randomize.Struct(seed, legalEntityOne, legalEntityDBTypes, false, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}
	if err = randomize.Struct(seed, legalEntityTwo, legalEntityDBTypes, false, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = legalEntityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = legalEntityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LegalEntities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLegalEntitiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	legalEntityOne := &LegalEntity{}
	legalEntityTwo := &LegalEntity{}
	if err = randomize.Struct(seed, legalEntityOne, legalEntityDBTypes, false, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}
	if err = randomize.Struct(seed, legalEntityTwo, legalEntityDBTypes, false, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = legalEntityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = legalEntityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LegalEntities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func legalEntityBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *LegalEntity) error {
	*o = LegalEntity{}
	return nil
}

func legalEntityAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *LegalEntity) error {
	*o = LegalEntity{}
	return nil
}

func legalEntityAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *LegalEntity) error {
	*o = LegalEntity{}
	return nil
}

func legalEntityBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LegalEntity) error {
	*o = LegalEntity{}
	return nil
}

func legalEntityAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LegalEntity) error {
	*o = LegalEntity{}
	return nil
}

func legalEntityBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LegalEntity) error {
	*o = LegalEntity{}
	return nil
}

func legalEntityAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LegalEntity) error {
	*o = LegalEntity{}
	return nil
}

func legalEntityBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LegalEntity) error {
	*o = LegalEntity{}
	return nil
}

func legalEntityAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LegalEntity) error {
	*o = LegalEntity{}
	return nil
}

func testLegalEntitiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &LegalEntity{}
	o := &LegalEntity{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, legalEntityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LegalEntity object: %s", err)
	}

	AddLegalEntityHook(boil.BeforeInsertHook, legalEntityBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	legalEntityBeforeInsertHooks = []LegalEntityHook{}

	AddLegalEntityHook(boil.AfterInsertHook, legalEntityAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	legalEntityAfterInsertHooks = []LegalEntityHook{}

	AddLegalEntityHook(boil.AfterSelectHook, legalEntityAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	legalEntityAfterSelectHooks = []LegalEntityHook{}

	AddLegalEntityHook(boil.BeforeUpdateHook, legalEntityBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	legalEntityBeforeUpdateHooks = []LegalEntityHook{}

	AddLegalEntityHook(boil.AfterUpdateHook, legalEntityAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	legalEntityAfterUpdateHooks = []LegalEntityHook{}

	AddLegalEntityHook(boil.BeforeDeleteHook, legalEntityBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	legalEntityBeforeDeleteHooks = []LegalEntityHook{}

	AddLegalEntityHook(boil.AfterDeleteHook, legalEntityAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	legalEntityAfterDeleteHooks = []LegalEntityHook{}

	AddLegalEntityHook(boil.BeforeUpsertHook, legalEntityBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	legalEntityBeforeUpsertHooks = []LegalEntityHook{}

	AddLegalEntityHook(boil.AfterUpsertHook, legalEntityAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	legalEntityAfterUpsertHooks = []LegalEntityHook{}
}

func testLegalEntitiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LegalEntities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLegalEntitiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(legalEntityColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LegalEntities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLegalEntitiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLegalEntitiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LegalEntitySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLegalEntitiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LegalEntities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	legalEntityDBTypes = map[string]string{`ID`: `text`, `Code`: `text`, `Language`: `text`, `Name`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testLegalEntitiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(legalEntityPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(legalEntityAllColumns) == len(legalEntityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LegalEntities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLegalEntitiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(legalEntityAllColumns) == len(legalEntityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LegalEntity{}
	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LegalEntities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, legalEntityDBTypes, true, legalEntityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(legalEntityAllColumns, legalEntityPrimaryKeyColumns) {
		fields = legalEntityAllColumns
	} else {
		fields = strmangle.SetComplement(
			legalEntityAllColumns,
			legalEntityPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LegalEntitySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLegalEntitiesUpsert(t *testing.T) {
	t.Parallel()

	if len(legalEntityAllColumns) == len(legalEntityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := LegalEntity{}
	if err = randomize.Struct(seed, &o, legalEntityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LegalEntity: %s", err)
	}

	count, err := LegalEntities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, legalEntityDBTypes, false, legalEntityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LegalEntity struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LegalEntity: %s", err)
	}

	count, err = LegalEntities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
