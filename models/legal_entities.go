// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LegalEntity is an object representing the database table.
type LegalEntity struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Code      null.String `boil:"code" json:"code,omitempty" toml:"code" yaml:"code,omitempty"`
	Language  null.String `boil:"language" json:"language,omitempty" toml:"language" yaml:"language,omitempty"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *legalEntityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L legalEntityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LegalEntityColumns = struct {
	ID        string
	Code      string
	Language  string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Code:      "code",
	Language:  "language",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var LegalEntityTableColumns = struct {
	ID        string
	Code      string
	Language  string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "legal_entities.id",
	Code:      "legal_entities.code",
	Language:  "legal_entities.language",
	Name:      "legal_entities.name",
	CreatedAt: "legal_entities.created_at",
	UpdatedAt: "legal_entities.updated_at",
}

// Generated where

var LegalEntityWhere = struct {
	ID        whereHelperstring
	Code      whereHelpernull_String
	Language  whereHelpernull_String
	Name      whereHelpernull_String
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"legal_entities\".\"id\""},
	Code:      whereHelpernull_String{field: "\"legal_entities\".\"code\""},
	Language:  whereHelpernull_String{field: "\"legal_entities\".\"language\""},
	Name:      whereHelpernull_String{field: "\"legal_entities\".\"name\""},
	CreatedAt: whereHelpernull_Time{field: "\"legal_entities\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"legal_entities\".\"updated_at\""},
}

// LegalEntityRels is where relationship names are stored.
var LegalEntityRels = struct {
}{}

// legalEntityR is where relationships are stored.
type legalEntityR struct {
}

// NewStruct creates a new relationship struct
func (*legalEntityR) NewStruct() *legalEntityR {
	return &legalEntityR{}
}

// legalEntityL is where Load methods for each relationship are stored.
type legalEntityL struct{}

var (
	legalEntityAllColumns            = []string{"id", "code", "language", "name", "created_at", "updated_at"}
	legalEntityColumnsWithoutDefault = []string{"id"}
	legalEntityColumnsWithDefault    = []string{"code", "language", "name", "created_at", "updated_at"}
	legalEntityPrimaryKeyColumns     = []string{"id"}
	legalEntityGeneratedColumns      = []string{}
)

type (
	// LegalEntitySlice is an alias for a slice of pointers to LegalEntity.
	// This should almost always be used instead of []LegalEntity.
	LegalEntitySlice []*LegalEntity
	// LegalEntityHook is the signature for custom LegalEntity hook methods
	LegalEntityHook func(context.Context, boil.ContextExecutor, *LegalEntity) error

	legalEntityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	legalEntityType                 = reflect.TypeOf(&LegalEntity{})
	legalEntityMapping              = queries.MakeStructMapping(legalEntityType)
	legalEntityPrimaryKeyMapping, _ = queries.BindMapping(legalEntityType, legalEntityMapping, legalEntityPrimaryKeyColumns)
	legalEntityInsertCacheMut       sync.RWMutex
	legalEntityInsertCache          = make(map[string]insertCache)
	legalEntityUpdateCacheMut       sync.RWMutex
	legalEntityUpdateCache          = make(map[string]updateCache)
	legalEntityUpsertCacheMut       sync.RWMutex
	legalEntityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var legalEntityAfterSelectMu sync.Mutex
var legalEntityAfterSelectHooks []LegalEntityHook

var legalEntityBeforeInsertMu sync.Mutex
var legalEntityBeforeInsertHooks []LegalEntityHook
var legalEntityAfterInsertMu sync.Mutex
var legalEntityAfterInsertHooks []LegalEntityHook

var legalEntityBeforeUpdateMu sync.Mutex
var legalEntityBeforeUpdateHooks []LegalEntityHook
var legalEntityAfterUpdateMu sync.Mutex
var legalEntityAfterUpdateHooks []LegalEntityHook

var legalEntityBeforeDeleteMu sync.Mutex
var legalEntityBeforeDeleteHooks []LegalEntityHook
var legalEntityAfterDeleteMu sync.Mutex
var legalEntityAfterDeleteHooks []LegalEntityHook

var legalEntityBeforeUpsertMu sync.Mutex
var legalEntityBeforeUpsertHooks []LegalEntityHook
var legalEntityAfterUpsertMu sync.Mutex
var legalEntityAfterUpsertHooks []LegalEntityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LegalEntity) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range legalEntityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LegalEntity) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range legalEntityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LegalEntity) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range legalEntityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LegalEntity) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range legalEntityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LegalEntity) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range legalEntityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LegalEntity) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range legalEntityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LegalEntity) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range legalEntityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LegalEntity) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range legalEntityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LegalEntity) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range legalEntityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLegalEntityHook registers your hook function for all future operations.
func AddLegalEntityHook(hookPoint boil.HookPoint, legalEntityHook LegalEntityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		legalEntityAfterSelectMu.Lock()
		legalEntityAfterSelectHooks = append(legalEntityAfterSelectHooks, legalEntityHook)
		legalEntityAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		legalEntityBeforeInsertMu.Lock()
		legalEntityBeforeInsertHooks = append(legalEntityBeforeInsertHooks, legalEntityHook)
		legalEntityBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		legalEntityAfterInsertMu.Lock()
		legalEntityAfterInsertHooks = append(legalEntityAfterInsertHooks, legalEntityHook)
		legalEntityAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		legalEntityBeforeUpdateMu.Lock()
		legalEntityBeforeUpdateHooks = append(legalEntityBeforeUpdateHooks, legalEntityHook)
		legalEntityBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		legalEntityAfterUpdateMu.Lock()
		legalEntityAfterUpdateHooks = append(legalEntityAfterUpdateHooks, legalEntityHook)
		legalEntityAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		legalEntityBeforeDeleteMu.Lock()
		legalEntityBeforeDeleteHooks = append(legalEntityBeforeDeleteHooks, legalEntityHook)
		legalEntityBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		legalEntityAfterDeleteMu.Lock()
		legalEntityAfterDeleteHooks = append(legalEntityAfterDeleteHooks, legalEntityHook)
		legalEntityAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		legalEntityBeforeUpsertMu.Lock()
		legalEntityBeforeUpsertHooks = append(legalEntityBeforeUpsertHooks, legalEntityHook)
		legalEntityBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		legalEntityAfterUpsertMu.Lock()
		legalEntityAfterUpsertHooks = append(legalEntityAfterUpsertHooks, legalEntityHook)
		legalEntityAfterUpsertMu.Unlock()
	}
}

// One returns a single legalEntity record from the query.
func (q legalEntityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LegalEntity, error) {
	o := &LegalEntity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for legal_entities")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LegalEntity records from the query.
func (q legalEntityQuery) All(ctx context.Context, exec boil.ContextExecutor) (LegalEntitySlice, error) {
	var o []*LegalEntity

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LegalEntity slice")
	}

	if len(legalEntityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LegalEntity records in the query.
func (q legalEntityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count legal_entities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q legalEntityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if legal_entities exists")
	}

	return count > 0, nil
}

// LegalEntities retrieves all the records using an executor.
func LegalEntities(mods ...qm.QueryMod) legalEntityQuery {
	mods = append(mods, qm.From("\"legal_entities\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"legal_entities\".*"})
	}

	return legalEntityQuery{q}
}

// FindLegalEntity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLegalEntity(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*LegalEntity, error) {
	legalEntityObj := &LegalEntity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"legal_entities\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, legalEntityObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from legal_entities")
	}

	if err = legalEntityObj.doAfterSelectHooks(ctx, exec); err != nil {
		return legalEntityObj, err
	}

	return legalEntityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LegalEntity) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no legal_entities provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(legalEntityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	legalEntityInsertCacheMut.RLock()
	cache, cached := legalEntityInsertCache[key]
	legalEntityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			legalEntityAllColumns,
			legalEntityColumnsWithDefault,
			legalEntityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(legalEntityType, legalEntityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(legalEntityType, legalEntityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"legal_entities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"legal_entities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into legal_entities")
	}

	if !cached {
		legalEntityInsertCacheMut.Lock()
		legalEntityInsertCache[key] = cache
		legalEntityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LegalEntity.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LegalEntity) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	legalEntityUpdateCacheMut.RLock()
	cache, cached := legalEntityUpdateCache[key]
	legalEntityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			legalEntityAllColumns,
			legalEntityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update legal_entities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"legal_entities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, legalEntityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(legalEntityType, legalEntityMapping, append(wl, legalEntityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update legal_entities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for legal_entities")
	}

	if !cached {
		legalEntityUpdateCacheMut.Lock()
		legalEntityUpdateCache[key] = cache
		legalEntityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q legalEntityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for legal_entities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for legal_entities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LegalEntitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), legalEntityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"legal_entities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, legalEntityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in legalEntity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all legalEntity")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LegalEntity) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no legal_entities provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(legalEntityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	legalEntityUpsertCacheMut.RLock()
	cache, cached := legalEntityUpsertCache[key]
	legalEntityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			legalEntityAllColumns,
			legalEntityColumnsWithDefault,
			legalEntityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			legalEntityAllColumns,
			legalEntityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert legal_entities, could not build update column list")
		}

		ret := strmangle.SetComplement(legalEntityAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(legalEntityPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert legal_entities, could not build conflict column list")
			}

			conflict = make([]string, len(legalEntityPrimaryKeyColumns))
			copy(conflict, legalEntityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"legal_entities\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(legalEntityType, legalEntityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(legalEntityType, legalEntityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert legal_entities")
	}

	if !cached {
		legalEntityUpsertCacheMut.Lock()
		legalEntityUpsertCache[key] = cache
		legalEntityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LegalEntity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LegalEntity) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LegalEntity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), legalEntityPrimaryKeyMapping)
	sql := "DELETE FROM \"legal_entities\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from legal_entities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for legal_entities")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q legalEntityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no legalEntityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from legal_entities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for legal_entities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LegalEntitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(legalEntityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), legalEntityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"legal_entities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, legalEntityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from legalEntity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for legal_entities")
	}

	if len(legalEntityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LegalEntity) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLegalEntity(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LegalEntitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LegalEntitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), legalEntityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"legal_entities\".* FROM \"legal_entities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, legalEntityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LegalEntitySlice")
	}

	*o = slice

	return nil
}

// LegalEntityExists checks if the LegalEntity row exists.
func LegalEntityExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"legal_entities\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if legal_entities exists")
	}

	return exists, nil
}

// Exists checks if the LegalEntity row exists.
func (o *LegalEntity) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LegalEntityExists(ctx, exec, o.ID)
}
