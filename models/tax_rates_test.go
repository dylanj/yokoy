// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTaxRates(t *testing.T) {
	t.Parallel()

	query := TaxRates()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTaxRatesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaxRates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaxRatesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TaxRates().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaxRates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaxRatesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TaxRateSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaxRates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaxRatesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TaxRateExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TaxRate exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TaxRateExists to return true, but got false.")
	}
}

func testTaxRatesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	taxRateFound, err := FindTaxRate(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if taxRateFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTaxRatesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TaxRates().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTaxRatesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TaxRates().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTaxRatesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxRateOne := &TaxRate{}
	taxRateTwo := &TaxRate{}
	if err = randomize.Struct(seed, taxRateOne, taxRateDBTypes, false, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}
	if err = randomize.Struct(seed, taxRateTwo, taxRateDBTypes, false, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = taxRateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = taxRateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TaxRates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTaxRatesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	taxRateOne := &TaxRate{}
	taxRateTwo := &TaxRate{}
	if err = randomize.Struct(seed, taxRateOne, taxRateDBTypes, false, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}
	if err = randomize.Struct(seed, taxRateTwo, taxRateDBTypes, false, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = taxRateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = taxRateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaxRates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func taxRateBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TaxRate) error {
	*o = TaxRate{}
	return nil
}

func taxRateAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TaxRate) error {
	*o = TaxRate{}
	return nil
}

func taxRateAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TaxRate) error {
	*o = TaxRate{}
	return nil
}

func taxRateBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TaxRate) error {
	*o = TaxRate{}
	return nil
}

func taxRateAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TaxRate) error {
	*o = TaxRate{}
	return nil
}

func taxRateBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TaxRate) error {
	*o = TaxRate{}
	return nil
}

func taxRateAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TaxRate) error {
	*o = TaxRate{}
	return nil
}

func taxRateBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TaxRate) error {
	*o = TaxRate{}
	return nil
}

func taxRateAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TaxRate) error {
	*o = TaxRate{}
	return nil
}

func testTaxRatesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TaxRate{}
	o := &TaxRate{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, taxRateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TaxRate object: %s", err)
	}

	AddTaxRateHook(boil.BeforeInsertHook, taxRateBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	taxRateBeforeInsertHooks = []TaxRateHook{}

	AddTaxRateHook(boil.AfterInsertHook, taxRateAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	taxRateAfterInsertHooks = []TaxRateHook{}

	AddTaxRateHook(boil.AfterSelectHook, taxRateAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	taxRateAfterSelectHooks = []TaxRateHook{}

	AddTaxRateHook(boil.BeforeUpdateHook, taxRateBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	taxRateBeforeUpdateHooks = []TaxRateHook{}

	AddTaxRateHook(boil.AfterUpdateHook, taxRateAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	taxRateAfterUpdateHooks = []TaxRateHook{}

	AddTaxRateHook(boil.BeforeDeleteHook, taxRateBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	taxRateBeforeDeleteHooks = []TaxRateHook{}

	AddTaxRateHook(boil.AfterDeleteHook, taxRateAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	taxRateAfterDeleteHooks = []TaxRateHook{}

	AddTaxRateHook(boil.BeforeUpsertHook, taxRateBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	taxRateBeforeUpsertHooks = []TaxRateHook{}

	AddTaxRateHook(boil.AfterUpsertHook, taxRateAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	taxRateAfterUpsertHooks = []TaxRateHook{}
}

func testTaxRatesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaxRates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTaxRatesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(taxRateColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TaxRates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTaxRatesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTaxRatesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TaxRateSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTaxRatesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TaxRates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	taxRateDBTypes = map[string]string{`ID`: `text`, `AccountReference`: `text`, `Code`: `text`, `Country`: `text`, `Name`: `text`, `Rate`: `integer`, `LegalEntityID`: `text`, `StatusActive`: `boolean`}
	_              = bytes.MinRead
)

func testTaxRatesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(taxRatePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(taxRateAllColumns) == len(taxRatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaxRates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTaxRatesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(taxRateAllColumns) == len(taxRatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TaxRate{}
	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaxRates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, taxRateDBTypes, true, taxRatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(taxRateAllColumns, taxRatePrimaryKeyColumns) {
		fields = taxRateAllColumns
	} else {
		fields = strmangle.SetComplement(
			taxRateAllColumns,
			taxRatePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TaxRateSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTaxRatesUpsert(t *testing.T) {
	t.Parallel()

	if len(taxRateAllColumns) == len(taxRatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TaxRate{}
	if err = randomize.Struct(seed, &o, taxRateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TaxRate: %s", err)
	}

	count, err := TaxRates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, taxRateDBTypes, false, taxRatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaxRate struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TaxRate: %s", err)
	}

	count, err = TaxRates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
