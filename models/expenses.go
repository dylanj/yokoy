// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Expense is an object representing the database table.
type Expense struct {
	ID                string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	AdditionalCharges null.Int          `boil:"additional_charges" json:"additional_charges,omitempty" toml:"additional_charges" yaml:"additional_charges,omitempty"`
	CategoryID        null.String       `boil:"category_id" json:"category_id,omitempty" toml:"category_id" yaml:"category_id,omitempty"`
	Country           null.String       `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	Created           null.Time         `boil:"created" json:"created,omitempty" toml:"created" yaml:"created,omitempty"`
	Currency          null.String       `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	Description       null.String       `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ExpenseDate       null.Time         `boil:"expense_date" json:"expense_date,omitempty" toml:"expense_date" yaml:"expense_date,omitempty"`
	ExpenseEndDate    null.Time         `boil:"expense_end_date" json:"expense_end_date,omitempty" toml:"expense_end_date" yaml:"expense_end_date,omitempty"`
	ExpenseType       null.String       `boil:"expense_type" json:"expense_type,omitempty" toml:"expense_type" yaml:"expense_type,omitempty"`
	IsCreditNote      null.Bool         `boil:"is_credit_note" json:"is_credit_note,omitempty" toml:"is_credit_note" yaml:"is_credit_note,omitempty"`
	LastModified      null.Time         `boil:"last_modified" json:"last_modified,omitempty" toml:"last_modified" yaml:"last_modified,omitempty"`
	LegalEntityID     null.String       `boil:"legal_entity_id" json:"legal_entity_id,omitempty" toml:"legal_entity_id" yaml:"legal_entity_id,omitempty"`
	PaymentMethod     null.String       `boil:"payment_method" json:"payment_method,omitempty" toml:"payment_method" yaml:"payment_method,omitempty"`
	PostingDate       null.Time         `boil:"posting_date" json:"posting_date,omitempty" toml:"posting_date" yaml:"posting_date,omitempty"`
	Status            null.String       `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	TaxNumber         null.String       `boil:"tax_number" json:"tax_number,omitempty" toml:"tax_number" yaml:"tax_number,omitempty"`
	TotalAmount       types.NullDecimal `boil:"total_amount" json:"total_amount,omitempty" toml:"total_amount" yaml:"total_amount,omitempty"`
	TotalClaim        types.NullDecimal `boil:"total_claim" json:"total_claim,omitempty" toml:"total_claim" yaml:"total_claim,omitempty"`
	TripID            null.String       `boil:"trip_id" json:"trip_id,omitempty" toml:"trip_id" yaml:"trip_id,omitempty"`
	UserID            null.String       `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`

	R *expenseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L expenseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExpenseColumns = struct {
	ID                string
	AdditionalCharges string
	CategoryID        string
	Country           string
	Created           string
	Currency          string
	Description       string
	ExpenseDate       string
	ExpenseEndDate    string
	ExpenseType       string
	IsCreditNote      string
	LastModified      string
	LegalEntityID     string
	PaymentMethod     string
	PostingDate       string
	Status            string
	TaxNumber         string
	TotalAmount       string
	TotalClaim        string
	TripID            string
	UserID            string
}{
	ID:                "id",
	AdditionalCharges: "additional_charges",
	CategoryID:        "category_id",
	Country:           "country",
	Created:           "created",
	Currency:          "currency",
	Description:       "description",
	ExpenseDate:       "expense_date",
	ExpenseEndDate:    "expense_end_date",
	ExpenseType:       "expense_type",
	IsCreditNote:      "is_credit_note",
	LastModified:      "last_modified",
	LegalEntityID:     "legal_entity_id",
	PaymentMethod:     "payment_method",
	PostingDate:       "posting_date",
	Status:            "status",
	TaxNumber:         "tax_number",
	TotalAmount:       "total_amount",
	TotalClaim:        "total_claim",
	TripID:            "trip_id",
	UserID:            "user_id",
}

var ExpenseTableColumns = struct {
	ID                string
	AdditionalCharges string
	CategoryID        string
	Country           string
	Created           string
	Currency          string
	Description       string
	ExpenseDate       string
	ExpenseEndDate    string
	ExpenseType       string
	IsCreditNote      string
	LastModified      string
	LegalEntityID     string
	PaymentMethod     string
	PostingDate       string
	Status            string
	TaxNumber         string
	TotalAmount       string
	TotalClaim        string
	TripID            string
	UserID            string
}{
	ID:                "expenses.id",
	AdditionalCharges: "expenses.additional_charges",
	CategoryID:        "expenses.category_id",
	Country:           "expenses.country",
	Created:           "expenses.created",
	Currency:          "expenses.currency",
	Description:       "expenses.description",
	ExpenseDate:       "expenses.expense_date",
	ExpenseEndDate:    "expenses.expense_end_date",
	ExpenseType:       "expenses.expense_type",
	IsCreditNote:      "expenses.is_credit_note",
	LastModified:      "expenses.last_modified",
	LegalEntityID:     "expenses.legal_entity_id",
	PaymentMethod:     "expenses.payment_method",
	PostingDate:       "expenses.posting_date",
	Status:            "expenses.status",
	TaxNumber:         "expenses.tax_number",
	TotalAmount:       "expenses.total_amount",
	TotalClaim:        "expenses.total_claim",
	TripID:            "expenses.trip_id",
	UserID:            "expenses.user_id",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ExpenseWhere = struct {
	ID                whereHelperstring
	AdditionalCharges whereHelpernull_Int
	CategoryID        whereHelpernull_String
	Country           whereHelpernull_String
	Created           whereHelpernull_Time
	Currency          whereHelpernull_String
	Description       whereHelpernull_String
	ExpenseDate       whereHelpernull_Time
	ExpenseEndDate    whereHelpernull_Time
	ExpenseType       whereHelpernull_String
	IsCreditNote      whereHelpernull_Bool
	LastModified      whereHelpernull_Time
	LegalEntityID     whereHelpernull_String
	PaymentMethod     whereHelpernull_String
	PostingDate       whereHelpernull_Time
	Status            whereHelpernull_String
	TaxNumber         whereHelpernull_String
	TotalAmount       whereHelpertypes_NullDecimal
	TotalClaim        whereHelpertypes_NullDecimal
	TripID            whereHelpernull_String
	UserID            whereHelpernull_String
}{
	ID:                whereHelperstring{field: "\"expenses\".\"id\""},
	AdditionalCharges: whereHelpernull_Int{field: "\"expenses\".\"additional_charges\""},
	CategoryID:        whereHelpernull_String{field: "\"expenses\".\"category_id\""},
	Country:           whereHelpernull_String{field: "\"expenses\".\"country\""},
	Created:           whereHelpernull_Time{field: "\"expenses\".\"created\""},
	Currency:          whereHelpernull_String{field: "\"expenses\".\"currency\""},
	Description:       whereHelpernull_String{field: "\"expenses\".\"description\""},
	ExpenseDate:       whereHelpernull_Time{field: "\"expenses\".\"expense_date\""},
	ExpenseEndDate:    whereHelpernull_Time{field: "\"expenses\".\"expense_end_date\""},
	ExpenseType:       whereHelpernull_String{field: "\"expenses\".\"expense_type\""},
	IsCreditNote:      whereHelpernull_Bool{field: "\"expenses\".\"is_credit_note\""},
	LastModified:      whereHelpernull_Time{field: "\"expenses\".\"last_modified\""},
	LegalEntityID:     whereHelpernull_String{field: "\"expenses\".\"legal_entity_id\""},
	PaymentMethod:     whereHelpernull_String{field: "\"expenses\".\"payment_method\""},
	PostingDate:       whereHelpernull_Time{field: "\"expenses\".\"posting_date\""},
	Status:            whereHelpernull_String{field: "\"expenses\".\"status\""},
	TaxNumber:         whereHelpernull_String{field: "\"expenses\".\"tax_number\""},
	TotalAmount:       whereHelpertypes_NullDecimal{field: "\"expenses\".\"total_amount\""},
	TotalClaim:        whereHelpertypes_NullDecimal{field: "\"expenses\".\"total_claim\""},
	TripID:            whereHelpernull_String{field: "\"expenses\".\"trip_id\""},
	UserID:            whereHelpernull_String{field: "\"expenses\".\"user_id\""},
}

// ExpenseRels is where relationship names are stored.
var ExpenseRels = struct {
}{}

// expenseR is where relationships are stored.
type expenseR struct {
}

// NewStruct creates a new relationship struct
func (*expenseR) NewStruct() *expenseR {
	return &expenseR{}
}

// expenseL is where Load methods for each relationship are stored.
type expenseL struct{}

var (
	expenseAllColumns            = []string{"id", "additional_charges", "category_id", "country", "created", "currency", "description", "expense_date", "expense_end_date", "expense_type", "is_credit_note", "last_modified", "legal_entity_id", "payment_method", "posting_date", "status", "tax_number", "total_amount", "total_claim", "trip_id", "user_id"}
	expenseColumnsWithoutDefault = []string{"id"}
	expenseColumnsWithDefault    = []string{"additional_charges", "category_id", "country", "created", "currency", "description", "expense_date", "expense_end_date", "expense_type", "is_credit_note", "last_modified", "legal_entity_id", "payment_method", "posting_date", "status", "tax_number", "total_amount", "total_claim", "trip_id", "user_id"}
	expensePrimaryKeyColumns     = []string{"id"}
	expenseGeneratedColumns      = []string{}
)

type (
	// ExpenseSlice is an alias for a slice of pointers to Expense.
	// This should almost always be used instead of []Expense.
	ExpenseSlice []*Expense
	// ExpenseHook is the signature for custom Expense hook methods
	ExpenseHook func(context.Context, boil.ContextExecutor, *Expense) error

	expenseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	expenseType                 = reflect.TypeOf(&Expense{})
	expenseMapping              = queries.MakeStructMapping(expenseType)
	expensePrimaryKeyMapping, _ = queries.BindMapping(expenseType, expenseMapping, expensePrimaryKeyColumns)
	expenseInsertCacheMut       sync.RWMutex
	expenseInsertCache          = make(map[string]insertCache)
	expenseUpdateCacheMut       sync.RWMutex
	expenseUpdateCache          = make(map[string]updateCache)
	expenseUpsertCacheMut       sync.RWMutex
	expenseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var expenseAfterSelectMu sync.Mutex
var expenseAfterSelectHooks []ExpenseHook

var expenseBeforeInsertMu sync.Mutex
var expenseBeforeInsertHooks []ExpenseHook
var expenseAfterInsertMu sync.Mutex
var expenseAfterInsertHooks []ExpenseHook

var expenseBeforeUpdateMu sync.Mutex
var expenseBeforeUpdateHooks []ExpenseHook
var expenseAfterUpdateMu sync.Mutex
var expenseAfterUpdateHooks []ExpenseHook

var expenseBeforeDeleteMu sync.Mutex
var expenseBeforeDeleteHooks []ExpenseHook
var expenseAfterDeleteMu sync.Mutex
var expenseAfterDeleteHooks []ExpenseHook

var expenseBeforeUpsertMu sync.Mutex
var expenseBeforeUpsertHooks []ExpenseHook
var expenseAfterUpsertMu sync.Mutex
var expenseAfterUpsertHooks []ExpenseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Expense) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Expense) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Expense) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Expense) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Expense) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Expense) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Expense) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Expense) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Expense) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExpenseHook registers your hook function for all future operations.
func AddExpenseHook(hookPoint boil.HookPoint, expenseHook ExpenseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		expenseAfterSelectMu.Lock()
		expenseAfterSelectHooks = append(expenseAfterSelectHooks, expenseHook)
		expenseAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		expenseBeforeInsertMu.Lock()
		expenseBeforeInsertHooks = append(expenseBeforeInsertHooks, expenseHook)
		expenseBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		expenseAfterInsertMu.Lock()
		expenseAfterInsertHooks = append(expenseAfterInsertHooks, expenseHook)
		expenseAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		expenseBeforeUpdateMu.Lock()
		expenseBeforeUpdateHooks = append(expenseBeforeUpdateHooks, expenseHook)
		expenseBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		expenseAfterUpdateMu.Lock()
		expenseAfterUpdateHooks = append(expenseAfterUpdateHooks, expenseHook)
		expenseAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		expenseBeforeDeleteMu.Lock()
		expenseBeforeDeleteHooks = append(expenseBeforeDeleteHooks, expenseHook)
		expenseBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		expenseAfterDeleteMu.Lock()
		expenseAfterDeleteHooks = append(expenseAfterDeleteHooks, expenseHook)
		expenseAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		expenseBeforeUpsertMu.Lock()
		expenseBeforeUpsertHooks = append(expenseBeforeUpsertHooks, expenseHook)
		expenseBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		expenseAfterUpsertMu.Lock()
		expenseAfterUpsertHooks = append(expenseAfterUpsertHooks, expenseHook)
		expenseAfterUpsertMu.Unlock()
	}
}

// One returns a single expense record from the query.
func (q expenseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Expense, error) {
	o := &Expense{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for expenses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Expense records from the query.
func (q expenseQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExpenseSlice, error) {
	var o []*Expense

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Expense slice")
	}

	if len(expenseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Expense records in the query.
func (q expenseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count expenses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q expenseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if expenses exists")
	}

	return count > 0, nil
}

// Expenses retrieves all the records using an executor.
func Expenses(mods ...qm.QueryMod) expenseQuery {
	mods = append(mods, qm.From("\"expenses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"expenses\".*"})
	}

	return expenseQuery{q}
}

// FindExpense retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExpense(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Expense, error) {
	expenseObj := &Expense{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"expenses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, expenseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from expenses")
	}

	if err = expenseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return expenseObj, err
	}

	return expenseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Expense) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no expenses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(expenseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	expenseInsertCacheMut.RLock()
	cache, cached := expenseInsertCache[key]
	expenseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			expenseAllColumns,
			expenseColumnsWithDefault,
			expenseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(expenseType, expenseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(expenseType, expenseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"expenses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"expenses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into expenses")
	}

	if !cached {
		expenseInsertCacheMut.Lock()
		expenseInsertCache[key] = cache
		expenseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Expense.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Expense) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	expenseUpdateCacheMut.RLock()
	cache, cached := expenseUpdateCache[key]
	expenseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			expenseAllColumns,
			expensePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update expenses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"expenses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, expensePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(expenseType, expenseMapping, append(wl, expensePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update expenses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for expenses")
	}

	if !cached {
		expenseUpdateCacheMut.Lock()
		expenseUpdateCache[key] = cache
		expenseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q expenseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for expenses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for expenses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExpenseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), expensePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"expenses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, expensePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in expense slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all expense")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Expense) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no expenses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(expenseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	expenseUpsertCacheMut.RLock()
	cache, cached := expenseUpsertCache[key]
	expenseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			expenseAllColumns,
			expenseColumnsWithDefault,
			expenseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			expenseAllColumns,
			expensePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert expenses, could not build update column list")
		}

		ret := strmangle.SetComplement(expenseAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(expensePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert expenses, could not build conflict column list")
			}

			conflict = make([]string, len(expensePrimaryKeyColumns))
			copy(conflict, expensePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"expenses\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(expenseType, expenseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(expenseType, expenseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert expenses")
	}

	if !cached {
		expenseUpsertCacheMut.Lock()
		expenseUpsertCache[key] = cache
		expenseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Expense record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Expense) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Expense provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), expensePrimaryKeyMapping)
	sql := "DELETE FROM \"expenses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from expenses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for expenses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q expenseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no expenseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from expenses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for expenses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExpenseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(expenseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), expensePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"expenses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, expensePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from expense slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for expenses")
	}

	if len(expenseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Expense) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExpense(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExpenseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExpenseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), expensePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"expenses\".* FROM \"expenses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, expensePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExpenseSlice")
	}

	*o = slice

	return nil
}

// ExpenseExists checks if the Expense row exists.
func ExpenseExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"expenses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if expenses exists")
	}

	return exists, nil
}

// Exists checks if the Expense row exists.
func (o *Expense) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ExpenseExists(ctx, exec, o.ID)
}
