// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testExpenseApproverIds(t *testing.T) {
	t.Parallel()

	query := ExpenseApproverIds()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testExpenseApproverIdsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExpenseApproverIds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpenseApproverIdsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ExpenseApproverIds().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExpenseApproverIds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpenseApproverIdsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExpenseApproverIDSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExpenseApproverIds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpenseApproverIdsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ExpenseApproverIDExists(ctx, tx, o.ExpenseID, o.ApproverID)
	if err != nil {
		t.Errorf("Unable to check if ExpenseApproverID exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExpenseApproverIDExists to return true, but got false.")
	}
}

func testExpenseApproverIdsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	expenseApproverIDFound, err := FindExpenseApproverID(ctx, tx, o.ExpenseID, o.ApproverID)
	if err != nil {
		t.Error(err)
	}

	if expenseApproverIDFound == nil {
		t.Error("want a record, got nil")
	}
}

func testExpenseApproverIdsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ExpenseApproverIds().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testExpenseApproverIdsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ExpenseApproverIds().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExpenseApproverIdsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expenseApproverIDOne := &ExpenseApproverID{}
	expenseApproverIDTwo := &ExpenseApproverID{}
	if err = randomize.Struct(seed, expenseApproverIDOne, expenseApproverIDDBTypes, false, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}
	if err = randomize.Struct(seed, expenseApproverIDTwo, expenseApproverIDDBTypes, false, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = expenseApproverIDOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = expenseApproverIDTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExpenseApproverIds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExpenseApproverIdsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	expenseApproverIDOne := &ExpenseApproverID{}
	expenseApproverIDTwo := &ExpenseApproverID{}
	if err = randomize.Struct(seed, expenseApproverIDOne, expenseApproverIDDBTypes, false, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}
	if err = randomize.Struct(seed, expenseApproverIDTwo, expenseApproverIDDBTypes, false, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = expenseApproverIDOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = expenseApproverIDTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExpenseApproverIds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func expenseApproverIDBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseApproverID) error {
	*o = ExpenseApproverID{}
	return nil
}

func expenseApproverIDAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseApproverID) error {
	*o = ExpenseApproverID{}
	return nil
}

func expenseApproverIDAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseApproverID) error {
	*o = ExpenseApproverID{}
	return nil
}

func expenseApproverIDBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseApproverID) error {
	*o = ExpenseApproverID{}
	return nil
}

func expenseApproverIDAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseApproverID) error {
	*o = ExpenseApproverID{}
	return nil
}

func expenseApproverIDBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseApproverID) error {
	*o = ExpenseApproverID{}
	return nil
}

func expenseApproverIDAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseApproverID) error {
	*o = ExpenseApproverID{}
	return nil
}

func expenseApproverIDBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseApproverID) error {
	*o = ExpenseApproverID{}
	return nil
}

func expenseApproverIDAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseApproverID) error {
	*o = ExpenseApproverID{}
	return nil
}

func testExpenseApproverIdsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ExpenseApproverID{}
	o := &ExpenseApproverID{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID object: %s", err)
	}

	AddExpenseApproverIDHook(boil.BeforeInsertHook, expenseApproverIDBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	expenseApproverIDBeforeInsertHooks = []ExpenseApproverIDHook{}

	AddExpenseApproverIDHook(boil.AfterInsertHook, expenseApproverIDAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	expenseApproverIDAfterInsertHooks = []ExpenseApproverIDHook{}

	AddExpenseApproverIDHook(boil.AfterSelectHook, expenseApproverIDAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	expenseApproverIDAfterSelectHooks = []ExpenseApproverIDHook{}

	AddExpenseApproverIDHook(boil.BeforeUpdateHook, expenseApproverIDBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	expenseApproverIDBeforeUpdateHooks = []ExpenseApproverIDHook{}

	AddExpenseApproverIDHook(boil.AfterUpdateHook, expenseApproverIDAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	expenseApproverIDAfterUpdateHooks = []ExpenseApproverIDHook{}

	AddExpenseApproverIDHook(boil.BeforeDeleteHook, expenseApproverIDBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	expenseApproverIDBeforeDeleteHooks = []ExpenseApproverIDHook{}

	AddExpenseApproverIDHook(boil.AfterDeleteHook, expenseApproverIDAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	expenseApproverIDAfterDeleteHooks = []ExpenseApproverIDHook{}

	AddExpenseApproverIDHook(boil.BeforeUpsertHook, expenseApproverIDBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	expenseApproverIDBeforeUpsertHooks = []ExpenseApproverIDHook{}

	AddExpenseApproverIDHook(boil.AfterUpsertHook, expenseApproverIDAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	expenseApproverIDAfterUpsertHooks = []ExpenseApproverIDHook{}
}

func testExpenseApproverIdsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExpenseApproverIds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExpenseApproverIdsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(expenseApproverIDColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ExpenseApproverIds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExpenseApproverIdsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExpenseApproverIdsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExpenseApproverIDSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExpenseApproverIdsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExpenseApproverIds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	expenseApproverIDDBTypes = map[string]string{`ExpenseID`: `text`, `ApproverID`: `text`}
	_                        = bytes.MinRead
)

func testExpenseApproverIdsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(expenseApproverIDPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(expenseApproverIDAllColumns) == len(expenseApproverIDPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExpenseApproverIds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testExpenseApproverIdsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(expenseApproverIDAllColumns) == len(expenseApproverIDPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseApproverID{}
	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExpenseApproverIds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, expenseApproverIDDBTypes, true, expenseApproverIDPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(expenseApproverIDAllColumns, expenseApproverIDPrimaryKeyColumns) {
		fields = expenseApproverIDAllColumns
	} else {
		fields = strmangle.SetComplement(
			expenseApproverIDAllColumns,
			expenseApproverIDPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ExpenseApproverIDSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testExpenseApproverIdsUpsert(t *testing.T) {
	t.Parallel()

	if len(expenseApproverIDAllColumns) == len(expenseApproverIDPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ExpenseApproverID{}
	if err = randomize.Struct(seed, &o, expenseApproverIDDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExpenseApproverID: %s", err)
	}

	count, err := ExpenseApproverIds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, expenseApproverIDDBTypes, false, expenseApproverIDPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExpenseApproverID struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExpenseApproverID: %s", err)
	}

	count, err = ExpenseApproverIds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
