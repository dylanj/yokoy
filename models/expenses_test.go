// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testExpenses(t *testing.T) {
	t.Parallel()

	query := Expenses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testExpensesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Expenses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpensesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Expenses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Expenses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpensesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExpenseSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Expenses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpensesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ExpenseExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Expense exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExpenseExists to return true, but got false.")
	}
}

func testExpensesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	expenseFound, err := FindExpense(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if expenseFound == nil {
		t.Error("want a record, got nil")
	}
}

func testExpensesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Expenses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testExpensesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Expenses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExpensesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expenseOne := &Expense{}
	expenseTwo := &Expense{}
	if err = randomize.Struct(seed, expenseOne, expenseDBTypes, false, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}
	if err = randomize.Struct(seed, expenseTwo, expenseDBTypes, false, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = expenseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = expenseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Expenses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExpensesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	expenseOne := &Expense{}
	expenseTwo := &Expense{}
	if err = randomize.Struct(seed, expenseOne, expenseDBTypes, false, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}
	if err = randomize.Struct(seed, expenseTwo, expenseDBTypes, false, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = expenseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = expenseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Expenses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func expenseBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Expense) error {
	*o = Expense{}
	return nil
}

func testExpensesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Expense{}
	o := &Expense{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, expenseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Expense object: %s", err)
	}

	AddExpenseHook(boil.BeforeInsertHook, expenseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	expenseBeforeInsertHooks = []ExpenseHook{}

	AddExpenseHook(boil.AfterInsertHook, expenseAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	expenseAfterInsertHooks = []ExpenseHook{}

	AddExpenseHook(boil.AfterSelectHook, expenseAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	expenseAfterSelectHooks = []ExpenseHook{}

	AddExpenseHook(boil.BeforeUpdateHook, expenseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	expenseBeforeUpdateHooks = []ExpenseHook{}

	AddExpenseHook(boil.AfterUpdateHook, expenseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	expenseAfterUpdateHooks = []ExpenseHook{}

	AddExpenseHook(boil.BeforeDeleteHook, expenseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	expenseBeforeDeleteHooks = []ExpenseHook{}

	AddExpenseHook(boil.AfterDeleteHook, expenseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	expenseAfterDeleteHooks = []ExpenseHook{}

	AddExpenseHook(boil.BeforeUpsertHook, expenseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	expenseBeforeUpsertHooks = []ExpenseHook{}

	AddExpenseHook(boil.AfterUpsertHook, expenseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	expenseAfterUpsertHooks = []ExpenseHook{}
}

func testExpensesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Expenses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExpensesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(expenseColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Expenses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExpensesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExpensesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExpenseSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExpensesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Expenses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	expenseDBTypes = map[string]string{`ID`: `text`, `CategoryID`: `text`, `Country`: `text`, `Created`: `timestamp without time zone`, `Currency`: `text`, `Description`: `text`, `ExpenseDate`: `timestamp without time zone`, `ExpenseEndDate`: `timestamp without time zone`, `ExpenseType`: `text`, `IsCreditNote`: `boolean`, `LastModified`: `timestamp without time zone`, `LegalEntityID`: `text`, `PaymentMethod`: `text`, `PostingDate`: `timestamp without time zone`, `Status`: `text`, `TaxNumber`: `text`, `TotalAmount`: `integer`, `TotalClaim`: `integer`, `TripID`: `text`, `UserID`: `text`}
	_              = bytes.MinRead
)

func testExpensesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(expensePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(expenseAllColumns) == len(expensePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Expenses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, expenseDBTypes, true, expensePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testExpensesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(expenseAllColumns) == len(expensePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Expense{}
	if err = randomize.Struct(seed, o, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Expenses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, expenseDBTypes, true, expensePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(expenseAllColumns, expensePrimaryKeyColumns) {
		fields = expenseAllColumns
	} else {
		fields = strmangle.SetComplement(
			expenseAllColumns,
			expensePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ExpenseSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testExpensesUpsert(t *testing.T) {
	t.Parallel()

	if len(expenseAllColumns) == len(expensePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Expense{}
	if err = randomize.Struct(seed, &o, expenseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Expense: %s", err)
	}

	count, err := Expenses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, expenseDBTypes, false, expensePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Expense: %s", err)
	}

	count, err = Expenses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
