// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ExpenseCostCenter is an object representing the database table.
type ExpenseCostCenter struct {
	ExpenseID     string          `boil:"expense_id" json:"expense_id" toml:"expense_id" yaml:"expense_id"`
	CostCenterID  string          `boil:"cost_center_id" json:"cost_center_id" toml:"cost_center_id" yaml:"cost_center_id"`
	PercentWeight decimal.Decimal `boil:"percent_weight" json:"percent_weight" toml:"percent_weight" yaml:"percent_weight"`

	R *expenseCostCenterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L expenseCostCenterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExpenseCostCenterColumns = struct {
	ExpenseID     string
	CostCenterID  string
	PercentWeight string
}{
	ExpenseID:     "expense_id",
	CostCenterID:  "cost_center_id",
	PercentWeight: "percent_weight",
}

var ExpenseCostCenterTableColumns = struct {
	ExpenseID     string
	CostCenterID  string
	PercentWeight string
}{
	ExpenseID:     "expense_cost_centers.expense_id",
	CostCenterID:  "expense_cost_centers.cost_center_id",
	PercentWeight: "expense_cost_centers.percent_weight",
}

// Generated where

var ExpenseCostCenterWhere = struct {
	ExpenseID     whereHelperstring
	CostCenterID  whereHelperstring
	PercentWeight whereHelperdecimal_Decimal
}{
	ExpenseID:     whereHelperstring{field: "\"expense_cost_centers\".\"expense_id\""},
	CostCenterID:  whereHelperstring{field: "\"expense_cost_centers\".\"cost_center_id\""},
	PercentWeight: whereHelperdecimal_Decimal{field: "\"expense_cost_centers\".\"percent_weight\""},
}

// ExpenseCostCenterRels is where relationship names are stored.
var ExpenseCostCenterRels = struct {
}{}

// expenseCostCenterR is where relationships are stored.
type expenseCostCenterR struct {
}

// NewStruct creates a new relationship struct
func (*expenseCostCenterR) NewStruct() *expenseCostCenterR {
	return &expenseCostCenterR{}
}

// expenseCostCenterL is where Load methods for each relationship are stored.
type expenseCostCenterL struct{}

var (
	expenseCostCenterAllColumns            = []string{"expense_id", "cost_center_id", "percent_weight"}
	expenseCostCenterColumnsWithoutDefault = []string{"expense_id", "cost_center_id", "percent_weight"}
	expenseCostCenterColumnsWithDefault    = []string{}
	expenseCostCenterPrimaryKeyColumns     = []string{"expense_id", "cost_center_id"}
	expenseCostCenterGeneratedColumns      = []string{}
)

type (
	// ExpenseCostCenterSlice is an alias for a slice of pointers to ExpenseCostCenter.
	// This should almost always be used instead of []ExpenseCostCenter.
	ExpenseCostCenterSlice []*ExpenseCostCenter
	// ExpenseCostCenterHook is the signature for custom ExpenseCostCenter hook methods
	ExpenseCostCenterHook func(context.Context, boil.ContextExecutor, *ExpenseCostCenter) error

	expenseCostCenterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	expenseCostCenterType                 = reflect.TypeOf(&ExpenseCostCenter{})
	expenseCostCenterMapping              = queries.MakeStructMapping(expenseCostCenterType)
	expenseCostCenterPrimaryKeyMapping, _ = queries.BindMapping(expenseCostCenterType, expenseCostCenterMapping, expenseCostCenterPrimaryKeyColumns)
	expenseCostCenterInsertCacheMut       sync.RWMutex
	expenseCostCenterInsertCache          = make(map[string]insertCache)
	expenseCostCenterUpdateCacheMut       sync.RWMutex
	expenseCostCenterUpdateCache          = make(map[string]updateCache)
	expenseCostCenterUpsertCacheMut       sync.RWMutex
	expenseCostCenterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var expenseCostCenterAfterSelectMu sync.Mutex
var expenseCostCenterAfterSelectHooks []ExpenseCostCenterHook

var expenseCostCenterBeforeInsertMu sync.Mutex
var expenseCostCenterBeforeInsertHooks []ExpenseCostCenterHook
var expenseCostCenterAfterInsertMu sync.Mutex
var expenseCostCenterAfterInsertHooks []ExpenseCostCenterHook

var expenseCostCenterBeforeUpdateMu sync.Mutex
var expenseCostCenterBeforeUpdateHooks []ExpenseCostCenterHook
var expenseCostCenterAfterUpdateMu sync.Mutex
var expenseCostCenterAfterUpdateHooks []ExpenseCostCenterHook

var expenseCostCenterBeforeDeleteMu sync.Mutex
var expenseCostCenterBeforeDeleteHooks []ExpenseCostCenterHook
var expenseCostCenterAfterDeleteMu sync.Mutex
var expenseCostCenterAfterDeleteHooks []ExpenseCostCenterHook

var expenseCostCenterBeforeUpsertMu sync.Mutex
var expenseCostCenterBeforeUpsertHooks []ExpenseCostCenterHook
var expenseCostCenterAfterUpsertMu sync.Mutex
var expenseCostCenterAfterUpsertHooks []ExpenseCostCenterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExpenseCostCenter) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseCostCenterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExpenseCostCenter) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseCostCenterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExpenseCostCenter) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseCostCenterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExpenseCostCenter) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseCostCenterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExpenseCostCenter) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseCostCenterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExpenseCostCenter) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseCostCenterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExpenseCostCenter) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseCostCenterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExpenseCostCenter) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseCostCenterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExpenseCostCenter) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseCostCenterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExpenseCostCenterHook registers your hook function for all future operations.
func AddExpenseCostCenterHook(hookPoint boil.HookPoint, expenseCostCenterHook ExpenseCostCenterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		expenseCostCenterAfterSelectMu.Lock()
		expenseCostCenterAfterSelectHooks = append(expenseCostCenterAfterSelectHooks, expenseCostCenterHook)
		expenseCostCenterAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		expenseCostCenterBeforeInsertMu.Lock()
		expenseCostCenterBeforeInsertHooks = append(expenseCostCenterBeforeInsertHooks, expenseCostCenterHook)
		expenseCostCenterBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		expenseCostCenterAfterInsertMu.Lock()
		expenseCostCenterAfterInsertHooks = append(expenseCostCenterAfterInsertHooks, expenseCostCenterHook)
		expenseCostCenterAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		expenseCostCenterBeforeUpdateMu.Lock()
		expenseCostCenterBeforeUpdateHooks = append(expenseCostCenterBeforeUpdateHooks, expenseCostCenterHook)
		expenseCostCenterBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		expenseCostCenterAfterUpdateMu.Lock()
		expenseCostCenterAfterUpdateHooks = append(expenseCostCenterAfterUpdateHooks, expenseCostCenterHook)
		expenseCostCenterAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		expenseCostCenterBeforeDeleteMu.Lock()
		expenseCostCenterBeforeDeleteHooks = append(expenseCostCenterBeforeDeleteHooks, expenseCostCenterHook)
		expenseCostCenterBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		expenseCostCenterAfterDeleteMu.Lock()
		expenseCostCenterAfterDeleteHooks = append(expenseCostCenterAfterDeleteHooks, expenseCostCenterHook)
		expenseCostCenterAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		expenseCostCenterBeforeUpsertMu.Lock()
		expenseCostCenterBeforeUpsertHooks = append(expenseCostCenterBeforeUpsertHooks, expenseCostCenterHook)
		expenseCostCenterBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		expenseCostCenterAfterUpsertMu.Lock()
		expenseCostCenterAfterUpsertHooks = append(expenseCostCenterAfterUpsertHooks, expenseCostCenterHook)
		expenseCostCenterAfterUpsertMu.Unlock()
	}
}

// One returns a single expenseCostCenter record from the query.
func (q expenseCostCenterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExpenseCostCenter, error) {
	o := &ExpenseCostCenter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for expense_cost_centers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExpenseCostCenter records from the query.
func (q expenseCostCenterQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExpenseCostCenterSlice, error) {
	var o []*ExpenseCostCenter

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExpenseCostCenter slice")
	}

	if len(expenseCostCenterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExpenseCostCenter records in the query.
func (q expenseCostCenterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count expense_cost_centers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q expenseCostCenterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if expense_cost_centers exists")
	}

	return count > 0, nil
}

// ExpenseCostCenters retrieves all the records using an executor.
func ExpenseCostCenters(mods ...qm.QueryMod) expenseCostCenterQuery {
	mods = append(mods, qm.From("\"expense_cost_centers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"expense_cost_centers\".*"})
	}

	return expenseCostCenterQuery{q}
}

// FindExpenseCostCenter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExpenseCostCenter(ctx context.Context, exec boil.ContextExecutor, expenseID string, costCenterID string, selectCols ...string) (*ExpenseCostCenter, error) {
	expenseCostCenterObj := &ExpenseCostCenter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"expense_cost_centers\" where \"expense_id\"=$1 AND \"cost_center_id\"=$2", sel,
	)

	q := queries.Raw(query, expenseID, costCenterID)

	err := q.Bind(ctx, exec, expenseCostCenterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from expense_cost_centers")
	}

	if err = expenseCostCenterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return expenseCostCenterObj, err
	}

	return expenseCostCenterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExpenseCostCenter) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no expense_cost_centers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(expenseCostCenterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	expenseCostCenterInsertCacheMut.RLock()
	cache, cached := expenseCostCenterInsertCache[key]
	expenseCostCenterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			expenseCostCenterAllColumns,
			expenseCostCenterColumnsWithDefault,
			expenseCostCenterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(expenseCostCenterType, expenseCostCenterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(expenseCostCenterType, expenseCostCenterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"expense_cost_centers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"expense_cost_centers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into expense_cost_centers")
	}

	if !cached {
		expenseCostCenterInsertCacheMut.Lock()
		expenseCostCenterInsertCache[key] = cache
		expenseCostCenterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExpenseCostCenter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExpenseCostCenter) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	expenseCostCenterUpdateCacheMut.RLock()
	cache, cached := expenseCostCenterUpdateCache[key]
	expenseCostCenterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			expenseCostCenterAllColumns,
			expenseCostCenterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update expense_cost_centers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"expense_cost_centers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, expenseCostCenterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(expenseCostCenterType, expenseCostCenterMapping, append(wl, expenseCostCenterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update expense_cost_centers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for expense_cost_centers")
	}

	if !cached {
		expenseCostCenterUpdateCacheMut.Lock()
		expenseCostCenterUpdateCache[key] = cache
		expenseCostCenterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q expenseCostCenterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for expense_cost_centers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for expense_cost_centers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExpenseCostCenterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), expenseCostCenterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"expense_cost_centers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, expenseCostCenterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in expenseCostCenter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all expenseCostCenter")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExpenseCostCenter) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no expense_cost_centers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(expenseCostCenterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	expenseCostCenterUpsertCacheMut.RLock()
	cache, cached := expenseCostCenterUpsertCache[key]
	expenseCostCenterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			expenseCostCenterAllColumns,
			expenseCostCenterColumnsWithDefault,
			expenseCostCenterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			expenseCostCenterAllColumns,
			expenseCostCenterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert expense_cost_centers, could not build update column list")
		}

		ret := strmangle.SetComplement(expenseCostCenterAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(expenseCostCenterPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert expense_cost_centers, could not build conflict column list")
			}

			conflict = make([]string, len(expenseCostCenterPrimaryKeyColumns))
			copy(conflict, expenseCostCenterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"expense_cost_centers\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(expenseCostCenterType, expenseCostCenterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(expenseCostCenterType, expenseCostCenterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert expense_cost_centers")
	}

	if !cached {
		expenseCostCenterUpsertCacheMut.Lock()
		expenseCostCenterUpsertCache[key] = cache
		expenseCostCenterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ExpenseCostCenter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExpenseCostCenter) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExpenseCostCenter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), expenseCostCenterPrimaryKeyMapping)
	sql := "DELETE FROM \"expense_cost_centers\" WHERE \"expense_id\"=$1 AND \"cost_center_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from expense_cost_centers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for expense_cost_centers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q expenseCostCenterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no expenseCostCenterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from expense_cost_centers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for expense_cost_centers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExpenseCostCenterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(expenseCostCenterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), expenseCostCenterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"expense_cost_centers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, expenseCostCenterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from expenseCostCenter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for expense_cost_centers")
	}

	if len(expenseCostCenterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExpenseCostCenter) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExpenseCostCenter(ctx, exec, o.ExpenseID, o.CostCenterID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExpenseCostCenterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExpenseCostCenterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), expenseCostCenterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"expense_cost_centers\".* FROM \"expense_cost_centers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, expenseCostCenterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExpenseCostCenterSlice")
	}

	*o = slice

	return nil
}

// ExpenseCostCenterExists checks if the ExpenseCostCenter row exists.
func ExpenseCostCenterExists(ctx context.Context, exec boil.ContextExecutor, expenseID string, costCenterID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"expense_cost_centers\" where \"expense_id\"=$1 AND \"cost_center_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, expenseID, costCenterID)
	}
	row := exec.QueryRowContext(ctx, sql, expenseID, costCenterID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if expense_cost_centers exists")
	}

	return exists, nil
}

// Exists checks if the ExpenseCostCenter row exists.
func (o *ExpenseCostCenter) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ExpenseCostCenterExists(ctx, exec, o.ExpenseID, o.CostCenterID)
}
