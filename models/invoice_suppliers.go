// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InvoiceSupplier is an object representing the database table.
type InvoiceSupplier struct {
	ID                   string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	City                 null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	CountryCode          null.String `boil:"country_code" json:"country_code,omitempty" toml:"country_code" yaml:"country_code,omitempty"`
	ExternalID           null.String `boil:"external_id" json:"external_id,omitempty" toml:"external_id" yaml:"external_id,omitempty"`
	Name                 null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	SecondaryName        null.String `boil:"secondary_name" json:"secondary_name,omitempty" toml:"secondary_name" yaml:"secondary_name,omitempty"`
	ShortName            null.String `boil:"short_name" json:"short_name,omitempty" toml:"short_name" yaml:"short_name,omitempty"`
	StatusActive         null.Bool   `boil:"status_active" json:"status_active,omitempty" toml:"status_active" yaml:"status_active,omitempty"`
	Street               null.String `boil:"street" json:"street,omitempty" toml:"street" yaml:"street,omitempty"`
	Taxnumber            null.Int    `boil:"taxnumber" json:"taxnumber,omitempty" toml:"taxnumber" yaml:"taxnumber,omitempty"`
	URL                  null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	Zipcode              null.Int    `boil:"zipcode" json:"zipcode,omitempty" toml:"zipcode" yaml:"zipcode,omitempty"`
	Defaultapproverid    null.String `boil:"defaultapproverid" json:"defaultapproverid,omitempty" toml:"defaultapproverid" yaml:"defaultapproverid,omitempty"`
	Defaultcategoryid    null.String `boil:"defaultcategoryid" json:"defaultcategoryid,omitempty" toml:"defaultcategoryid" yaml:"defaultcategoryid,omitempty"`
	Defaultcostcenter    null.String `boil:"defaultcostcenter" json:"defaultcostcenter,omitempty" toml:"defaultcostcenter" yaml:"defaultcostcenter,omitempty"`
	Defaultpaymenttermid null.String `boil:"defaultpaymenttermid" json:"defaultpaymenttermid,omitempty" toml:"defaultpaymenttermid" yaml:"defaultpaymenttermid,omitempty"`
	SupplierID           null.String `boil:"supplier_id" json:"supplier_id,omitempty" toml:"supplier_id" yaml:"supplier_id,omitempty"`

	R *invoiceSupplierR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L invoiceSupplierL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InvoiceSupplierColumns = struct {
	ID                   string
	City                 string
	CountryCode          string
	ExternalID           string
	Name                 string
	SecondaryName        string
	ShortName            string
	StatusActive         string
	Street               string
	Taxnumber            string
	URL                  string
	Zipcode              string
	Defaultapproverid    string
	Defaultcategoryid    string
	Defaultcostcenter    string
	Defaultpaymenttermid string
	SupplierID           string
}{
	ID:                   "id",
	City:                 "city",
	CountryCode:          "country_code",
	ExternalID:           "external_id",
	Name:                 "name",
	SecondaryName:        "secondary_name",
	ShortName:            "short_name",
	StatusActive:         "status_active",
	Street:               "street",
	Taxnumber:            "taxnumber",
	URL:                  "url",
	Zipcode:              "zipcode",
	Defaultapproverid:    "defaultapproverid",
	Defaultcategoryid:    "defaultcategoryid",
	Defaultcostcenter:    "defaultcostcenter",
	Defaultpaymenttermid: "defaultpaymenttermid",
	SupplierID:           "supplier_id",
}

var InvoiceSupplierTableColumns = struct {
	ID                   string
	City                 string
	CountryCode          string
	ExternalID           string
	Name                 string
	SecondaryName        string
	ShortName            string
	StatusActive         string
	Street               string
	Taxnumber            string
	URL                  string
	Zipcode              string
	Defaultapproverid    string
	Defaultcategoryid    string
	Defaultcostcenter    string
	Defaultpaymenttermid string
	SupplierID           string
}{
	ID:                   "invoice_suppliers.id",
	City:                 "invoice_suppliers.city",
	CountryCode:          "invoice_suppliers.country_code",
	ExternalID:           "invoice_suppliers.external_id",
	Name:                 "invoice_suppliers.name",
	SecondaryName:        "invoice_suppliers.secondary_name",
	ShortName:            "invoice_suppliers.short_name",
	StatusActive:         "invoice_suppliers.status_active",
	Street:               "invoice_suppliers.street",
	Taxnumber:            "invoice_suppliers.taxnumber",
	URL:                  "invoice_suppliers.url",
	Zipcode:              "invoice_suppliers.zipcode",
	Defaultapproverid:    "invoice_suppliers.defaultapproverid",
	Defaultcategoryid:    "invoice_suppliers.defaultcategoryid",
	Defaultcostcenter:    "invoice_suppliers.defaultcostcenter",
	Defaultpaymenttermid: "invoice_suppliers.defaultpaymenttermid",
	SupplierID:           "invoice_suppliers.supplier_id",
}

// Generated where

var InvoiceSupplierWhere = struct {
	ID                   whereHelperstring
	City                 whereHelpernull_String
	CountryCode          whereHelpernull_String
	ExternalID           whereHelpernull_String
	Name                 whereHelpernull_String
	SecondaryName        whereHelpernull_String
	ShortName            whereHelpernull_String
	StatusActive         whereHelpernull_Bool
	Street               whereHelpernull_String
	Taxnumber            whereHelpernull_Int
	URL                  whereHelpernull_String
	Zipcode              whereHelpernull_Int
	Defaultapproverid    whereHelpernull_String
	Defaultcategoryid    whereHelpernull_String
	Defaultcostcenter    whereHelpernull_String
	Defaultpaymenttermid whereHelpernull_String
	SupplierID           whereHelpernull_String
}{
	ID:                   whereHelperstring{field: "\"invoice_suppliers\".\"id\""},
	City:                 whereHelpernull_String{field: "\"invoice_suppliers\".\"city\""},
	CountryCode:          whereHelpernull_String{field: "\"invoice_suppliers\".\"country_code\""},
	ExternalID:           whereHelpernull_String{field: "\"invoice_suppliers\".\"external_id\""},
	Name:                 whereHelpernull_String{field: "\"invoice_suppliers\".\"name\""},
	SecondaryName:        whereHelpernull_String{field: "\"invoice_suppliers\".\"secondary_name\""},
	ShortName:            whereHelpernull_String{field: "\"invoice_suppliers\".\"short_name\""},
	StatusActive:         whereHelpernull_Bool{field: "\"invoice_suppliers\".\"status_active\""},
	Street:               whereHelpernull_String{field: "\"invoice_suppliers\".\"street\""},
	Taxnumber:            whereHelpernull_Int{field: "\"invoice_suppliers\".\"taxnumber\""},
	URL:                  whereHelpernull_String{field: "\"invoice_suppliers\".\"url\""},
	Zipcode:              whereHelpernull_Int{field: "\"invoice_suppliers\".\"zipcode\""},
	Defaultapproverid:    whereHelpernull_String{field: "\"invoice_suppliers\".\"defaultapproverid\""},
	Defaultcategoryid:    whereHelpernull_String{field: "\"invoice_suppliers\".\"defaultcategoryid\""},
	Defaultcostcenter:    whereHelpernull_String{field: "\"invoice_suppliers\".\"defaultcostcenter\""},
	Defaultpaymenttermid: whereHelpernull_String{field: "\"invoice_suppliers\".\"defaultpaymenttermid\""},
	SupplierID:           whereHelpernull_String{field: "\"invoice_suppliers\".\"supplier_id\""},
}

// InvoiceSupplierRels is where relationship names are stored.
var InvoiceSupplierRels = struct {
}{}

// invoiceSupplierR is where relationships are stored.
type invoiceSupplierR struct {
}

// NewStruct creates a new relationship struct
func (*invoiceSupplierR) NewStruct() *invoiceSupplierR {
	return &invoiceSupplierR{}
}

// invoiceSupplierL is where Load methods for each relationship are stored.
type invoiceSupplierL struct{}

var (
	invoiceSupplierAllColumns            = []string{"id", "city", "country_code", "external_id", "name", "secondary_name", "short_name", "status_active", "street", "taxnumber", "url", "zipcode", "defaultapproverid", "defaultcategoryid", "defaultcostcenter", "defaultpaymenttermid", "supplier_id"}
	invoiceSupplierColumnsWithoutDefault = []string{"id"}
	invoiceSupplierColumnsWithDefault    = []string{"city", "country_code", "external_id", "name", "secondary_name", "short_name", "status_active", "street", "taxnumber", "url", "zipcode", "defaultapproverid", "defaultcategoryid", "defaultcostcenter", "defaultpaymenttermid", "supplier_id"}
	invoiceSupplierPrimaryKeyColumns     = []string{"id"}
	invoiceSupplierGeneratedColumns      = []string{}
)

type (
	// InvoiceSupplierSlice is an alias for a slice of pointers to InvoiceSupplier.
	// This should almost always be used instead of []InvoiceSupplier.
	InvoiceSupplierSlice []*InvoiceSupplier
	// InvoiceSupplierHook is the signature for custom InvoiceSupplier hook methods
	InvoiceSupplierHook func(context.Context, boil.ContextExecutor, *InvoiceSupplier) error

	invoiceSupplierQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	invoiceSupplierType                 = reflect.TypeOf(&InvoiceSupplier{})
	invoiceSupplierMapping              = queries.MakeStructMapping(invoiceSupplierType)
	invoiceSupplierPrimaryKeyMapping, _ = queries.BindMapping(invoiceSupplierType, invoiceSupplierMapping, invoiceSupplierPrimaryKeyColumns)
	invoiceSupplierInsertCacheMut       sync.RWMutex
	invoiceSupplierInsertCache          = make(map[string]insertCache)
	invoiceSupplierUpdateCacheMut       sync.RWMutex
	invoiceSupplierUpdateCache          = make(map[string]updateCache)
	invoiceSupplierUpsertCacheMut       sync.RWMutex
	invoiceSupplierUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var invoiceSupplierAfterSelectHooks []InvoiceSupplierHook

var invoiceSupplierBeforeInsertHooks []InvoiceSupplierHook
var invoiceSupplierAfterInsertHooks []InvoiceSupplierHook

var invoiceSupplierBeforeUpdateHooks []InvoiceSupplierHook
var invoiceSupplierAfterUpdateHooks []InvoiceSupplierHook

var invoiceSupplierBeforeDeleteHooks []InvoiceSupplierHook
var invoiceSupplierAfterDeleteHooks []InvoiceSupplierHook

var invoiceSupplierBeforeUpsertHooks []InvoiceSupplierHook
var invoiceSupplierAfterUpsertHooks []InvoiceSupplierHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InvoiceSupplier) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceSupplierAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InvoiceSupplier) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceSupplierBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InvoiceSupplier) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceSupplierAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InvoiceSupplier) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceSupplierBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InvoiceSupplier) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceSupplierAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InvoiceSupplier) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceSupplierBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InvoiceSupplier) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceSupplierAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InvoiceSupplier) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceSupplierBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InvoiceSupplier) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceSupplierAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInvoiceSupplierHook registers your hook function for all future operations.
func AddInvoiceSupplierHook(hookPoint boil.HookPoint, invoiceSupplierHook InvoiceSupplierHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		invoiceSupplierAfterSelectHooks = append(invoiceSupplierAfterSelectHooks, invoiceSupplierHook)
	case boil.BeforeInsertHook:
		invoiceSupplierBeforeInsertHooks = append(invoiceSupplierBeforeInsertHooks, invoiceSupplierHook)
	case boil.AfterInsertHook:
		invoiceSupplierAfterInsertHooks = append(invoiceSupplierAfterInsertHooks, invoiceSupplierHook)
	case boil.BeforeUpdateHook:
		invoiceSupplierBeforeUpdateHooks = append(invoiceSupplierBeforeUpdateHooks, invoiceSupplierHook)
	case boil.AfterUpdateHook:
		invoiceSupplierAfterUpdateHooks = append(invoiceSupplierAfterUpdateHooks, invoiceSupplierHook)
	case boil.BeforeDeleteHook:
		invoiceSupplierBeforeDeleteHooks = append(invoiceSupplierBeforeDeleteHooks, invoiceSupplierHook)
	case boil.AfterDeleteHook:
		invoiceSupplierAfterDeleteHooks = append(invoiceSupplierAfterDeleteHooks, invoiceSupplierHook)
	case boil.BeforeUpsertHook:
		invoiceSupplierBeforeUpsertHooks = append(invoiceSupplierBeforeUpsertHooks, invoiceSupplierHook)
	case boil.AfterUpsertHook:
		invoiceSupplierAfterUpsertHooks = append(invoiceSupplierAfterUpsertHooks, invoiceSupplierHook)
	}
}

// One returns a single invoiceSupplier record from the query.
func (q invoiceSupplierQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InvoiceSupplier, error) {
	o := &InvoiceSupplier{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for invoice_suppliers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InvoiceSupplier records from the query.
func (q invoiceSupplierQuery) All(ctx context.Context, exec boil.ContextExecutor) (InvoiceSupplierSlice, error) {
	var o []*InvoiceSupplier

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InvoiceSupplier slice")
	}

	if len(invoiceSupplierAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InvoiceSupplier records in the query.
func (q invoiceSupplierQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count invoice_suppliers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q invoiceSupplierQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if invoice_suppliers exists")
	}

	return count > 0, nil
}

// InvoiceSuppliers retrieves all the records using an executor.
func InvoiceSuppliers(mods ...qm.QueryMod) invoiceSupplierQuery {
	mods = append(mods, qm.From("\"invoice_suppliers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice_suppliers\".*"})
	}

	return invoiceSupplierQuery{q}
}

// FindInvoiceSupplier retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInvoiceSupplier(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*InvoiceSupplier, error) {
	invoiceSupplierObj := &InvoiceSupplier{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoice_suppliers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, invoiceSupplierObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from invoice_suppliers")
	}

	if err = invoiceSupplierObj.doAfterSelectHooks(ctx, exec); err != nil {
		return invoiceSupplierObj, err
	}

	return invoiceSupplierObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InvoiceSupplier) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invoice_suppliers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceSupplierColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	invoiceSupplierInsertCacheMut.RLock()
	cache, cached := invoiceSupplierInsertCache[key]
	invoiceSupplierInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			invoiceSupplierAllColumns,
			invoiceSupplierColumnsWithDefault,
			invoiceSupplierColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(invoiceSupplierType, invoiceSupplierMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(invoiceSupplierType, invoiceSupplierMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice_suppliers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice_suppliers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into invoice_suppliers")
	}

	if !cached {
		invoiceSupplierInsertCacheMut.Lock()
		invoiceSupplierInsertCache[key] = cache
		invoiceSupplierInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InvoiceSupplier.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InvoiceSupplier) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	invoiceSupplierUpdateCacheMut.RLock()
	cache, cached := invoiceSupplierUpdateCache[key]
	invoiceSupplierUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			invoiceSupplierAllColumns,
			invoiceSupplierPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update invoice_suppliers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoice_suppliers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, invoiceSupplierPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(invoiceSupplierType, invoiceSupplierMapping, append(wl, invoiceSupplierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update invoice_suppliers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for invoice_suppliers")
	}

	if !cached {
		invoiceSupplierUpdateCacheMut.Lock()
		invoiceSupplierUpdateCache[key] = cache
		invoiceSupplierUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q invoiceSupplierQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for invoice_suppliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for invoice_suppliers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InvoiceSupplierSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceSupplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoice_suppliers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, invoiceSupplierPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in invoiceSupplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all invoiceSupplier")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InvoiceSupplier) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invoice_suppliers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceSupplierColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	invoiceSupplierUpsertCacheMut.RLock()
	cache, cached := invoiceSupplierUpsertCache[key]
	invoiceSupplierUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			invoiceSupplierAllColumns,
			invoiceSupplierColumnsWithDefault,
			invoiceSupplierColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			invoiceSupplierAllColumns,
			invoiceSupplierPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert invoice_suppliers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(invoiceSupplierPrimaryKeyColumns))
			copy(conflict, invoiceSupplierPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice_suppliers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(invoiceSupplierType, invoiceSupplierMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(invoiceSupplierType, invoiceSupplierMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert invoice_suppliers")
	}

	if !cached {
		invoiceSupplierUpsertCacheMut.Lock()
		invoiceSupplierUpsertCache[key] = cache
		invoiceSupplierUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InvoiceSupplier record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InvoiceSupplier) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InvoiceSupplier provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), invoiceSupplierPrimaryKeyMapping)
	sql := "DELETE FROM \"invoice_suppliers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from invoice_suppliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for invoice_suppliers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q invoiceSupplierQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no invoiceSupplierQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoice_suppliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoice_suppliers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InvoiceSupplierSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(invoiceSupplierBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceSupplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoice_suppliers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoiceSupplierPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoiceSupplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoice_suppliers")
	}

	if len(invoiceSupplierAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InvoiceSupplier) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInvoiceSupplier(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InvoiceSupplierSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InvoiceSupplierSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceSupplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoice_suppliers\".* FROM \"invoice_suppliers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoiceSupplierPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InvoiceSupplierSlice")
	}

	*o = slice

	return nil
}

// InvoiceSupplierExists checks if the InvoiceSupplier row exists.
func InvoiceSupplierExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoice_suppliers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if invoice_suppliers exists")
	}

	return exists, nil
}

// Exists checks if the InvoiceSupplier row exists.
func (o *InvoiceSupplier) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InvoiceSupplierExists(ctx, exec, o.ID)
}
