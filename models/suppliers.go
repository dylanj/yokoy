// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Supplier is an object representing the database table.
type Supplier struct {
	ID                   string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	City                 null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	CountryCode          null.String `boil:"country_code" json:"country_code,omitempty" toml:"country_code" yaml:"country_code,omitempty"`
	ExternalID           null.String `boil:"external_id" json:"external_id,omitempty" toml:"external_id" yaml:"external_id,omitempty"`
	Name                 null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	SecondaryName        null.String `boil:"secondary_name" json:"secondary_name,omitempty" toml:"secondary_name" yaml:"secondary_name,omitempty"`
	ShortName            null.String `boil:"short_name" json:"short_name,omitempty" toml:"short_name" yaml:"short_name,omitempty"`
	StatusActive         null.Bool   `boil:"status_active" json:"status_active,omitempty" toml:"status_active" yaml:"status_active,omitempty"`
	Street               null.String `boil:"street" json:"street,omitempty" toml:"street" yaml:"street,omitempty"`
	Taxnumber            null.String `boil:"taxnumber" json:"taxnumber,omitempty" toml:"taxnumber" yaml:"taxnumber,omitempty"`
	URL                  null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	Zipcode              null.String `boil:"zipcode" json:"zipcode,omitempty" toml:"zipcode" yaml:"zipcode,omitempty"`
	Defaultapproverid    null.String `boil:"defaultapproverid" json:"defaultapproverid,omitempty" toml:"defaultapproverid" yaml:"defaultapproverid,omitempty"`
	Defaultcategoryid    null.String `boil:"defaultcategoryid" json:"defaultcategoryid,omitempty" toml:"defaultcategoryid" yaml:"defaultcategoryid,omitempty"`
	Defaultcostcenter    null.String `boil:"defaultcostcenter" json:"defaultcostcenter,omitempty" toml:"defaultcostcenter" yaml:"defaultcostcenter,omitempty"`
	Defaultpaymenttermid null.String `boil:"defaultpaymenttermid" json:"defaultpaymenttermid,omitempty" toml:"defaultpaymenttermid" yaml:"defaultpaymenttermid,omitempty"`
	SupplierID           null.String `boil:"supplier_id" json:"supplier_id,omitempty" toml:"supplier_id" yaml:"supplier_id,omitempty"`

	R *supplierR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L supplierL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SupplierColumns = struct {
	ID                   string
	City                 string
	CountryCode          string
	ExternalID           string
	Name                 string
	SecondaryName        string
	ShortName            string
	StatusActive         string
	Street               string
	Taxnumber            string
	URL                  string
	Zipcode              string
	Defaultapproverid    string
	Defaultcategoryid    string
	Defaultcostcenter    string
	Defaultpaymenttermid string
	SupplierID           string
}{
	ID:                   "id",
	City:                 "city",
	CountryCode:          "country_code",
	ExternalID:           "external_id",
	Name:                 "name",
	SecondaryName:        "secondary_name",
	ShortName:            "short_name",
	StatusActive:         "status_active",
	Street:               "street",
	Taxnumber:            "taxnumber",
	URL:                  "url",
	Zipcode:              "zipcode",
	Defaultapproverid:    "defaultapproverid",
	Defaultcategoryid:    "defaultcategoryid",
	Defaultcostcenter:    "defaultcostcenter",
	Defaultpaymenttermid: "defaultpaymenttermid",
	SupplierID:           "supplier_id",
}

var SupplierTableColumns = struct {
	ID                   string
	City                 string
	CountryCode          string
	ExternalID           string
	Name                 string
	SecondaryName        string
	ShortName            string
	StatusActive         string
	Street               string
	Taxnumber            string
	URL                  string
	Zipcode              string
	Defaultapproverid    string
	Defaultcategoryid    string
	Defaultcostcenter    string
	Defaultpaymenttermid string
	SupplierID           string
}{
	ID:                   "suppliers.id",
	City:                 "suppliers.city",
	CountryCode:          "suppliers.country_code",
	ExternalID:           "suppliers.external_id",
	Name:                 "suppliers.name",
	SecondaryName:        "suppliers.secondary_name",
	ShortName:            "suppliers.short_name",
	StatusActive:         "suppliers.status_active",
	Street:               "suppliers.street",
	Taxnumber:            "suppliers.taxnumber",
	URL:                  "suppliers.url",
	Zipcode:              "suppliers.zipcode",
	Defaultapproverid:    "suppliers.defaultapproverid",
	Defaultcategoryid:    "suppliers.defaultcategoryid",
	Defaultcostcenter:    "suppliers.defaultcostcenter",
	Defaultpaymenttermid: "suppliers.defaultpaymenttermid",
	SupplierID:           "suppliers.supplier_id",
}

// Generated where

var SupplierWhere = struct {
	ID                   whereHelperstring
	City                 whereHelpernull_String
	CountryCode          whereHelpernull_String
	ExternalID           whereHelpernull_String
	Name                 whereHelpernull_String
	SecondaryName        whereHelpernull_String
	ShortName            whereHelpernull_String
	StatusActive         whereHelpernull_Bool
	Street               whereHelpernull_String
	Taxnumber            whereHelpernull_String
	URL                  whereHelpernull_String
	Zipcode              whereHelpernull_String
	Defaultapproverid    whereHelpernull_String
	Defaultcategoryid    whereHelpernull_String
	Defaultcostcenter    whereHelpernull_String
	Defaultpaymenttermid whereHelpernull_String
	SupplierID           whereHelpernull_String
}{
	ID:                   whereHelperstring{field: "\"suppliers\".\"id\""},
	City:                 whereHelpernull_String{field: "\"suppliers\".\"city\""},
	CountryCode:          whereHelpernull_String{field: "\"suppliers\".\"country_code\""},
	ExternalID:           whereHelpernull_String{field: "\"suppliers\".\"external_id\""},
	Name:                 whereHelpernull_String{field: "\"suppliers\".\"name\""},
	SecondaryName:        whereHelpernull_String{field: "\"suppliers\".\"secondary_name\""},
	ShortName:            whereHelpernull_String{field: "\"suppliers\".\"short_name\""},
	StatusActive:         whereHelpernull_Bool{field: "\"suppliers\".\"status_active\""},
	Street:               whereHelpernull_String{field: "\"suppliers\".\"street\""},
	Taxnumber:            whereHelpernull_String{field: "\"suppliers\".\"taxnumber\""},
	URL:                  whereHelpernull_String{field: "\"suppliers\".\"url\""},
	Zipcode:              whereHelpernull_String{field: "\"suppliers\".\"zipcode\""},
	Defaultapproverid:    whereHelpernull_String{field: "\"suppliers\".\"defaultapproverid\""},
	Defaultcategoryid:    whereHelpernull_String{field: "\"suppliers\".\"defaultcategoryid\""},
	Defaultcostcenter:    whereHelpernull_String{field: "\"suppliers\".\"defaultcostcenter\""},
	Defaultpaymenttermid: whereHelpernull_String{field: "\"suppliers\".\"defaultpaymenttermid\""},
	SupplierID:           whereHelpernull_String{field: "\"suppliers\".\"supplier_id\""},
}

// SupplierRels is where relationship names are stored.
var SupplierRels = struct {
}{}

// supplierR is where relationships are stored.
type supplierR struct {
}

// NewStruct creates a new relationship struct
func (*supplierR) NewStruct() *supplierR {
	return &supplierR{}
}

// supplierL is where Load methods for each relationship are stored.
type supplierL struct{}

var (
	supplierAllColumns            = []string{"id", "city", "country_code", "external_id", "name", "secondary_name", "short_name", "status_active", "street", "taxnumber", "url", "zipcode", "defaultapproverid", "defaultcategoryid", "defaultcostcenter", "defaultpaymenttermid", "supplier_id"}
	supplierColumnsWithoutDefault = []string{"id"}
	supplierColumnsWithDefault    = []string{"city", "country_code", "external_id", "name", "secondary_name", "short_name", "status_active", "street", "taxnumber", "url", "zipcode", "defaultapproverid", "defaultcategoryid", "defaultcostcenter", "defaultpaymenttermid", "supplier_id"}
	supplierPrimaryKeyColumns     = []string{"id"}
	supplierGeneratedColumns      = []string{}
)

type (
	// SupplierSlice is an alias for a slice of pointers to Supplier.
	// This should almost always be used instead of []Supplier.
	SupplierSlice []*Supplier
	// SupplierHook is the signature for custom Supplier hook methods
	SupplierHook func(context.Context, boil.ContextExecutor, *Supplier) error

	supplierQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	supplierType                 = reflect.TypeOf(&Supplier{})
	supplierMapping              = queries.MakeStructMapping(supplierType)
	supplierPrimaryKeyMapping, _ = queries.BindMapping(supplierType, supplierMapping, supplierPrimaryKeyColumns)
	supplierInsertCacheMut       sync.RWMutex
	supplierInsertCache          = make(map[string]insertCache)
	supplierUpdateCacheMut       sync.RWMutex
	supplierUpdateCache          = make(map[string]updateCache)
	supplierUpsertCacheMut       sync.RWMutex
	supplierUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var supplierAfterSelectHooks []SupplierHook

var supplierBeforeInsertHooks []SupplierHook
var supplierAfterInsertHooks []SupplierHook

var supplierBeforeUpdateHooks []SupplierHook
var supplierAfterUpdateHooks []SupplierHook

var supplierBeforeDeleteHooks []SupplierHook
var supplierAfterDeleteHooks []SupplierHook

var supplierBeforeUpsertHooks []SupplierHook
var supplierAfterUpsertHooks []SupplierHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Supplier) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Supplier) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Supplier) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Supplier) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Supplier) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Supplier) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Supplier) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Supplier) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Supplier) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSupplierHook registers your hook function for all future operations.
func AddSupplierHook(hookPoint boil.HookPoint, supplierHook SupplierHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		supplierAfterSelectHooks = append(supplierAfterSelectHooks, supplierHook)
	case boil.BeforeInsertHook:
		supplierBeforeInsertHooks = append(supplierBeforeInsertHooks, supplierHook)
	case boil.AfterInsertHook:
		supplierAfterInsertHooks = append(supplierAfterInsertHooks, supplierHook)
	case boil.BeforeUpdateHook:
		supplierBeforeUpdateHooks = append(supplierBeforeUpdateHooks, supplierHook)
	case boil.AfterUpdateHook:
		supplierAfterUpdateHooks = append(supplierAfterUpdateHooks, supplierHook)
	case boil.BeforeDeleteHook:
		supplierBeforeDeleteHooks = append(supplierBeforeDeleteHooks, supplierHook)
	case boil.AfterDeleteHook:
		supplierAfterDeleteHooks = append(supplierAfterDeleteHooks, supplierHook)
	case boil.BeforeUpsertHook:
		supplierBeforeUpsertHooks = append(supplierBeforeUpsertHooks, supplierHook)
	case boil.AfterUpsertHook:
		supplierAfterUpsertHooks = append(supplierAfterUpsertHooks, supplierHook)
	}
}

// One returns a single supplier record from the query.
func (q supplierQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Supplier, error) {
	o := &Supplier{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for suppliers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Supplier records from the query.
func (q supplierQuery) All(ctx context.Context, exec boil.ContextExecutor) (SupplierSlice, error) {
	var o []*Supplier

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Supplier slice")
	}

	if len(supplierAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Supplier records in the query.
func (q supplierQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count suppliers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q supplierQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if suppliers exists")
	}

	return count > 0, nil
}

// Suppliers retrieves all the records using an executor.
func Suppliers(mods ...qm.QueryMod) supplierQuery {
	mods = append(mods, qm.From("\"suppliers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"suppliers\".*"})
	}

	return supplierQuery{q}
}

// FindSupplier retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSupplier(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Supplier, error) {
	supplierObj := &Supplier{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"suppliers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, supplierObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from suppliers")
	}

	if err = supplierObj.doAfterSelectHooks(ctx, exec); err != nil {
		return supplierObj, err
	}

	return supplierObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Supplier) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no suppliers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(supplierColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	supplierInsertCacheMut.RLock()
	cache, cached := supplierInsertCache[key]
	supplierInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			supplierAllColumns,
			supplierColumnsWithDefault,
			supplierColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(supplierType, supplierMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"suppliers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"suppliers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into suppliers")
	}

	if !cached {
		supplierInsertCacheMut.Lock()
		supplierInsertCache[key] = cache
		supplierInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Supplier.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Supplier) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	supplierUpdateCacheMut.RLock()
	cache, cached := supplierUpdateCache[key]
	supplierUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			supplierAllColumns,
			supplierPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update suppliers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"suppliers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, supplierPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, append(wl, supplierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update suppliers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for suppliers")
	}

	if !cached {
		supplierUpdateCacheMut.Lock()
		supplierUpdateCache[key] = cache
		supplierUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q supplierQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for suppliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for suppliers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SupplierSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"suppliers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, supplierPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in supplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all supplier")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Supplier) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no suppliers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(supplierColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	supplierUpsertCacheMut.RLock()
	cache, cached := supplierUpsertCache[key]
	supplierUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			supplierAllColumns,
			supplierColumnsWithDefault,
			supplierColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			supplierAllColumns,
			supplierPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert suppliers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(supplierPrimaryKeyColumns))
			copy(conflict, supplierPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"suppliers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(supplierType, supplierMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert suppliers")
	}

	if !cached {
		supplierUpsertCacheMut.Lock()
		supplierUpsertCache[key] = cache
		supplierUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Supplier record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Supplier) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Supplier provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), supplierPrimaryKeyMapping)
	sql := "DELETE FROM \"suppliers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from suppliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for suppliers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q supplierQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no supplierQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from suppliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for suppliers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SupplierSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(supplierBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"suppliers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, supplierPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from supplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for suppliers")
	}

	if len(supplierAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Supplier) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSupplier(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SupplierSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SupplierSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"suppliers\".* FROM \"suppliers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, supplierPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SupplierSlice")
	}

	*o = slice

	return nil
}

// SupplierExists checks if the Supplier row exists.
func SupplierExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"suppliers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if suppliers exists")
	}

	return exists, nil
}

// Exists checks if the Supplier row exists.
func (o *Supplier) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SupplierExists(ctx, exec, o.ID)
}
