// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testExpenseTaxItems(t *testing.T) {
	t.Parallel()

	query := ExpenseTaxItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testExpenseTaxItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExpenseTaxItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpenseTaxItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ExpenseTaxItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExpenseTaxItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpenseTaxItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExpenseTaxItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExpenseTaxItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpenseTaxItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ExpenseTaxItemExists(ctx, tx, o.ExpenseID, o.RateID)
	if err != nil {
		t.Errorf("Unable to check if ExpenseTaxItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExpenseTaxItemExists to return true, but got false.")
	}
}

func testExpenseTaxItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	expenseTaxItemFound, err := FindExpenseTaxItem(ctx, tx, o.ExpenseID, o.RateID)
	if err != nil {
		t.Error(err)
	}

	if expenseTaxItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testExpenseTaxItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ExpenseTaxItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testExpenseTaxItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ExpenseTaxItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExpenseTaxItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expenseTaxItemOne := &ExpenseTaxItem{}
	expenseTaxItemTwo := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, expenseTaxItemOne, expenseTaxItemDBTypes, false, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}
	if err = randomize.Struct(seed, expenseTaxItemTwo, expenseTaxItemDBTypes, false, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = expenseTaxItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = expenseTaxItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExpenseTaxItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExpenseTaxItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	expenseTaxItemOne := &ExpenseTaxItem{}
	expenseTaxItemTwo := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, expenseTaxItemOne, expenseTaxItemDBTypes, false, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}
	if err = randomize.Struct(seed, expenseTaxItemTwo, expenseTaxItemDBTypes, false, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = expenseTaxItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = expenseTaxItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExpenseTaxItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func expenseTaxItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseTaxItem) error {
	*o = ExpenseTaxItem{}
	return nil
}

func expenseTaxItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseTaxItem) error {
	*o = ExpenseTaxItem{}
	return nil
}

func expenseTaxItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseTaxItem) error {
	*o = ExpenseTaxItem{}
	return nil
}

func expenseTaxItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseTaxItem) error {
	*o = ExpenseTaxItem{}
	return nil
}

func expenseTaxItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseTaxItem) error {
	*o = ExpenseTaxItem{}
	return nil
}

func expenseTaxItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseTaxItem) error {
	*o = ExpenseTaxItem{}
	return nil
}

func expenseTaxItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseTaxItem) error {
	*o = ExpenseTaxItem{}
	return nil
}

func expenseTaxItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseTaxItem) error {
	*o = ExpenseTaxItem{}
	return nil
}

func expenseTaxItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseTaxItem) error {
	*o = ExpenseTaxItem{}
	return nil
}

func testExpenseTaxItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ExpenseTaxItem{}
	o := &ExpenseTaxItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem object: %s", err)
	}

	AddExpenseTaxItemHook(boil.BeforeInsertHook, expenseTaxItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	expenseTaxItemBeforeInsertHooks = []ExpenseTaxItemHook{}

	AddExpenseTaxItemHook(boil.AfterInsertHook, expenseTaxItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	expenseTaxItemAfterInsertHooks = []ExpenseTaxItemHook{}

	AddExpenseTaxItemHook(boil.AfterSelectHook, expenseTaxItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	expenseTaxItemAfterSelectHooks = []ExpenseTaxItemHook{}

	AddExpenseTaxItemHook(boil.BeforeUpdateHook, expenseTaxItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	expenseTaxItemBeforeUpdateHooks = []ExpenseTaxItemHook{}

	AddExpenseTaxItemHook(boil.AfterUpdateHook, expenseTaxItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	expenseTaxItemAfterUpdateHooks = []ExpenseTaxItemHook{}

	AddExpenseTaxItemHook(boil.BeforeDeleteHook, expenseTaxItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	expenseTaxItemBeforeDeleteHooks = []ExpenseTaxItemHook{}

	AddExpenseTaxItemHook(boil.AfterDeleteHook, expenseTaxItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	expenseTaxItemAfterDeleteHooks = []ExpenseTaxItemHook{}

	AddExpenseTaxItemHook(boil.BeforeUpsertHook, expenseTaxItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	expenseTaxItemBeforeUpsertHooks = []ExpenseTaxItemHook{}

	AddExpenseTaxItemHook(boil.AfterUpsertHook, expenseTaxItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	expenseTaxItemAfterUpsertHooks = []ExpenseTaxItemHook{}
}

func testExpenseTaxItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExpenseTaxItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExpenseTaxItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(expenseTaxItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ExpenseTaxItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExpenseTaxItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExpenseTaxItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExpenseTaxItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExpenseTaxItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExpenseTaxItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	expenseTaxItemDBTypes = map[string]string{`ExpenseID`: `text`, `RateID`: `text`, `Gross`: `numeric`, `Tax`: `numeric`}
	_                     = bytes.MinRead
)

func testExpenseTaxItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(expenseTaxItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(expenseTaxItemAllColumns) == len(expenseTaxItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExpenseTaxItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testExpenseTaxItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(expenseTaxItemAllColumns) == len(expenseTaxItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseTaxItem{}
	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExpenseTaxItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, expenseTaxItemDBTypes, true, expenseTaxItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(expenseTaxItemAllColumns, expenseTaxItemPrimaryKeyColumns) {
		fields = expenseTaxItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			expenseTaxItemAllColumns,
			expenseTaxItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ExpenseTaxItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testExpenseTaxItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(expenseTaxItemAllColumns) == len(expenseTaxItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ExpenseTaxItem{}
	if err = randomize.Struct(seed, &o, expenseTaxItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExpenseTaxItem: %s", err)
	}

	count, err := ExpenseTaxItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, expenseTaxItemDBTypes, false, expenseTaxItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExpenseTaxItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExpenseTaxItem: %s", err)
	}

	count, err = ExpenseTaxItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
