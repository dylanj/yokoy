// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Invoice is an object representing the database table.
type Invoice struct {
	ID               string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	LegalEntityID    null.String       `boil:"legal_entity_id" json:"legal_entity_id,omitempty" toml:"legal_entity_id" yaml:"legal_entity_id,omitempty"`
	Country          null.String       `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	Currency         null.String       `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	Duedate          null.Time         `boil:"duedate" json:"duedate,omitempty" toml:"duedate" yaml:"duedate,omitempty"`
	Date             null.Time         `boil:"date" json:"date,omitempty" toml:"date" yaml:"date,omitempty"`
	GrossAmount      null.Int          `boil:"gross_amount" json:"gross_amount,omitempty" toml:"gross_amount" yaml:"gross_amount,omitempty"`
	InvoiceNumber    null.String       `boil:"invoice_number" json:"invoice_number,omitempty" toml:"invoice_number" yaml:"invoice_number,omitempty"`
	IsCreditNode     null.Bool         `boil:"is_credit_node" json:"is_credit_node,omitempty" toml:"is_credit_node" yaml:"is_credit_node,omitempty"`
	NetAmount        null.Int          `boil:"net_amount" json:"net_amount,omitempty" toml:"net_amount" yaml:"net_amount,omitempty"`
	PaymentTermID    null.String       `boil:"payment_term_id" json:"payment_term_id,omitempty" toml:"payment_term_id" yaml:"payment_term_id,omitempty"`
	PostingDate      null.Time         `boil:"posting_date" json:"posting_date,omitempty" toml:"posting_date" yaml:"posting_date,omitempty"`
	PurchaseOrderIds types.StringArray `boil:"purchase_order_ids" json:"purchase_order_ids,omitempty" toml:"purchase_order_ids" yaml:"purchase_order_ids,omitempty"`
	ServiceDate      null.Time         `boil:"service_date" json:"service_date,omitempty" toml:"service_date" yaml:"service_date,omitempty"`
	Status           null.String       `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	Submitters       types.StringArray `boil:"submitters" json:"submitters,omitempty" toml:"submitters" yaml:"submitters,omitempty"`
	SupplierID       null.String       `boil:"supplier_id" json:"supplier_id,omitempty" toml:"supplier_id" yaml:"supplier_id,omitempty"`
	TaxableAmount    null.Int          `boil:"taxable_amount" json:"taxable_amount,omitempty" toml:"taxable_amount" yaml:"taxable_amount,omitempty"`
	BankAccount      null.String       `boil:"bank_account" json:"bank_account,omitempty" toml:"bank_account" yaml:"bank_account,omitempty"`
	BankCountry      null.String       `boil:"bank_country" json:"bank_country,omitempty" toml:"bank_country" yaml:"bank_country,omitempty"`
	BankKey          null.String       `boil:"bank_key" json:"bank_key,omitempty" toml:"bank_key" yaml:"bank_key,omitempty"`
	BankNumber       null.String       `boil:"bank_number" json:"bank_number,omitempty" toml:"bank_number" yaml:"bank_number,omitempty"`
	ExternalID       null.String       `boil:"external_id" json:"external_id,omitempty" toml:"external_id" yaml:"external_id,omitempty"`
	Iban             null.String       `boil:"iban" json:"iban,omitempty" toml:"iban" yaml:"iban,omitempty"`
	SwiftCode        null.String       `boil:"swift_code" json:"swift_code,omitempty" toml:"swift_code" yaml:"swift_code,omitempty"`

	R *invoiceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L invoiceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InvoiceColumns = struct {
	ID               string
	LegalEntityID    string
	Country          string
	Currency         string
	Duedate          string
	Date             string
	GrossAmount      string
	InvoiceNumber    string
	IsCreditNode     string
	NetAmount        string
	PaymentTermID    string
	PostingDate      string
	PurchaseOrderIds string
	ServiceDate      string
	Status           string
	Submitters       string
	SupplierID       string
	TaxableAmount    string
	BankAccount      string
	BankCountry      string
	BankKey          string
	BankNumber       string
	ExternalID       string
	Iban             string
	SwiftCode        string
}{
	ID:               "id",
	LegalEntityID:    "legal_entity_id",
	Country:          "country",
	Currency:         "currency",
	Duedate:          "duedate",
	Date:             "date",
	GrossAmount:      "gross_amount",
	InvoiceNumber:    "invoice_number",
	IsCreditNode:     "is_credit_node",
	NetAmount:        "net_amount",
	PaymentTermID:    "payment_term_id",
	PostingDate:      "posting_date",
	PurchaseOrderIds: "purchase_order_ids",
	ServiceDate:      "service_date",
	Status:           "status",
	Submitters:       "submitters",
	SupplierID:       "supplier_id",
	TaxableAmount:    "taxable_amount",
	BankAccount:      "bank_account",
	BankCountry:      "bank_country",
	BankKey:          "bank_key",
	BankNumber:       "bank_number",
	ExternalID:       "external_id",
	Iban:             "iban",
	SwiftCode:        "swift_code",
}

var InvoiceTableColumns = struct {
	ID               string
	LegalEntityID    string
	Country          string
	Currency         string
	Duedate          string
	Date             string
	GrossAmount      string
	InvoiceNumber    string
	IsCreditNode     string
	NetAmount        string
	PaymentTermID    string
	PostingDate      string
	PurchaseOrderIds string
	ServiceDate      string
	Status           string
	Submitters       string
	SupplierID       string
	TaxableAmount    string
	BankAccount      string
	BankCountry      string
	BankKey          string
	BankNumber       string
	ExternalID       string
	Iban             string
	SwiftCode        string
}{
	ID:               "invoices.id",
	LegalEntityID:    "invoices.legal_entity_id",
	Country:          "invoices.country",
	Currency:         "invoices.currency",
	Duedate:          "invoices.duedate",
	Date:             "invoices.date",
	GrossAmount:      "invoices.gross_amount",
	InvoiceNumber:    "invoices.invoice_number",
	IsCreditNode:     "invoices.is_credit_node",
	NetAmount:        "invoices.net_amount",
	PaymentTermID:    "invoices.payment_term_id",
	PostingDate:      "invoices.posting_date",
	PurchaseOrderIds: "invoices.purchase_order_ids",
	ServiceDate:      "invoices.service_date",
	Status:           "invoices.status",
	Submitters:       "invoices.submitters",
	SupplierID:       "invoices.supplier_id",
	TaxableAmount:    "invoices.taxable_amount",
	BankAccount:      "invoices.bank_account",
	BankCountry:      "invoices.bank_country",
	BankKey:          "invoices.bank_key",
	BankNumber:       "invoices.bank_number",
	ExternalID:       "invoices.external_id",
	Iban:             "invoices.iban",
	SwiftCode:        "invoices.swift_code",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var InvoiceWhere = struct {
	ID               whereHelperstring
	LegalEntityID    whereHelpernull_String
	Country          whereHelpernull_String
	Currency         whereHelpernull_String
	Duedate          whereHelpernull_Time
	Date             whereHelpernull_Time
	GrossAmount      whereHelpernull_Int
	InvoiceNumber    whereHelpernull_String
	IsCreditNode     whereHelpernull_Bool
	NetAmount        whereHelpernull_Int
	PaymentTermID    whereHelpernull_String
	PostingDate      whereHelpernull_Time
	PurchaseOrderIds whereHelpertypes_StringArray
	ServiceDate      whereHelpernull_Time
	Status           whereHelpernull_String
	Submitters       whereHelpertypes_StringArray
	SupplierID       whereHelpernull_String
	TaxableAmount    whereHelpernull_Int
	BankAccount      whereHelpernull_String
	BankCountry      whereHelpernull_String
	BankKey          whereHelpernull_String
	BankNumber       whereHelpernull_String
	ExternalID       whereHelpernull_String
	Iban             whereHelpernull_String
	SwiftCode        whereHelpernull_String
}{
	ID:               whereHelperstring{field: "\"invoices\".\"id\""},
	LegalEntityID:    whereHelpernull_String{field: "\"invoices\".\"legal_entity_id\""},
	Country:          whereHelpernull_String{field: "\"invoices\".\"country\""},
	Currency:         whereHelpernull_String{field: "\"invoices\".\"currency\""},
	Duedate:          whereHelpernull_Time{field: "\"invoices\".\"duedate\""},
	Date:             whereHelpernull_Time{field: "\"invoices\".\"date\""},
	GrossAmount:      whereHelpernull_Int{field: "\"invoices\".\"gross_amount\""},
	InvoiceNumber:    whereHelpernull_String{field: "\"invoices\".\"invoice_number\""},
	IsCreditNode:     whereHelpernull_Bool{field: "\"invoices\".\"is_credit_node\""},
	NetAmount:        whereHelpernull_Int{field: "\"invoices\".\"net_amount\""},
	PaymentTermID:    whereHelpernull_String{field: "\"invoices\".\"payment_term_id\""},
	PostingDate:      whereHelpernull_Time{field: "\"invoices\".\"posting_date\""},
	PurchaseOrderIds: whereHelpertypes_StringArray{field: "\"invoices\".\"purchase_order_ids\""},
	ServiceDate:      whereHelpernull_Time{field: "\"invoices\".\"service_date\""},
	Status:           whereHelpernull_String{field: "\"invoices\".\"status\""},
	Submitters:       whereHelpertypes_StringArray{field: "\"invoices\".\"submitters\""},
	SupplierID:       whereHelpernull_String{field: "\"invoices\".\"supplier_id\""},
	TaxableAmount:    whereHelpernull_Int{field: "\"invoices\".\"taxable_amount\""},
	BankAccount:      whereHelpernull_String{field: "\"invoices\".\"bank_account\""},
	BankCountry:      whereHelpernull_String{field: "\"invoices\".\"bank_country\""},
	BankKey:          whereHelpernull_String{field: "\"invoices\".\"bank_key\""},
	BankNumber:       whereHelpernull_String{field: "\"invoices\".\"bank_number\""},
	ExternalID:       whereHelpernull_String{field: "\"invoices\".\"external_id\""},
	Iban:             whereHelpernull_String{field: "\"invoices\".\"iban\""},
	SwiftCode:        whereHelpernull_String{field: "\"invoices\".\"swift_code\""},
}

// InvoiceRels is where relationship names are stored.
var InvoiceRels = struct {
}{}

// invoiceR is where relationships are stored.
type invoiceR struct {
}

// NewStruct creates a new relationship struct
func (*invoiceR) NewStruct() *invoiceR {
	return &invoiceR{}
}

// invoiceL is where Load methods for each relationship are stored.
type invoiceL struct{}

var (
	invoiceAllColumns            = []string{"id", "legal_entity_id", "country", "currency", "duedate", "date", "gross_amount", "invoice_number", "is_credit_node", "net_amount", "payment_term_id", "posting_date", "purchase_order_ids", "service_date", "status", "submitters", "supplier_id", "taxable_amount", "bank_account", "bank_country", "bank_key", "bank_number", "external_id", "iban", "swift_code"}
	invoiceColumnsWithoutDefault = []string{"id"}
	invoiceColumnsWithDefault    = []string{"legal_entity_id", "country", "currency", "duedate", "date", "gross_amount", "invoice_number", "is_credit_node", "net_amount", "payment_term_id", "posting_date", "purchase_order_ids", "service_date", "status", "submitters", "supplier_id", "taxable_amount", "bank_account", "bank_country", "bank_key", "bank_number", "external_id", "iban", "swift_code"}
	invoicePrimaryKeyColumns     = []string{"id"}
	invoiceGeneratedColumns      = []string{}
)

type (
	// InvoiceSlice is an alias for a slice of pointers to Invoice.
	// This should almost always be used instead of []Invoice.
	InvoiceSlice []*Invoice
	// InvoiceHook is the signature for custom Invoice hook methods
	InvoiceHook func(context.Context, boil.ContextExecutor, *Invoice) error

	invoiceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	invoiceType                 = reflect.TypeOf(&Invoice{})
	invoiceMapping              = queries.MakeStructMapping(invoiceType)
	invoicePrimaryKeyMapping, _ = queries.BindMapping(invoiceType, invoiceMapping, invoicePrimaryKeyColumns)
	invoiceInsertCacheMut       sync.RWMutex
	invoiceInsertCache          = make(map[string]insertCache)
	invoiceUpdateCacheMut       sync.RWMutex
	invoiceUpdateCache          = make(map[string]updateCache)
	invoiceUpsertCacheMut       sync.RWMutex
	invoiceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var invoiceAfterSelectHooks []InvoiceHook

var invoiceBeforeInsertHooks []InvoiceHook
var invoiceAfterInsertHooks []InvoiceHook

var invoiceBeforeUpdateHooks []InvoiceHook
var invoiceAfterUpdateHooks []InvoiceHook

var invoiceBeforeDeleteHooks []InvoiceHook
var invoiceAfterDeleteHooks []InvoiceHook

var invoiceBeforeUpsertHooks []InvoiceHook
var invoiceAfterUpsertHooks []InvoiceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Invoice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Invoice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Invoice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Invoice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Invoice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Invoice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Invoice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Invoice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Invoice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInvoiceHook registers your hook function for all future operations.
func AddInvoiceHook(hookPoint boil.HookPoint, invoiceHook InvoiceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		invoiceAfterSelectHooks = append(invoiceAfterSelectHooks, invoiceHook)
	case boil.BeforeInsertHook:
		invoiceBeforeInsertHooks = append(invoiceBeforeInsertHooks, invoiceHook)
	case boil.AfterInsertHook:
		invoiceAfterInsertHooks = append(invoiceAfterInsertHooks, invoiceHook)
	case boil.BeforeUpdateHook:
		invoiceBeforeUpdateHooks = append(invoiceBeforeUpdateHooks, invoiceHook)
	case boil.AfterUpdateHook:
		invoiceAfterUpdateHooks = append(invoiceAfterUpdateHooks, invoiceHook)
	case boil.BeforeDeleteHook:
		invoiceBeforeDeleteHooks = append(invoiceBeforeDeleteHooks, invoiceHook)
	case boil.AfterDeleteHook:
		invoiceAfterDeleteHooks = append(invoiceAfterDeleteHooks, invoiceHook)
	case boil.BeforeUpsertHook:
		invoiceBeforeUpsertHooks = append(invoiceBeforeUpsertHooks, invoiceHook)
	case boil.AfterUpsertHook:
		invoiceAfterUpsertHooks = append(invoiceAfterUpsertHooks, invoiceHook)
	}
}

// One returns a single invoice record from the query.
func (q invoiceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Invoice, error) {
	o := &Invoice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for invoices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Invoice records from the query.
func (q invoiceQuery) All(ctx context.Context, exec boil.ContextExecutor) (InvoiceSlice, error) {
	var o []*Invoice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Invoice slice")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Invoice records in the query.
func (q invoiceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count invoices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q invoiceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if invoices exists")
	}

	return count > 0, nil
}

// Invoices retrieves all the records using an executor.
func Invoices(mods ...qm.QueryMod) invoiceQuery {
	mods = append(mods, qm.From("\"invoices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoices\".*"})
	}

	return invoiceQuery{q}
}

// FindInvoice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInvoice(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Invoice, error) {
	invoiceObj := &Invoice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoices\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, invoiceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from invoices")
	}

	if err = invoiceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return invoiceObj, err
	}

	return invoiceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Invoice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invoices provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	invoiceInsertCacheMut.RLock()
	cache, cached := invoiceInsertCache[key]
	invoiceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			invoiceAllColumns,
			invoiceColumnsWithDefault,
			invoiceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(invoiceType, invoiceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into invoices")
	}

	if !cached {
		invoiceInsertCacheMut.Lock()
		invoiceInsertCache[key] = cache
		invoiceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Invoice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Invoice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	invoiceUpdateCacheMut.RLock()
	cache, cached := invoiceUpdateCache[key]
	invoiceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			invoiceAllColumns,
			invoicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update invoices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, invoicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, append(wl, invoicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update invoices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for invoices")
	}

	if !cached {
		invoiceUpdateCacheMut.Lock()
		invoiceUpdateCache[key] = cache
		invoiceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q invoiceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for invoices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for invoices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InvoiceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, invoicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in invoice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all invoice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Invoice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invoices provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	invoiceUpsertCacheMut.RLock()
	cache, cached := invoiceUpsertCache[key]
	invoiceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			invoiceAllColumns,
			invoiceColumnsWithDefault,
			invoiceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			invoiceAllColumns,
			invoicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert invoices, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(invoicePrimaryKeyColumns))
			copy(conflict, invoicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoices\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(invoiceType, invoiceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert invoices")
	}

	if !cached {
		invoiceUpsertCacheMut.Lock()
		invoiceUpsertCache[key] = cache
		invoiceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Invoice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Invoice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Invoice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), invoicePrimaryKeyMapping)
	sql := "DELETE FROM \"invoices\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from invoices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for invoices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q invoiceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no invoiceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InvoiceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(invoiceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoices")
	}

	if len(invoiceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Invoice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInvoice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InvoiceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InvoiceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoices\".* FROM \"invoices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InvoiceSlice")
	}

	*o = slice

	return nil
}

// InvoiceExists checks if the Invoice row exists.
func InvoiceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoices\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if invoices exists")
	}

	return exists, nil
}

// Exists checks if the Invoice row exists.
func (o *Invoice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InvoiceExists(ctx, exec, o.ID)
}
