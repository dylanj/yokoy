// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testExpenseEventLogs(t *testing.T) {
	t.Parallel()

	query := ExpenseEventLogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testExpenseEventLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExpenseEventLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpenseEventLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ExpenseEventLogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExpenseEventLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpenseEventLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExpenseEventLogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExpenseEventLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpenseEventLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ExpenseEventLogExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ExpenseEventLog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExpenseEventLogExists to return true, but got false.")
	}
}

func testExpenseEventLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	expenseEventLogFound, err := FindExpenseEventLog(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if expenseEventLogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testExpenseEventLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ExpenseEventLogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testExpenseEventLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ExpenseEventLogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExpenseEventLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expenseEventLogOne := &ExpenseEventLog{}
	expenseEventLogTwo := &ExpenseEventLog{}
	if err = randomize.Struct(seed, expenseEventLogOne, expenseEventLogDBTypes, false, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}
	if err = randomize.Struct(seed, expenseEventLogTwo, expenseEventLogDBTypes, false, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = expenseEventLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = expenseEventLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExpenseEventLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExpenseEventLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	expenseEventLogOne := &ExpenseEventLog{}
	expenseEventLogTwo := &ExpenseEventLog{}
	if err = randomize.Struct(seed, expenseEventLogOne, expenseEventLogDBTypes, false, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}
	if err = randomize.Struct(seed, expenseEventLogTwo, expenseEventLogDBTypes, false, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = expenseEventLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = expenseEventLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExpenseEventLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func expenseEventLogBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseEventLog) error {
	*o = ExpenseEventLog{}
	return nil
}

func expenseEventLogAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseEventLog) error {
	*o = ExpenseEventLog{}
	return nil
}

func expenseEventLogAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseEventLog) error {
	*o = ExpenseEventLog{}
	return nil
}

func expenseEventLogBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseEventLog) error {
	*o = ExpenseEventLog{}
	return nil
}

func expenseEventLogAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseEventLog) error {
	*o = ExpenseEventLog{}
	return nil
}

func expenseEventLogBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseEventLog) error {
	*o = ExpenseEventLog{}
	return nil
}

func expenseEventLogAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseEventLog) error {
	*o = ExpenseEventLog{}
	return nil
}

func expenseEventLogBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseEventLog) error {
	*o = ExpenseEventLog{}
	return nil
}

func expenseEventLogAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExpenseEventLog) error {
	*o = ExpenseEventLog{}
	return nil
}

func testExpenseEventLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ExpenseEventLog{}
	o := &ExpenseEventLog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog object: %s", err)
	}

	AddExpenseEventLogHook(boil.BeforeInsertHook, expenseEventLogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	expenseEventLogBeforeInsertHooks = []ExpenseEventLogHook{}

	AddExpenseEventLogHook(boil.AfterInsertHook, expenseEventLogAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	expenseEventLogAfterInsertHooks = []ExpenseEventLogHook{}

	AddExpenseEventLogHook(boil.AfterSelectHook, expenseEventLogAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	expenseEventLogAfterSelectHooks = []ExpenseEventLogHook{}

	AddExpenseEventLogHook(boil.BeforeUpdateHook, expenseEventLogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	expenseEventLogBeforeUpdateHooks = []ExpenseEventLogHook{}

	AddExpenseEventLogHook(boil.AfterUpdateHook, expenseEventLogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	expenseEventLogAfterUpdateHooks = []ExpenseEventLogHook{}

	AddExpenseEventLogHook(boil.BeforeDeleteHook, expenseEventLogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	expenseEventLogBeforeDeleteHooks = []ExpenseEventLogHook{}

	AddExpenseEventLogHook(boil.AfterDeleteHook, expenseEventLogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	expenseEventLogAfterDeleteHooks = []ExpenseEventLogHook{}

	AddExpenseEventLogHook(boil.BeforeUpsertHook, expenseEventLogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	expenseEventLogBeforeUpsertHooks = []ExpenseEventLogHook{}

	AddExpenseEventLogHook(boil.AfterUpsertHook, expenseEventLogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	expenseEventLogAfterUpsertHooks = []ExpenseEventLogHook{}
}

func testExpenseEventLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExpenseEventLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExpenseEventLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(expenseEventLogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ExpenseEventLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExpenseEventLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExpenseEventLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExpenseEventLogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExpenseEventLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExpenseEventLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	expenseEventLogDBTypes = map[string]string{`ID`: `integer`, `ExpenseID`: `text`, `ActionType`: `text`, `Comment`: `text`, `Name`: `text`, `Timestamp`: `timestamp without time zone`, `UserID`: `text`}
	_                      = bytes.MinRead
)

func testExpenseEventLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(expenseEventLogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(expenseEventLogAllColumns) == len(expenseEventLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExpenseEventLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testExpenseEventLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(expenseEventLogAllColumns) == len(expenseEventLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExpenseEventLog{}
	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExpenseEventLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, expenseEventLogDBTypes, true, expenseEventLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(expenseEventLogAllColumns, expenseEventLogPrimaryKeyColumns) {
		fields = expenseEventLogAllColumns
	} else {
		fields = strmangle.SetComplement(
			expenseEventLogAllColumns,
			expenseEventLogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ExpenseEventLogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testExpenseEventLogsUpsert(t *testing.T) {
	t.Parallel()

	if len(expenseEventLogAllColumns) == len(expenseEventLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ExpenseEventLog{}
	if err = randomize.Struct(seed, &o, expenseEventLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExpenseEventLog: %s", err)
	}

	count, err := ExpenseEventLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, expenseEventLogDBTypes, false, expenseEventLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExpenseEventLog struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExpenseEventLog: %s", err)
	}

	count, err = ExpenseEventLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
