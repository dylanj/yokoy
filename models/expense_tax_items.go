// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ExpenseTaxItem is an object representing the database table.
type ExpenseTaxItem struct {
	ExpenseID string            `boil:"expense_id" json:"expense_id" toml:"expense_id" yaml:"expense_id"`
	RateID    string            `boil:"rate_id" json:"rate_id" toml:"rate_id" yaml:"rate_id"`
	Gross     types.NullDecimal `boil:"gross" json:"gross,omitempty" toml:"gross" yaml:"gross,omitempty"`
	Tax       types.NullDecimal `boil:"tax" json:"tax,omitempty" toml:"tax" yaml:"tax,omitempty"`

	R *expenseTaxItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L expenseTaxItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExpenseTaxItemColumns = struct {
	ExpenseID string
	RateID    string
	Gross     string
	Tax       string
}{
	ExpenseID: "expense_id",
	RateID:    "rate_id",
	Gross:     "gross",
	Tax:       "tax",
}

var ExpenseTaxItemTableColumns = struct {
	ExpenseID string
	RateID    string
	Gross     string
	Tax       string
}{
	ExpenseID: "expense_tax_items.expense_id",
	RateID:    "expense_tax_items.rate_id",
	Gross:     "expense_tax_items.gross",
	Tax:       "expense_tax_items.tax",
}

// Generated where

var ExpenseTaxItemWhere = struct {
	ExpenseID whereHelperstring
	RateID    whereHelperstring
	Gross     whereHelpertypes_NullDecimal
	Tax       whereHelpertypes_NullDecimal
}{
	ExpenseID: whereHelperstring{field: "\"expense_tax_items\".\"expense_id\""},
	RateID:    whereHelperstring{field: "\"expense_tax_items\".\"rate_id\""},
	Gross:     whereHelpertypes_NullDecimal{field: "\"expense_tax_items\".\"gross\""},
	Tax:       whereHelpertypes_NullDecimal{field: "\"expense_tax_items\".\"tax\""},
}

// ExpenseTaxItemRels is where relationship names are stored.
var ExpenseTaxItemRels = struct {
}{}

// expenseTaxItemR is where relationships are stored.
type expenseTaxItemR struct {
}

// NewStruct creates a new relationship struct
func (*expenseTaxItemR) NewStruct() *expenseTaxItemR {
	return &expenseTaxItemR{}
}

// expenseTaxItemL is where Load methods for each relationship are stored.
type expenseTaxItemL struct{}

var (
	expenseTaxItemAllColumns            = []string{"expense_id", "rate_id", "gross", "tax"}
	expenseTaxItemColumnsWithoutDefault = []string{"expense_id", "rate_id"}
	expenseTaxItemColumnsWithDefault    = []string{"gross", "tax"}
	expenseTaxItemPrimaryKeyColumns     = []string{"expense_id", "rate_id"}
	expenseTaxItemGeneratedColumns      = []string{}
)

type (
	// ExpenseTaxItemSlice is an alias for a slice of pointers to ExpenseTaxItem.
	// This should almost always be used instead of []ExpenseTaxItem.
	ExpenseTaxItemSlice []*ExpenseTaxItem
	// ExpenseTaxItemHook is the signature for custom ExpenseTaxItem hook methods
	ExpenseTaxItemHook func(context.Context, boil.ContextExecutor, *ExpenseTaxItem) error

	expenseTaxItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	expenseTaxItemType                 = reflect.TypeOf(&ExpenseTaxItem{})
	expenseTaxItemMapping              = queries.MakeStructMapping(expenseTaxItemType)
	expenseTaxItemPrimaryKeyMapping, _ = queries.BindMapping(expenseTaxItemType, expenseTaxItemMapping, expenseTaxItemPrimaryKeyColumns)
	expenseTaxItemInsertCacheMut       sync.RWMutex
	expenseTaxItemInsertCache          = make(map[string]insertCache)
	expenseTaxItemUpdateCacheMut       sync.RWMutex
	expenseTaxItemUpdateCache          = make(map[string]updateCache)
	expenseTaxItemUpsertCacheMut       sync.RWMutex
	expenseTaxItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var expenseTaxItemAfterSelectMu sync.Mutex
var expenseTaxItemAfterSelectHooks []ExpenseTaxItemHook

var expenseTaxItemBeforeInsertMu sync.Mutex
var expenseTaxItemBeforeInsertHooks []ExpenseTaxItemHook
var expenseTaxItemAfterInsertMu sync.Mutex
var expenseTaxItemAfterInsertHooks []ExpenseTaxItemHook

var expenseTaxItemBeforeUpdateMu sync.Mutex
var expenseTaxItemBeforeUpdateHooks []ExpenseTaxItemHook
var expenseTaxItemAfterUpdateMu sync.Mutex
var expenseTaxItemAfterUpdateHooks []ExpenseTaxItemHook

var expenseTaxItemBeforeDeleteMu sync.Mutex
var expenseTaxItemBeforeDeleteHooks []ExpenseTaxItemHook
var expenseTaxItemAfterDeleteMu sync.Mutex
var expenseTaxItemAfterDeleteHooks []ExpenseTaxItemHook

var expenseTaxItemBeforeUpsertMu sync.Mutex
var expenseTaxItemBeforeUpsertHooks []ExpenseTaxItemHook
var expenseTaxItemAfterUpsertMu sync.Mutex
var expenseTaxItemAfterUpsertHooks []ExpenseTaxItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExpenseTaxItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseTaxItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExpenseTaxItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseTaxItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExpenseTaxItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseTaxItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExpenseTaxItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseTaxItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExpenseTaxItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseTaxItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExpenseTaxItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseTaxItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExpenseTaxItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseTaxItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExpenseTaxItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseTaxItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExpenseTaxItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range expenseTaxItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExpenseTaxItemHook registers your hook function for all future operations.
func AddExpenseTaxItemHook(hookPoint boil.HookPoint, expenseTaxItemHook ExpenseTaxItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		expenseTaxItemAfterSelectMu.Lock()
		expenseTaxItemAfterSelectHooks = append(expenseTaxItemAfterSelectHooks, expenseTaxItemHook)
		expenseTaxItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		expenseTaxItemBeforeInsertMu.Lock()
		expenseTaxItemBeforeInsertHooks = append(expenseTaxItemBeforeInsertHooks, expenseTaxItemHook)
		expenseTaxItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		expenseTaxItemAfterInsertMu.Lock()
		expenseTaxItemAfterInsertHooks = append(expenseTaxItemAfterInsertHooks, expenseTaxItemHook)
		expenseTaxItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		expenseTaxItemBeforeUpdateMu.Lock()
		expenseTaxItemBeforeUpdateHooks = append(expenseTaxItemBeforeUpdateHooks, expenseTaxItemHook)
		expenseTaxItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		expenseTaxItemAfterUpdateMu.Lock()
		expenseTaxItemAfterUpdateHooks = append(expenseTaxItemAfterUpdateHooks, expenseTaxItemHook)
		expenseTaxItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		expenseTaxItemBeforeDeleteMu.Lock()
		expenseTaxItemBeforeDeleteHooks = append(expenseTaxItemBeforeDeleteHooks, expenseTaxItemHook)
		expenseTaxItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		expenseTaxItemAfterDeleteMu.Lock()
		expenseTaxItemAfterDeleteHooks = append(expenseTaxItemAfterDeleteHooks, expenseTaxItemHook)
		expenseTaxItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		expenseTaxItemBeforeUpsertMu.Lock()
		expenseTaxItemBeforeUpsertHooks = append(expenseTaxItemBeforeUpsertHooks, expenseTaxItemHook)
		expenseTaxItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		expenseTaxItemAfterUpsertMu.Lock()
		expenseTaxItemAfterUpsertHooks = append(expenseTaxItemAfterUpsertHooks, expenseTaxItemHook)
		expenseTaxItemAfterUpsertMu.Unlock()
	}
}

// One returns a single expenseTaxItem record from the query.
func (q expenseTaxItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExpenseTaxItem, error) {
	o := &ExpenseTaxItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for expense_tax_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExpenseTaxItem records from the query.
func (q expenseTaxItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExpenseTaxItemSlice, error) {
	var o []*ExpenseTaxItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExpenseTaxItem slice")
	}

	if len(expenseTaxItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExpenseTaxItem records in the query.
func (q expenseTaxItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count expense_tax_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q expenseTaxItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if expense_tax_items exists")
	}

	return count > 0, nil
}

// ExpenseTaxItems retrieves all the records using an executor.
func ExpenseTaxItems(mods ...qm.QueryMod) expenseTaxItemQuery {
	mods = append(mods, qm.From("\"expense_tax_items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"expense_tax_items\".*"})
	}

	return expenseTaxItemQuery{q}
}

// FindExpenseTaxItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExpenseTaxItem(ctx context.Context, exec boil.ContextExecutor, expenseID string, rateID string, selectCols ...string) (*ExpenseTaxItem, error) {
	expenseTaxItemObj := &ExpenseTaxItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"expense_tax_items\" where \"expense_id\"=$1 AND \"rate_id\"=$2", sel,
	)

	q := queries.Raw(query, expenseID, rateID)

	err := q.Bind(ctx, exec, expenseTaxItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from expense_tax_items")
	}

	if err = expenseTaxItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return expenseTaxItemObj, err
	}

	return expenseTaxItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExpenseTaxItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no expense_tax_items provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(expenseTaxItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	expenseTaxItemInsertCacheMut.RLock()
	cache, cached := expenseTaxItemInsertCache[key]
	expenseTaxItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			expenseTaxItemAllColumns,
			expenseTaxItemColumnsWithDefault,
			expenseTaxItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(expenseTaxItemType, expenseTaxItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(expenseTaxItemType, expenseTaxItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"expense_tax_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"expense_tax_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into expense_tax_items")
	}

	if !cached {
		expenseTaxItemInsertCacheMut.Lock()
		expenseTaxItemInsertCache[key] = cache
		expenseTaxItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExpenseTaxItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExpenseTaxItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	expenseTaxItemUpdateCacheMut.RLock()
	cache, cached := expenseTaxItemUpdateCache[key]
	expenseTaxItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			expenseTaxItemAllColumns,
			expenseTaxItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update expense_tax_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"expense_tax_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, expenseTaxItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(expenseTaxItemType, expenseTaxItemMapping, append(wl, expenseTaxItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update expense_tax_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for expense_tax_items")
	}

	if !cached {
		expenseTaxItemUpdateCacheMut.Lock()
		expenseTaxItemUpdateCache[key] = cache
		expenseTaxItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q expenseTaxItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for expense_tax_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for expense_tax_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExpenseTaxItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), expenseTaxItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"expense_tax_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, expenseTaxItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in expenseTaxItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all expenseTaxItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExpenseTaxItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no expense_tax_items provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(expenseTaxItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	expenseTaxItemUpsertCacheMut.RLock()
	cache, cached := expenseTaxItemUpsertCache[key]
	expenseTaxItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			expenseTaxItemAllColumns,
			expenseTaxItemColumnsWithDefault,
			expenseTaxItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			expenseTaxItemAllColumns,
			expenseTaxItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert expense_tax_items, could not build update column list")
		}

		ret := strmangle.SetComplement(expenseTaxItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(expenseTaxItemPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert expense_tax_items, could not build conflict column list")
			}

			conflict = make([]string, len(expenseTaxItemPrimaryKeyColumns))
			copy(conflict, expenseTaxItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"expense_tax_items\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(expenseTaxItemType, expenseTaxItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(expenseTaxItemType, expenseTaxItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert expense_tax_items")
	}

	if !cached {
		expenseTaxItemUpsertCacheMut.Lock()
		expenseTaxItemUpsertCache[key] = cache
		expenseTaxItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ExpenseTaxItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExpenseTaxItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExpenseTaxItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), expenseTaxItemPrimaryKeyMapping)
	sql := "DELETE FROM \"expense_tax_items\" WHERE \"expense_id\"=$1 AND \"rate_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from expense_tax_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for expense_tax_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q expenseTaxItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no expenseTaxItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from expense_tax_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for expense_tax_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExpenseTaxItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(expenseTaxItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), expenseTaxItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"expense_tax_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, expenseTaxItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from expenseTaxItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for expense_tax_items")
	}

	if len(expenseTaxItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExpenseTaxItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExpenseTaxItem(ctx, exec, o.ExpenseID, o.RateID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExpenseTaxItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExpenseTaxItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), expenseTaxItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"expense_tax_items\".* FROM \"expense_tax_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, expenseTaxItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExpenseTaxItemSlice")
	}

	*o = slice

	return nil
}

// ExpenseTaxItemExists checks if the ExpenseTaxItem row exists.
func ExpenseTaxItemExists(ctx context.Context, exec boil.ContextExecutor, expenseID string, rateID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"expense_tax_items\" where \"expense_id\"=$1 AND \"rate_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, expenseID, rateID)
	}
	row := exec.QueryRowContext(ctx, sql, expenseID, rateID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if expense_tax_items exists")
	}

	return exists, nil
}

// Exists checks if the ExpenseTaxItem row exists.
func (o *ExpenseTaxItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ExpenseTaxItemExists(ctx, exec, o.ExpenseID, o.RateID)
}
