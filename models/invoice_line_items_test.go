// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInvoiceLineItems(t *testing.T) {
	t.Parallel()

	query := InvoiceLineItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInvoiceLineItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceLineItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceLineItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InvoiceLineItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceLineItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceLineItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvoiceLineItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceLineItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceLineItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InvoiceLineItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if InvoiceLineItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InvoiceLineItemExists to return true, but got false.")
	}
}

func testInvoiceLineItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	invoiceLineItemFound, err := FindInvoiceLineItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if invoiceLineItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInvoiceLineItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InvoiceLineItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInvoiceLineItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InvoiceLineItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInvoiceLineItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoiceLineItemOne := &InvoiceLineItem{}
	invoiceLineItemTwo := &InvoiceLineItem{}
	if err = randomize.Struct(seed, invoiceLineItemOne, invoiceLineItemDBTypes, false, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceLineItemTwo, invoiceLineItemDBTypes, false, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invoiceLineItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invoiceLineItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InvoiceLineItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInvoiceLineItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	invoiceLineItemOne := &InvoiceLineItem{}
	invoiceLineItemTwo := &InvoiceLineItem{}
	if err = randomize.Struct(seed, invoiceLineItemOne, invoiceLineItemDBTypes, false, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceLineItemTwo, invoiceLineItemDBTypes, false, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invoiceLineItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invoiceLineItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceLineItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func invoiceLineItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceLineItem) error {
	*o = InvoiceLineItem{}
	return nil
}

func invoiceLineItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceLineItem) error {
	*o = InvoiceLineItem{}
	return nil
}

func invoiceLineItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceLineItem) error {
	*o = InvoiceLineItem{}
	return nil
}

func invoiceLineItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceLineItem) error {
	*o = InvoiceLineItem{}
	return nil
}

func invoiceLineItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceLineItem) error {
	*o = InvoiceLineItem{}
	return nil
}

func invoiceLineItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceLineItem) error {
	*o = InvoiceLineItem{}
	return nil
}

func invoiceLineItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceLineItem) error {
	*o = InvoiceLineItem{}
	return nil
}

func invoiceLineItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceLineItem) error {
	*o = InvoiceLineItem{}
	return nil
}

func invoiceLineItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceLineItem) error {
	*o = InvoiceLineItem{}
	return nil
}

func testInvoiceLineItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InvoiceLineItem{}
	o := &InvoiceLineItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem object: %s", err)
	}

	AddInvoiceLineItemHook(boil.BeforeInsertHook, invoiceLineItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	invoiceLineItemBeforeInsertHooks = []InvoiceLineItemHook{}

	AddInvoiceLineItemHook(boil.AfterInsertHook, invoiceLineItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	invoiceLineItemAfterInsertHooks = []InvoiceLineItemHook{}

	AddInvoiceLineItemHook(boil.AfterSelectHook, invoiceLineItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	invoiceLineItemAfterSelectHooks = []InvoiceLineItemHook{}

	AddInvoiceLineItemHook(boil.BeforeUpdateHook, invoiceLineItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceLineItemBeforeUpdateHooks = []InvoiceLineItemHook{}

	AddInvoiceLineItemHook(boil.AfterUpdateHook, invoiceLineItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceLineItemAfterUpdateHooks = []InvoiceLineItemHook{}

	AddInvoiceLineItemHook(boil.BeforeDeleteHook, invoiceLineItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceLineItemBeforeDeleteHooks = []InvoiceLineItemHook{}

	AddInvoiceLineItemHook(boil.AfterDeleteHook, invoiceLineItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceLineItemAfterDeleteHooks = []InvoiceLineItemHook{}

	AddInvoiceLineItemHook(boil.BeforeUpsertHook, invoiceLineItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceLineItemBeforeUpsertHooks = []InvoiceLineItemHook{}

	AddInvoiceLineItemHook(boil.AfterUpsertHook, invoiceLineItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceLineItemAfterUpsertHooks = []InvoiceLineItemHook{}
}

func testInvoiceLineItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceLineItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoiceLineItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(invoiceLineItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := InvoiceLineItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoiceLineItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvoiceLineItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvoiceLineItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvoiceLineItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InvoiceLineItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	invoiceLineItemDBTypes = map[string]string{`ID`: `integer`, `InvoiceID`: `text`, `CategoryID`: `text`, `CostObjectID`: `text`, `Description`: `text`, `Gross`: `numeric`, `ItemPrice`: `numeric`, `Net`: `numeric`, `PurchaseOrderID`: `text`, `PurchaseOrderItemID`: `text`, `Quantity`: `numeric`, `Tags`: `text`, `TaxRateID`: `text`, `Unit`: `text`}
	_                      = bytes.MinRead
)

func testInvoiceLineItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(invoiceLineItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(invoiceLineItemAllColumns) == len(invoiceLineItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceLineItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInvoiceLineItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(invoiceLineItemAllColumns) == len(invoiceLineItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceLineItem{}
	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceLineItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invoiceLineItemDBTypes, true, invoiceLineItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(invoiceLineItemAllColumns, invoiceLineItemPrimaryKeyColumns) {
		fields = invoiceLineItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			invoiceLineItemAllColumns,
			invoiceLineItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InvoiceLineItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInvoiceLineItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(invoiceLineItemAllColumns) == len(invoiceLineItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InvoiceLineItem{}
	if err = randomize.Struct(seed, &o, invoiceLineItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InvoiceLineItem: %s", err)
	}

	count, err := InvoiceLineItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, invoiceLineItemDBTypes, false, invoiceLineItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceLineItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InvoiceLineItem: %s", err)
	}

	count, err = InvoiceLineItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
