// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CostCenter is an object representing the database table.
type CostCenter struct {
	ID                string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	ApprovalLimit     types.NullDecimal `boil:"approval_limit" json:"approval_limit,omitempty" toml:"approval_limit" yaml:"approval_limit,omitempty"`
	ApproverID        null.String       `boil:"approver_id" json:"approver_id,omitempty" toml:"approver_id" yaml:"approver_id,omitempty"`
	AutoApprovalLimit types.NullDecimal `boil:"auto_approval_limit" json:"auto_approval_limit,omitempty" toml:"auto_approval_limit" yaml:"auto_approval_limit,omitempty"`
	Code              null.String       `boil:"code" json:"code,omitempty" toml:"code" yaml:"code,omitempty"`
	DelegateExpiry    null.Time         `boil:"delegate_expiry" json:"delegate_expiry,omitempty" toml:"delegate_expiry" yaml:"delegate_expiry,omitempty"`
	DelegateID        null.String       `boil:"delegate_id" json:"delegate_id,omitempty" toml:"delegate_id" yaml:"delegate_id,omitempty"`
	Description       null.String       `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Name              null.String       `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	ParentID          null.String       `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	LegalEntityID     null.String       `boil:"legal_entity_id" json:"legal_entity_id,omitempty" toml:"legal_entity_id" yaml:"legal_entity_id,omitempty"`
	StatusActive      null.Bool         `boil:"status_active" json:"status_active,omitempty" toml:"status_active" yaml:"status_active,omitempty"`

	R *costCenterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L costCenterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CostCenterColumns = struct {
	ID                string
	ApprovalLimit     string
	ApproverID        string
	AutoApprovalLimit string
	Code              string
	DelegateExpiry    string
	DelegateID        string
	Description       string
	Name              string
	ParentID          string
	LegalEntityID     string
	StatusActive      string
}{
	ID:                "id",
	ApprovalLimit:     "approval_limit",
	ApproverID:        "approver_id",
	AutoApprovalLimit: "auto_approval_limit",
	Code:              "code",
	DelegateExpiry:    "delegate_expiry",
	DelegateID:        "delegate_id",
	Description:       "description",
	Name:              "name",
	ParentID:          "parent_id",
	LegalEntityID:     "legal_entity_id",
	StatusActive:      "status_active",
}

var CostCenterTableColumns = struct {
	ID                string
	ApprovalLimit     string
	ApproverID        string
	AutoApprovalLimit string
	Code              string
	DelegateExpiry    string
	DelegateID        string
	Description       string
	Name              string
	ParentID          string
	LegalEntityID     string
	StatusActive      string
}{
	ID:                "cost_centers.id",
	ApprovalLimit:     "cost_centers.approval_limit",
	ApproverID:        "cost_centers.approver_id",
	AutoApprovalLimit: "cost_centers.auto_approval_limit",
	Code:              "cost_centers.code",
	DelegateExpiry:    "cost_centers.delegate_expiry",
	DelegateID:        "cost_centers.delegate_id",
	Description:       "cost_centers.description",
	Name:              "cost_centers.name",
	ParentID:          "cost_centers.parent_id",
	LegalEntityID:     "cost_centers.legal_entity_id",
	StatusActive:      "cost_centers.status_active",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CostCenterWhere = struct {
	ID                whereHelperstring
	ApprovalLimit     whereHelpertypes_NullDecimal
	ApproverID        whereHelpernull_String
	AutoApprovalLimit whereHelpertypes_NullDecimal
	Code              whereHelpernull_String
	DelegateExpiry    whereHelpernull_Time
	DelegateID        whereHelpernull_String
	Description       whereHelpernull_String
	Name              whereHelpernull_String
	ParentID          whereHelpernull_String
	LegalEntityID     whereHelpernull_String
	StatusActive      whereHelpernull_Bool
}{
	ID:                whereHelperstring{field: "\"cost_centers\".\"id\""},
	ApprovalLimit:     whereHelpertypes_NullDecimal{field: "\"cost_centers\".\"approval_limit\""},
	ApproverID:        whereHelpernull_String{field: "\"cost_centers\".\"approver_id\""},
	AutoApprovalLimit: whereHelpertypes_NullDecimal{field: "\"cost_centers\".\"auto_approval_limit\""},
	Code:              whereHelpernull_String{field: "\"cost_centers\".\"code\""},
	DelegateExpiry:    whereHelpernull_Time{field: "\"cost_centers\".\"delegate_expiry\""},
	DelegateID:        whereHelpernull_String{field: "\"cost_centers\".\"delegate_id\""},
	Description:       whereHelpernull_String{field: "\"cost_centers\".\"description\""},
	Name:              whereHelpernull_String{field: "\"cost_centers\".\"name\""},
	ParentID:          whereHelpernull_String{field: "\"cost_centers\".\"parent_id\""},
	LegalEntityID:     whereHelpernull_String{field: "\"cost_centers\".\"legal_entity_id\""},
	StatusActive:      whereHelpernull_Bool{field: "\"cost_centers\".\"status_active\""},
}

// CostCenterRels is where relationship names are stored.
var CostCenterRels = struct {
}{}

// costCenterR is where relationships are stored.
type costCenterR struct {
}

// NewStruct creates a new relationship struct
func (*costCenterR) NewStruct() *costCenterR {
	return &costCenterR{}
}

// costCenterL is where Load methods for each relationship are stored.
type costCenterL struct{}

var (
	costCenterAllColumns            = []string{"id", "approval_limit", "approver_id", "auto_approval_limit", "code", "delegate_expiry", "delegate_id", "description", "name", "parent_id", "legal_entity_id", "status_active"}
	costCenterColumnsWithoutDefault = []string{"id"}
	costCenterColumnsWithDefault    = []string{"approval_limit", "approver_id", "auto_approval_limit", "code", "delegate_expiry", "delegate_id", "description", "name", "parent_id", "legal_entity_id", "status_active"}
	costCenterPrimaryKeyColumns     = []string{"id"}
	costCenterGeneratedColumns      = []string{}
)

type (
	// CostCenterSlice is an alias for a slice of pointers to CostCenter.
	// This should almost always be used instead of []CostCenter.
	CostCenterSlice []*CostCenter
	// CostCenterHook is the signature for custom CostCenter hook methods
	CostCenterHook func(context.Context, boil.ContextExecutor, *CostCenter) error

	costCenterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	costCenterType                 = reflect.TypeOf(&CostCenter{})
	costCenterMapping              = queries.MakeStructMapping(costCenterType)
	costCenterPrimaryKeyMapping, _ = queries.BindMapping(costCenterType, costCenterMapping, costCenterPrimaryKeyColumns)
	costCenterInsertCacheMut       sync.RWMutex
	costCenterInsertCache          = make(map[string]insertCache)
	costCenterUpdateCacheMut       sync.RWMutex
	costCenterUpdateCache          = make(map[string]updateCache)
	costCenterUpsertCacheMut       sync.RWMutex
	costCenterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var costCenterAfterSelectMu sync.Mutex
var costCenterAfterSelectHooks []CostCenterHook

var costCenterBeforeInsertMu sync.Mutex
var costCenterBeforeInsertHooks []CostCenterHook
var costCenterAfterInsertMu sync.Mutex
var costCenterAfterInsertHooks []CostCenterHook

var costCenterBeforeUpdateMu sync.Mutex
var costCenterBeforeUpdateHooks []CostCenterHook
var costCenterAfterUpdateMu sync.Mutex
var costCenterAfterUpdateHooks []CostCenterHook

var costCenterBeforeDeleteMu sync.Mutex
var costCenterBeforeDeleteHooks []CostCenterHook
var costCenterAfterDeleteMu sync.Mutex
var costCenterAfterDeleteHooks []CostCenterHook

var costCenterBeforeUpsertMu sync.Mutex
var costCenterBeforeUpsertHooks []CostCenterHook
var costCenterAfterUpsertMu sync.Mutex
var costCenterAfterUpsertHooks []CostCenterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CostCenter) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costCenterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CostCenter) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costCenterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CostCenter) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costCenterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CostCenter) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costCenterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CostCenter) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costCenterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CostCenter) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costCenterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CostCenter) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costCenterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CostCenter) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costCenterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CostCenter) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costCenterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCostCenterHook registers your hook function for all future operations.
func AddCostCenterHook(hookPoint boil.HookPoint, costCenterHook CostCenterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		costCenterAfterSelectMu.Lock()
		costCenterAfterSelectHooks = append(costCenterAfterSelectHooks, costCenterHook)
		costCenterAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		costCenterBeforeInsertMu.Lock()
		costCenterBeforeInsertHooks = append(costCenterBeforeInsertHooks, costCenterHook)
		costCenterBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		costCenterAfterInsertMu.Lock()
		costCenterAfterInsertHooks = append(costCenterAfterInsertHooks, costCenterHook)
		costCenterAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		costCenterBeforeUpdateMu.Lock()
		costCenterBeforeUpdateHooks = append(costCenterBeforeUpdateHooks, costCenterHook)
		costCenterBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		costCenterAfterUpdateMu.Lock()
		costCenterAfterUpdateHooks = append(costCenterAfterUpdateHooks, costCenterHook)
		costCenterAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		costCenterBeforeDeleteMu.Lock()
		costCenterBeforeDeleteHooks = append(costCenterBeforeDeleteHooks, costCenterHook)
		costCenterBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		costCenterAfterDeleteMu.Lock()
		costCenterAfterDeleteHooks = append(costCenterAfterDeleteHooks, costCenterHook)
		costCenterAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		costCenterBeforeUpsertMu.Lock()
		costCenterBeforeUpsertHooks = append(costCenterBeforeUpsertHooks, costCenterHook)
		costCenterBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		costCenterAfterUpsertMu.Lock()
		costCenterAfterUpsertHooks = append(costCenterAfterUpsertHooks, costCenterHook)
		costCenterAfterUpsertMu.Unlock()
	}
}

// One returns a single costCenter record from the query.
func (q costCenterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CostCenter, error) {
	o := &CostCenter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cost_centers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CostCenter records from the query.
func (q costCenterQuery) All(ctx context.Context, exec boil.ContextExecutor) (CostCenterSlice, error) {
	var o []*CostCenter

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CostCenter slice")
	}

	if len(costCenterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CostCenter records in the query.
func (q costCenterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cost_centers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q costCenterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cost_centers exists")
	}

	return count > 0, nil
}

// CostCenters retrieves all the records using an executor.
func CostCenters(mods ...qm.QueryMod) costCenterQuery {
	mods = append(mods, qm.From("\"cost_centers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cost_centers\".*"})
	}

	return costCenterQuery{q}
}

// FindCostCenter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCostCenter(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CostCenter, error) {
	costCenterObj := &CostCenter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cost_centers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, costCenterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cost_centers")
	}

	if err = costCenterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return costCenterObj, err
	}

	return costCenterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CostCenter) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cost_centers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(costCenterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	costCenterInsertCacheMut.RLock()
	cache, cached := costCenterInsertCache[key]
	costCenterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			costCenterAllColumns,
			costCenterColumnsWithDefault,
			costCenterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(costCenterType, costCenterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(costCenterType, costCenterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cost_centers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cost_centers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cost_centers")
	}

	if !cached {
		costCenterInsertCacheMut.Lock()
		costCenterInsertCache[key] = cache
		costCenterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CostCenter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CostCenter) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	costCenterUpdateCacheMut.RLock()
	cache, cached := costCenterUpdateCache[key]
	costCenterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			costCenterAllColumns,
			costCenterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cost_centers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cost_centers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, costCenterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(costCenterType, costCenterMapping, append(wl, costCenterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cost_centers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cost_centers")
	}

	if !cached {
		costCenterUpdateCacheMut.Lock()
		costCenterUpdateCache[key] = cache
		costCenterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q costCenterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cost_centers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cost_centers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CostCenterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), costCenterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cost_centers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, costCenterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in costCenter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all costCenter")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CostCenter) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no cost_centers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(costCenterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	costCenterUpsertCacheMut.RLock()
	cache, cached := costCenterUpsertCache[key]
	costCenterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			costCenterAllColumns,
			costCenterColumnsWithDefault,
			costCenterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			costCenterAllColumns,
			costCenterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cost_centers, could not build update column list")
		}

		ret := strmangle.SetComplement(costCenterAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(costCenterPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert cost_centers, could not build conflict column list")
			}

			conflict = make([]string, len(costCenterPrimaryKeyColumns))
			copy(conflict, costCenterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cost_centers\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(costCenterType, costCenterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(costCenterType, costCenterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cost_centers")
	}

	if !cached {
		costCenterUpsertCacheMut.Lock()
		costCenterUpsertCache[key] = cache
		costCenterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CostCenter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CostCenter) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CostCenter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), costCenterPrimaryKeyMapping)
	sql := "DELETE FROM \"cost_centers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cost_centers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cost_centers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q costCenterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no costCenterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cost_centers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cost_centers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CostCenterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(costCenterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), costCenterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cost_centers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, costCenterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from costCenter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cost_centers")
	}

	if len(costCenterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CostCenter) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCostCenter(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CostCenterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CostCenterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), costCenterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cost_centers\".* FROM \"cost_centers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, costCenterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CostCenterSlice")
	}

	*o = slice

	return nil
}

// CostCenterExists checks if the CostCenter row exists.
func CostCenterExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cost_centers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cost_centers exists")
	}

	return exists, nil
}

// Exists checks if the CostCenter row exists.
func (o *CostCenter) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CostCenterExists(ctx, exec, o.ID)
}
