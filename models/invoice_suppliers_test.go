// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInvoiceSuppliers(t *testing.T) {
	t.Parallel()

	query := InvoiceSuppliers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInvoiceSuppliersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceSuppliersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InvoiceSuppliers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceSuppliersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvoiceSupplierSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceSuppliersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InvoiceSupplierExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if InvoiceSupplier exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InvoiceSupplierExists to return true, but got false.")
	}
}

func testInvoiceSuppliersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	invoiceSupplierFound, err := FindInvoiceSupplier(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if invoiceSupplierFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInvoiceSuppliersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InvoiceSuppliers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInvoiceSuppliersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InvoiceSuppliers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInvoiceSuppliersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoiceSupplierOne := &InvoiceSupplier{}
	invoiceSupplierTwo := &InvoiceSupplier{}
	if err = randomize.Struct(seed, invoiceSupplierOne, invoiceSupplierDBTypes, false, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceSupplierTwo, invoiceSupplierDBTypes, false, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invoiceSupplierOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invoiceSupplierTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InvoiceSuppliers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInvoiceSuppliersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	invoiceSupplierOne := &InvoiceSupplier{}
	invoiceSupplierTwo := &InvoiceSupplier{}
	if err = randomize.Struct(seed, invoiceSupplierOne, invoiceSupplierDBTypes, false, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceSupplierTwo, invoiceSupplierDBTypes, false, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invoiceSupplierOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invoiceSupplierTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func invoiceSupplierBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceSupplier) error {
	*o = InvoiceSupplier{}
	return nil
}

func invoiceSupplierAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceSupplier) error {
	*o = InvoiceSupplier{}
	return nil
}

func invoiceSupplierAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceSupplier) error {
	*o = InvoiceSupplier{}
	return nil
}

func invoiceSupplierBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceSupplier) error {
	*o = InvoiceSupplier{}
	return nil
}

func invoiceSupplierAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceSupplier) error {
	*o = InvoiceSupplier{}
	return nil
}

func invoiceSupplierBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceSupplier) error {
	*o = InvoiceSupplier{}
	return nil
}

func invoiceSupplierAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceSupplier) error {
	*o = InvoiceSupplier{}
	return nil
}

func invoiceSupplierBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceSupplier) error {
	*o = InvoiceSupplier{}
	return nil
}

func invoiceSupplierAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceSupplier) error {
	*o = InvoiceSupplier{}
	return nil
}

func testInvoiceSuppliersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InvoiceSupplier{}
	o := &InvoiceSupplier{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier object: %s", err)
	}

	AddInvoiceSupplierHook(boil.BeforeInsertHook, invoiceSupplierBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	invoiceSupplierBeforeInsertHooks = []InvoiceSupplierHook{}

	AddInvoiceSupplierHook(boil.AfterInsertHook, invoiceSupplierAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	invoiceSupplierAfterInsertHooks = []InvoiceSupplierHook{}

	AddInvoiceSupplierHook(boil.AfterSelectHook, invoiceSupplierAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	invoiceSupplierAfterSelectHooks = []InvoiceSupplierHook{}

	AddInvoiceSupplierHook(boil.BeforeUpdateHook, invoiceSupplierBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceSupplierBeforeUpdateHooks = []InvoiceSupplierHook{}

	AddInvoiceSupplierHook(boil.AfterUpdateHook, invoiceSupplierAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceSupplierAfterUpdateHooks = []InvoiceSupplierHook{}

	AddInvoiceSupplierHook(boil.BeforeDeleteHook, invoiceSupplierBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceSupplierBeforeDeleteHooks = []InvoiceSupplierHook{}

	AddInvoiceSupplierHook(boil.AfterDeleteHook, invoiceSupplierAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceSupplierAfterDeleteHooks = []InvoiceSupplierHook{}

	AddInvoiceSupplierHook(boil.BeforeUpsertHook, invoiceSupplierBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceSupplierBeforeUpsertHooks = []InvoiceSupplierHook{}

	AddInvoiceSupplierHook(boil.AfterUpsertHook, invoiceSupplierAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceSupplierAfterUpsertHooks = []InvoiceSupplierHook{}
}

func testInvoiceSuppliersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoiceSuppliersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(invoiceSupplierColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := InvoiceSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoiceSuppliersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvoiceSuppliersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvoiceSupplierSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvoiceSuppliersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InvoiceSuppliers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	invoiceSupplierDBTypes = map[string]string{`ID`: `text`, `City`: `text`, `CountryCode`: `text`, `ExternalID`: `text`, `Name`: `text`, `SecondaryName`: `text`, `ShortName`: `text`, `StatusActive`: `boolean`, `Street`: `text`, `Taxnumber`: `integer`, `URL`: `text`, `Zipcode`: `integer`, `Defaultapproverid`: `text`, `Defaultcategoryid`: `text`, `Defaultcostcenter`: `text`, `Defaultpaymenttermid`: `text`, `SupplierID`: `text`}
	_                      = bytes.MinRead
)

func testInvoiceSuppliersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(invoiceSupplierPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(invoiceSupplierAllColumns) == len(invoiceSupplierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInvoiceSuppliersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(invoiceSupplierAllColumns) == len(invoiceSupplierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceSupplier{}
	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invoiceSupplierDBTypes, true, invoiceSupplierPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(invoiceSupplierAllColumns, invoiceSupplierPrimaryKeyColumns) {
		fields = invoiceSupplierAllColumns
	} else {
		fields = strmangle.SetComplement(
			invoiceSupplierAllColumns,
			invoiceSupplierPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InvoiceSupplierSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInvoiceSuppliersUpsert(t *testing.T) {
	t.Parallel()

	if len(invoiceSupplierAllColumns) == len(invoiceSupplierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InvoiceSupplier{}
	if err = randomize.Struct(seed, &o, invoiceSupplierDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InvoiceSupplier: %s", err)
	}

	count, err := InvoiceSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, invoiceSupplierDBTypes, false, invoiceSupplierPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceSupplier struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InvoiceSupplier: %s", err)
	}

	count, err = InvoiceSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
