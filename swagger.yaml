{
  "components": {
    "responses": {
      "Forbidden": {
        "content": {
          "application/json": {
            "example": {
              "code": 403,
              "message": "User not authorized to access organization"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "The client is not authorized to perform the requested operation."
      },
      "NotFound": {
        "content": {
          "application/json": {
            "example": {
              "code": 404,
              "message": "Resource not found"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "The specified resource was not found."
      },
      "TooManyRequests": {
        "content": {
          "application/json": {
            "example": {
              "code": 429,
              "message": "too many requests"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "The request cannot be processed by the server due to too many concurrent requests."
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "example": {
              "code": 401,
              "message": "Token expired"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "The server was unable to establish the identity of the client."
      }
    },
    "schemas": {
      "Category": {
        "properties": {
          "accountReference": {
            "description": "The category's account reference.",
            "example": "lunchAccount",
            "type": "string"
          },
          "chargeToEmployee": {
            "description": "Flag for usage in export.",
            "example": false,
            "nullable": true,
            "type": "boolean"
          },
          "customInformation": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Dictionary of custom information associated to the category.",
            "example": {
              "externalId": "Cat1"
            },
            "nullable": true,
            "type": "object"
          },
          "id": {
            "description": "The category's internal id.",
            "example": "9L7rovNzNhTCsJSTkbfq",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The category's name.",
            "example": "Lunch Expenses",
            "type": "string"
          },
          "statusActive": {
            "description": "Whether the category is active.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "accountReference",
          "statusActive"
        ],
        "type": "object"
      },
      "CompanyCard": {
        "properties": {
          "accountReference": {
            "description": "The card's account reference.",
            "example": "cardAccount123",
            "type": "string"
          },
          "cardReference": {
            "description": "The external reference to the company card.",
            "example": "card01",
            "nullable": true,
            "type": "string"
          },
          "currency": {
            "description": "The card's currency, ISO code.",
            "example": "CHF",
            "type": "string"
          },
          "description": {
            "description": "The card's description.",
            "example": "A company credit card.",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "The company card's internal id.",
            "example": "Y6c2p3G0x",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The card's name.",
            "example": "CardOne.",
            "type": "string"
          },
          "number": {
            "description": "The card number. Any string can be supplied, only the last four characters, padded with stars, will be returned. Queries can only be made using the 'endswith' operator on four or less characters, e.g. 'number ew \"1234\"'.",
            "example": null,
            "type": "string"
          },
          "ownerId": {
            "description": "The internal user id identifying the card's owner.",
            "example": "Y6cp2G30M",
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "statusActive": {
            "description": "Whether the card is active.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "ownerId",
          "statusActive",
          "accountReference",
          "number",
          "currency"
        ],
        "type": "object"
      },
      "CostCenter": {
        "properties": {
          "approvalLimit": {
            "description": "Approval limit in legal entity currency.",
            "example": 10000,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "approverId": {
            "description": "The internal user id identifying the cost center's approver.",
            "example": "Y6cp2G30M",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "autoApprovalLimit": {
            "description": "Auto approval limit in legal entity currency.",
            "example": 100000,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "code": {
            "description": "The account number associated to the cost center.",
            "example": "C33998",
            "type": "string"
          },
          "customInformation": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Dictionary of custom information associated to the cost center.",
            "example": {
              "externalId": "00001C"
            },
            "nullable": true,
            "type": "object"
          },
          "delegateExpiry": {
            "description": "The expiry date and time of the cost center's delegate.",
            "example": "Fri, 14 Aug 2020 21:59:59 GMT",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "delegateId": {
            "description": "The internal user id identifying the cost center's delegate.",
            "example": "h9cQajbG",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "description": {
            "description": "The cost center's description.",
            "example": "Cost Center of team one.",
            "type": "string"
          },
          "id": {
            "description": "The cost center's internal id.",
            "example": "uhmkC9zMzn",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The cost center's clear name.",
            "example": "Team1",
            "type": "string"
          },
          "parentId": {
            "description": "The internal cost center id identifying the cost center's parent.",
            "example": "9rL5X8PJ",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "statusActive": {
            "description": "Whether the cost center is active.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "code",
          "name",
          "description",
          "statusActive"
        ],
        "type": "object"
      },
      "CostCenterItem": {
        "properties": {
          "id": {
            "description": "Yokoy's internal reference of the cost center/cost object.",
            "example": "h9cQajbG",
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "pctWeight": {
            "description": "Cost percentage assigned to the dedicated cost center/cost object.",
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          }
        },
        "type": "object"
      },
      "DateRange": {
        "items": {
          "example": [
            "2023-02-21",
            "2023-02-22"
          ],
          "format": "date",
          "pattern": "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$",
          "type": "string"
        },
        "maxItems": 2,
        "minItems": 2,
        "type": "array"
      },
      "DateString": {
        "example": "2023-02-21",
        "format": "date",
        "pattern": "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$",
        "type": "string"
      },
      "Error": {
        "properties": {
          "code": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "EventLogEntry": {
        "properties": {
          "actionType": {
            "description": "Event type.",
            "enum": [
              "approve",
              "archive",
              "backToReview",
              "export",
              "needsRevision",
              "recall",
              "reject",
              "review",
              "submit",
              "revertExport",
              "imported",
              "exportReverted",
              "forwardApproval"
            ],
            "example": "needsRevision",
            "type": "string"
          },
          "comment": {
            "description": "comment provided by the user conducting the event.",
            "example": "Please re-upload the invoice instead of the payment receipt.",
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "name": {
            "description": "Name of the user that conducted the event",
            "example": "Luke Skywalker",
            "nullable": true,
            "type": "string"
          },
          "timestamp": {
            "description": "Datetime of the event",
            "example": "Tue, 15 Nov 2022 17:08:45 GMT",
            "type": "string"
          },
          "userId": {
            "description": "The internal user id",
            "example": "h9cQajbG",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Expense": {
        "properties": {
          "additionalCharges": {
            "description": "Additional charges to be added to the total amount (example - tip, personal card fees, foreign exchange conversion fees).",
            "example": 10,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "approverIds": {
            "description": "List of users that have approved the expense",
            "items": {
              "description": "Internal Id of the approver",
              "example": "9L7rovNzNhTCsJSTkbfq",
              "pattern": "[\\w-]+",
              "type": "string"
            },
            "type": "array"
          },
          "categoryId": {
            "description": "The internal category id (primary/first category tagged in the expense)",
            "example": "h9cQajbG",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "costCenterItems": {
            "items": {
              "$ref": "#/components/schemas/CostCenterItem"
            },
            "nullable": true,
            "type": "array"
          },
          "country": {
            "description": "Country where expense occurred as ISO3166 Alpha-2 code",
            "example": "US",
            "type": "string"
          },
          "created": {
            "description": "Datetime when the expense was created",
            "example": "Tue, 15 Nov 2022 17:08:45 GMT",
            "type": "string"
          },
          "currency": {
            "description": "Original expense currency as ISO4217 country currency code",
            "example": "EUR",
            "type": "string"
          },
          "currentAproverIds": {
            "description": "List of users that currently need to approve the expense",
            "items": {
              "description": "Internal Id of the current approver",
              "example": "9L7rovNzNhTCsJSTkbfq",
              "pattern": "[\\w-]+",
              "type": "string"
            },
            "type": "array"
          },
          "customInformation": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Dictionary of custom information associated to the expense.",
            "example": {
              "bookingType": "ASDF1234"
            },
            "nullable": true,
            "type": "object"
          },
          "description": {
            "description": "Description including business purpose (free text descriptions added by users).",
            "example": "Hotel expense for business meeting",
            "type": "string"
          },
          "eventLog": {
            "items": {
              "$ref": "#/components/schemas/EventLogEntry"
            },
            "nullable": true,
            "type": "array"
          },
          "expenseDate": {
            "description": "Date when the expense occurred (date on receipt or invoice).",
            "example": "Fri, 21 Jan 2022 00:00:00 GMT",
            "type": "string"
          },
          "expenseEndDate": {
            "description": "End date of an expense related to an extended stay (e.g. hotel stay, flight).",
            "example": "Thu, 27 Jan 2022 00:00:00 GMT",
            "type": "string"
          },
          "expenseStartDate": {
            "description": "Start date of an expense related to an extended stay (e.g. hotel stay, flight).",
            "example": "Sun, 23 Jan 2022 00:00:00 GMT",
            "type": "string"
          },
          "expenseType": {
            "description": "Expense type.",
            "enum": [
              "receipt",
              "receiptless",
              "perDiem",
              "mileage"
            ],
            "example": "receipt",
            "type": "string"
          },
          "id": {
            "description": "The expense's internal id.",
            "example": "uhmkC9zMzn",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "isCreditNote": {
            "description": "Returns true if the expense is a credit note (equivalent to negative expense amount)",
            "example": false,
            "nullable": true,
            "type": "boolean"
          },
          "lastModified": {
            "description": "Datetime when the expense was last modified",
            "example": "Tue, 15 Nov 2022 17:08:45 GMT",
            "type": "string"
          },
          "legalEntityId": {
            "description": "The internal legal entity id identifying the legal entity to which the expense is assigned",
            "example": "aB9jQoE3HE",
            "type": "string"
          },
          "paymentMethod": {
            "description": "Expense payment method.",
            "enum": [
              "paidPrivately",
              "companyCreditCard",
              "travelProvider"
            ],
            "example": "paidPrivately",
            "type": "string"
          },
          "postingDate": {
            "description": "Date when expense is or shall be posted to the general ledger.",
            "example": "Sun, 30 Jan 2022 00:00:00 GMT",
            "type": "string"
          },
          "status": {
            "description": "Expense status.",
            "enum": [
              "draft",
              "needsRevision",
              "forApproval",
              "forReview",
              "forExpenseExport",
              "rejected",
              "expenseExported",
              "forTransactionExport",
              "transactionExported",
              "readyForTripSubmission",
              "travelDraft"
            ],
            "example": "draft",
            "type": "string"
          },
          "tags": {
            "additionalProperties": {
              "description": "The yokoy tag identifier associated with the tag dimensions",
              "type": "string"
            },
            "description": "The tags associated with the expense",
            "example": "{ \"tagDimension1\": \"tagReferenceOfDimension1\", \"tagDimension2\": \"tagReferenceOfDimension2\"}",
            "nullable": true,
            "type": "object"
          },
          "taxItems": {
            "items": {
              "$ref": "#/components/schemas/TaxItem"
            },
            "nullable": true,
            "type": "array"
          },
          "taxNumber": {
            "description": "Merchant tax number extracted from the expense/invoice.",
            "example": "CHE-172.979.264",
            "type": "string"
          },
          "totalAmount": {
            "description": "Expense amount in original expense currency (excluding additional charges)",
            "example": 990,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "totalClaim": {
            "description": "Total claim in original expense currency (including additional charges)",
            "example": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "tripId": {
            "description": "The internal trip id (primary/first category tagged in the expense)",
            "example": "h9cQajbG",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "userId": {
            "description": "The internal user id",
            "example": "h9cQajbG",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        "required": [
          "id",
          "status",
          "totalAmount",
          "totalClaim"
        ],
        "type": "object"
      },
      "ExpenseCreditorItem": {
        "properties": {
          "account": {
            "description": "Account",
            "type": "string"
          },
          "amount": {
            "description": "Total amount in journal entry currency",
            "type": "number"
          },
          "amountOriginalExpenseCurrency": {
            "description": "Amount in original expense currency",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ExpenseExportArtefact": {
        "properties": {
          "generatedFiles": {
            "description": "List of file names of additional files generated in the context of the export.",
            "items": {
              "example": "summary.pdf",
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Internal ID",
            "example": "9fgdsXqPHG2lMHfDJmJt",
            "type": "string"
          },
          "originalFormat": {
            "description": "Original format of the serialized artefact",
            "example": "application/json",
            "type": "string"
          },
          "relatedDocumentIds": {
            "description": "List of internal expense ids contained in the artefact",
            "items": {
              "description": "Internal id of the exported expense",
              "example": "dhPdQB5c1",
              "type": "string"
            },
            "type": "array"
          },
          "serializedArtefact": {
            "description": "Serialised artefact of the form ExpenseExportPayload",
            "example": "{\"journalEntry\":{\"journalEntryType\":\"expense\",\"lineItems\":[{\"account\":\"6630\",\"categoryId\":\"aquNlTt8v2NOqzOruWtE\",\"amountNet\":18.5,\"amountGross\":18.5,\"costCenterCode\":\"1234\",\"costCenterId\":\"4neg0miskYbpOvKkMBd4\",\"amountGrossOriginalExpenseCurrency\":18.5,\"amountNetOriginalExpenseCurrency\":18.5}],\"taxItems\":[],\"creditorItem\":{\"account\":\"123\",\"amount\":18.5,\"amountOriginalExpenseCurrency\":18.5},\"currency\":\"EUR\",\"originalExpenseCurrency\":\"EUR\"}}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExpenseExportPayload": {
        "properties": {
          "journalEntry": {
            "$ref": "#/components/schemas/ExpenseJournalEntry"
          }
        },
        "type": "object"
      },
      "ExpenseExportTaskInformation": {
        "properties": {
          "resource": {
            "properties": {
              "created": {
                "description": "Datetime when the export was triggered.",
                "example": "2022-04-01T17:08:45.478Z",
                "type": "string"
              },
              "earliestPostingDate": {
                "description": "Earliest allowed posting date specified for the export.",
                "example": "2023-03-31",
                "pattern": "\\d{4}-\\d{2}-\\d{2}",
                "type": "string"
              },
              "exporterId": {
                "description": "The user's internal id on behalf of which the export was executed.",
                "example": "zbRCb62OlcF8WcuOKVs9",
                "type": "string"
              },
              "exporterName": {
                "description": "The user's name last name on behalf of which the export was executed.",
                "example": "Yokoy",
                "type": "string"
              },
              "facilityId": {
                "description": "Internal id of the export facility (corresponding to the expense type).",
                "enum": [
                  "expense",
                  "card",
                  "travel"
                ],
                "example": "expense",
                "type": "string"
              },
              "generatedFiles": {
                "description": "List of file names of additional files generated in the context of the export.",
                "items": {
                  "example": "summary.pdf",
                  "type": "string"
                },
                "type": "array"
              },
              "id": {
                "description": "Export task id.",
                "example": "h6tplNlvNxnHUpeAwd7D",
                "type": "string"
              },
              "isPending": {
                "description": "Whether the export job is still pending",
                "example": true,
                "type": "boolean"
              },
              "method": {
                "description": "Triggering method for the export.",
                "enum": [
                  "api",
                  "manual",
                  "automatic"
                ],
                "example": "api",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ExpenseJournalEntry": {
        "properties": {
          "creditorItem": {
            "$ref": "#/components/schemas/ExpenseCreditorItem"
          },
          "currency": {
            "description": "Currency of the journal entry",
            "example": "CHF",
            "type": "string"
          },
          "journalEntryType": {
            "description": "Type of the journal entry",
            "enum": [
              "expense",
              "creditNote"
            ],
            "type": "string"
          },
          "lineItems": {
            "description": "Line items in the journal entry",
            "items": {
              "$ref": "#/components/schemas/ExpenseJournalEntryLineItem"
            },
            "type": "array"
          },
          "originalExpenseCurrency": {
            "description": "Original currency of the expense",
            "example": "CHF",
            "type": "string"
          },
          "taxItems": {
            "description": "Consolidated tax items",
            "items": {
              "$ref": "#/components/schemas/ExpenseTaxItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ExpenseJournalEntryLineItem": {
        "properties": {
          "account": {
            "description": "Account of the line item",
            "type": "string"
          },
          "amountGross": {
            "description": "Gross amount in journal entry currency",
            "type": "number"
          },
          "amountGrossOriginalExpenseCurrency": {
            "description": "Gross amount in original expense currency",
            "type": "number"
          },
          "amountNet": {
            "description": "Net amount in journal entry currency",
            "type": "number"
          },
          "amountNetOriginalExpenseCurrency": {
            "description": "Net amount in original expense currency",
            "type": "number"
          },
          "categoryId": {
            "description": "Internal category id",
            "type": "string"
          },
          "costCenterCode": {
            "description": "Code of the cost center",
            "type": "string"
          },
          "costCenterId": {
            "description": "Internal id of the cost center",
            "type": "string"
          },
          "taxItem": {
            "$ref": "#/components/schemas/ExpenseTaxItem"
          }
        },
        "type": "object"
      },
      "ExpenseTaxItem": {
        "properties": {
          "account": {
            "description": "Tax account",
            "type": "string"
          },
          "amount": {
            "description": "Amount of the tax",
            "type": "number"
          },
          "amountOriginalExpenseCurrency": {
            "description": "Tax amount in original expense currency",
            "type": "number"
          },
          "baseAmountGross": {
            "description": "Base gross amount in journal entry currency",
            "type": "number"
          },
          "baseAmountGrossOriginalExpenseCurrency": {
            "description": "Base gross amount in original expense currency",
            "type": "number"
          },
          "baseAmountNet": {
            "description": "Base net amount in journal entry currency",
            "type": "number"
          },
          "baseAmountNetOriginalExpenseCurrency": {
            "description": "Base net amount in original expense currency",
            "type": "number"
          },
          "code": {
            "description": "External reference of the tax rate",
            "type": "string"
          },
          "country": {
            "description": "Country of the tax rate",
            "type": "string"
          },
          "rate": {
            "description": "Tax rate",
            "type": "number"
          },
          "taxId": {
            "description": "Internal id of the tax rate",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoodsReceipt": {
        "properties": {
          "amount": {
            "description": "The goods receipt's amount. Calculated from the inner items.",
            "example": 35,
            "minimum": 0,
            "readOnly": true,
            "type": "number"
          },
          "currency": {
            "description": "The goods receipt's currency",
            "example": "CHF",
            "type": "string"
          },
          "externalId": {
            "description": "The goods receipt's external id.",
            "example": "external-1234567890",
            "nullable": true,
            "type": "string"
          },
          "goodsReceiptNumber": {
            "description": "The goods receipt number.",
            "example": "1234567890",
            "type": "string"
          },
          "id": {
            "description": "The goods receipt's internal id.",
            "example": "9L7rovNzNhTCsJSTkbfq",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/GoodsReceiptItem"
            },
            "type": "array"
          },
          "postingDate": {
            "$ref": "#/components/schemas/DateString",
            "description": "The goods receipt's posting date. In the format YYYY-MM-DD",
            "nullable": true
          }
        },
        "required": [
          "id",
          "goodsReceiptNumber",
          "currency",
          "items"
        ],
        "type": "object"
      },
      "GoodsReceiptItem": {
        "properties": {
          "amount": {
            "description": "The goods receipt items's amount.",
            "example": 35,
            "minimum": 0,
            "type": "number"
          },
          "externalId": {
            "description": "The goods receipt item's externalId.",
            "example": "external-1234567890",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "The goods receipt item's internal id.\nFor new items, the system will generate the ID. For existing items, you can reference that id.\n",
            "example": "9L7rovNzNhTCsJSTkbfq",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "itemNumber": {
            "description": "The goods receipt item's number.",
            "example": "1234567890",
            "nullable": true,
            "type": "string"
          },
          "itemPrice": {
            "description": "The item's per item price.",
            "minimum": 0,
            "nullable": true,
            "readOnly": false,
            "type": "number"
          },
          "purchaseOrderId": {
            "description": "The yokoy purchaseOrder identifier associated with the line item",
            "type": "string"
          },
          "purchaseOrderItemId": {
            "description": "The yokoy purchaseOrderItem identifier associated with the line item",
            "type": "string"
          },
          "quantity": {
            "description": "The goods receipt item's quantity.",
            "example": 123,
            "minimum": 0,
            "nullable": false,
            "type": "number"
          },
          "statusActive": {
            "description": "Whether the goods receipt is active.",
            "example": true,
            "nullable": false,
            "type": "boolean"
          },
          "unit": {
            "description": "The unit of the line item",
            "example": "kg",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "statusActive",
          "purchaseOrderId",
          "purchaseOrderItemId",
          "amount"
        ],
        "type": "object"
      },
      "Invoice": {
        "properties": {
          "bankAccount": {
            "$ref": "#/components/schemas/InvoiceBankAccount",
            "description": "The Bank account to which to pay this invoice",
            "nullable": true,
            "type": "object"
          },
          "country": {
            "description": "The invoice's country alpha 2 code as defined in in the ISO3166-1 standard",
            "example": "CH",
            "type": "string"
          },
          "currency": {
            "description": "The invoice's currency",
            "example": "CHF",
            "type": "string"
          },
          "customInformation": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Dictionary of custom information associated with the invoice.",
            "example": {
              "some-key": "some-value"
            },
            "nullable": true,
            "type": "object"
          },
          "date": {
            "$ref": "#/components/schemas/DateString",
            "description": "The invoice's date. In the format YYYY-MM-DD",
            "nullable": true
          },
          "documentData": {
            "description": "A base64 encoded string of the document related to the invoice. \nThis document will be uploaded and linked to the invoice.\nHowever, the document will not be analyzed by the AI.\nThe document must be a PDF.\n",
            "format": "base64",
            "nullable": false,
            "type": "string",
            "writeOnly": true
          },
          "grossAmount": {
            "description": "The invoice's gross amount, aggregated from the invoice's line items",
            "example": 450,
            "minimum": 0,
            "readOnly": true,
            "type": "number"
          },
          "id": {
            "description": "The invoice's internal id.",
            "example": "9L7rovNzNhTCsJSTkbfq",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "invoiceNumber": {
            "description": "The invoice's number",
            "type": "string"
          },
          "isCreditNote": {
            "description": "Whether or not the invoice is a credit note",
            "example": true,
            "nullable": true,
            "type": "boolean"
          },
          "lineItems": {
            "items": {
              "$ref": "#/components/schemas/InvoiceLineItem",
              "type": "object"
            },
            "type": "array"
          },
          "netAmount": {
            "description": "The invoices net amount, aggregated from the invoice's line items",
            "example": 420,
            "minimum": 0,
            "readOnly": true,
            "type": "number"
          },
          "paymentTermId": {
            "description": "The yokoy identifier of the payment terms associated with the invoice",
            "example": "9L7rovNzNhTCsJSTkbfq",
            "nullable": true,
            "type": "string"
          },
          "postingDate": {
            "$ref": "#/components/schemas/DateString",
            "description": "The invoice's posting date. In the format YYYY-MM-DD",
            "nullable": true
          },
          "purchaseOrderIds": {
            "description": "Array of yokoy purchase order identifiers associated with the invoice",
            "example": [
              "9L7rovNzNhTCsJSTkbfq",
              "ZPR8UGnX2QoiOB2eDNp9"
            ],
            "items": {
              "nullable": false,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "serviceDate": {
            "description": "The invoice's service date(s). If a single date is passed as a string then it describes that date.\nElse if two dates are passed then it is considered a range of dates.\n",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateString",
                "type": null
              },
              {
                "$ref": "#/components/schemas/DateRange",
                "maxLength": 2,
                "type": null
              }
            ]
          },
          "status": {
            "description": "The invoice's status id. The system manages this and cannot be changed directly.",
            "enum": [
              "draft",
              "needsRevision",
              "inApproval",
              "inReview",
              "readyForExport",
              "rejected",
              "exported",
              "new"
            ],
            "example": "draft",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "submitters": {
            "description": "List of the user IDs who submitted the invoice or who will be responsible to code the invoice",
            "example": [
              "9L7rovNzNhTCsJSTkbfq"
            ],
            "items": {
              "nullable": false,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "supplierId": {
            "description": "Yokoy - identifier of the entity supplier associated with the invoice",
            "example": "9L7rovNzNhTCsJSTkbfq",
            "nullable": true,
            "type": "string"
          },
          "taxableAmount": {
            "description": "The invoice's tayable amount, aggregated from the invoice's line items",
            "example": 450,
            "minimum": 0,
            "nullable": true,
            "readOnly": true,
            "type": "number"
          }
        },
        "required": [
          "id",
          "status",
          "invoiceNumber",
          "documentData",
          "lineItems"
        ],
        "type": "object"
      },
      "InvoiceBankAccount": {
        "properties": {
          "bankAccount": {
            "description": "The bank account number, often used if no IBAN exists",
            "example": "987654321",
            "nullable": true,
            "type": "string"
          },
          "bankCountry": {
            "description": "The country of the bank",
            "example": "UK",
            "nullable": true,
            "type": "string"
          },
          "bankKey": {
            "description": "The Bank Key, also called branch code",
            "example": "011315",
            "nullable": true,
            "type": "string"
          },
          "bankNumber": {
            "description": "The Bank Number, also called bank code",
            "example": "12-34-56",
            "nullable": true,
            "type": "string"
          },
          "externalId": {
            "description": "The bank connection's external id in ERP systems",
            "nullable": true,
            "type": "string"
          },
          "iban": {
            "description": "The Internal Bank Account Number",
            "example": "GB82 WEST 1234 5678 7654 32",
            "nullable": true,
            "type": "string"
          },
          "swiftCode": {
            "description": "The Swift code, also called the BIC",
            "example": "WESTGBAV",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "InvoiceCategory": {
        "properties": {
          "accountReference": {
            "description": "The invoice category's account reference.",
            "example": "saas",
            "type": "string"
          },
          "customInformation": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Dictionary of custom information associated to the category.",
            "example": {
              "externalId": "InvCat1"
            },
            "nullable": true,
            "type": "object"
          },
          "description": {
            "description": "The invoice category's description.",
            "example": "Any cost for Software which is used for internal purposes",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "The invoice category's internal id.",
            "example": "9L7rovNzNhTCsJSTkbfq",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The invoice category's name.",
            "example": "Software costs",
            "type": "string"
          },
          "statusActive": {
            "description": "Whether the invoice category is active.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "accountReference",
          "statusActive"
        ],
        "type": "object"
      },
      "InvoiceExportArtefact": {
        "properties": {
          "generatedFiles": {
            "description": "List of file names of additional files generated in the context of the export.",
            "items": {
              "example": "summary.pdf",
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Internal ID",
            "example": "9fgdsXqPHG2lMHfDJmJt",
            "type": "string"
          },
          "originalFormat": {
            "description": "Original format of the serialized artefact",
            "example": "application/json",
            "type": "string"
          },
          "relatedDocumentIds": {
            "description": "List of internal invoice ids contained in the artefact",
            "items": {
              "description": "Internal id of the exported invoice",
              "example": "dhPdQB5c1",
              "type": "string"
            },
            "type": "array"
          },
          "serializedArtefact": {
            "description": "Serialised artefact of the form InvoiceExportPayload",
            "example": "{\"journalEntry\":{\"journalEntryType\":\"invoice\",\"lineItems\":[{\"account\":\"6630\",\"categoryId\":\"aquNlTt8v2NOqzOruWtE\",\"amountNet\":18.5,\"amountGross\":18.5,\"costCenterCode\":\"1234\",\"costCenterId\":\"4neg0miskYbpOvKkMBd4\",\"amountGrossOriginalCurrency\":18.5,\"amountNetOriginalCurrency\":18.5}],\"taxItems\":[],\"currency\":\"EUR\",\"originalCurrency\":\"EUR\",\"supplierId\":\"9L7rovNzNhTCsJSTkbfq\",\"postingDate\":\"2023-01-01\"}}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InvoiceExportPayload": {
        "properties": {
          "journalEntry": {
            "$ref": "#/components/schemas/InvoiceJournalEntry"
          }
        },
        "type": "object"
      },
      "InvoiceExportTaskInformation": {
        "properties": {
          "resource": {
            "properties": {
              "created": {
                "description": "Datetime when the export was triggered.",
                "example": "2022-04-01T17:08:45.478Z",
                "type": "string"
              },
              "earliestPostingDate": {
                "description": "Earliest allowed posting date specified for the export.",
                "example": "2023-03-31",
                "pattern": "\\d{4}-\\d{2}-\\d{2}",
                "type": "string"
              },
              "exporterId": {
                "description": "The user's internal id on behalf of which the export was executed.",
                "example": "zbRCb62OlcF8WcuOKVs9",
                "type": "string"
              },
              "exporterName": {
                "description": "The user's name last name on behalf of which the export was executed.",
                "example": "Yokoy",
                "type": "string"
              },
              "facilityId": {
                "description": "Internal id of the export facility.",
                "example": "dfP59n4vLVvO6KWj27pS",
                "type": "string"
              },
              "generatedFiles": {
                "description": "List of file names of additional files generated in the context of the export.",
                "items": {
                  "example": "summary.pdf",
                  "type": "string"
                },
                "type": "array"
              },
              "id": {
                "description": "Export task id.",
                "example": "h6tplNlvNxnHUpeAwd7D",
                "type": "string"
              },
              "isPending": {
                "description": "Whether the export job is still pending",
                "example": true,
                "type": "boolean"
              },
              "method": {
                "description": "Triggering method for the export.",
                "enum": [
                  "api",
                  "manual",
                  "automatic"
                ],
                "example": "api",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "InvoiceJournalEntry": {
        "properties": {
          "amountGross": {
            "description": "Gross amount in the journal entry currency",
            "type": "number"
          },
          "amountGrossOriginalCurrency": {
            "description": "Gross amount in original invoice currency",
            "type": "number"
          },
          "amountNet": {
            "description": "Net amount in the journal entry currency",
            "type": "number"
          },
          "amountNetOriginalCurrency": {
            "description": "Net amount in original invoice currency",
            "type": "number"
          },
          "currency": {
            "description": "Currency of the journal entry (ISO 4217 three-letter code)",
            "example": "CHF",
            "type": "string"
          },
          "journalEntryType": {
            "description": "Type of the journal entry",
            "enum": [
              "invoice",
              "creditNote"
            ],
            "example": "invoice",
            "type": "string"
          },
          "lineItems": {
            "description": "Line items in the journal entry",
            "items": {
              "$ref": "#/components/schemas/InvoiceJournalEntryLineItem"
            },
            "type": "array"
          },
          "originalCurrency": {
            "description": "Original currency of the invoice (ISO 4217 three-letter code)",
            "example": "CHF",
            "type": "string"
          },
          "postingDate": {
            "description": "Posting date of the invoice",
            "pattern": "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$",
            "type": "string"
          },
          "supplierId": {
            "description": "Internal id of the supplier of the invoice",
            "type": "string"
          },
          "taxItems": {
            "description": "Consolidated tax items",
            "items": {
              "$ref": "#/components/schemas/InvoiceTaxItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InvoiceJournalEntryLineItem": {
        "properties": {
          "account": {
            "description": "Account of the line item",
            "type": "string"
          },
          "amountGross": {
            "description": "Gross amount in journal entry currency",
            "type": "number"
          },
          "amountGrossOriginalCurrency": {
            "description": "Gross amount in original invoice currency",
            "type": "number"
          },
          "amountNet": {
            "description": "Net amount in journal entry currency",
            "type": "number"
          },
          "amountNetOriginalCurrency": {
            "description": "Net amount in original invoice currency",
            "type": "number"
          },
          "categoryId": {
            "description": "Internal category id",
            "type": "string"
          },
          "costCenterCode": {
            "description": "Code of the cost center",
            "type": "string"
          },
          "costCenterId": {
            "description": "Internal id of the cost center",
            "type": "string"
          },
          "description": {
            "description": "Description of the line item",
            "type": "string"
          },
          "purchaseOrderId": {
            "description": "Internal id of the purchase order",
            "type": "string"
          },
          "purchaseOrderItemId": {
            "description": "Internal id of the purchase order item",
            "type": "string"
          },
          "quantity": {
            "description": "Quantity of the line item",
            "type": "number"
          },
          "tags": {
            "description": "Tags on the line item, mapping from tag dimension code to tag code",
            "type": "object"
          },
          "taxItem": {
            "$ref": "#/components/schemas/InvoiceTaxItem"
          },
          "unit": {
            "description": "Unit of the line item",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InvoiceLineItem": {
        "properties": {
          "categoryId": {
            "description": "Unique yokoy identifier of the invoice category associated with the line item",
            "example": "Y6cp2G30M",
            "nullable": true,
            "type": "string"
          },
          "costObjectId": {
            "description": "Unique yokoy identifier of the cost object associated with the line item",
            "example": "Y6cp2G30M",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "The description amount of the line item",
            "example": "Line item no 1",
            "nullable": true,
            "type": "string"
          },
          "gross": {
            "description": "The gross amount of the line item",
            "example": 70,
            "minimum": 0,
            "type": "number"
          },
          "itemPrice": {
            "description": "The item price of the line item",
            "example": 70,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "net": {
            "description": "The net amount of the line item",
            "example": 70,
            "minimum": 0,
            "type": "number"
          },
          "purchaseOrderId": {
            "description": "The yokoy purchaseOrder identifier associated with the line item",
            "nullable": true,
            "type": "string"
          },
          "purchaseOrderItemId": {
            "description": "The yokoy purchaseOrderItem identifier associated with the line item",
            "nullable": true,
            "type": "string"
          },
          "quantity": {
            "description": "The quantity of the line item",
            "example": 70,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "tags": {
            "additionalProperties": {
              "description": "The yokoy tag identifier associated with the tag dimensions",
              "type": "string"
            },
            "description": "The tags associated with the line item",
            "example": "{ \"tagDimension1\": \"tagValueOfDimension1\", \"tagDimension2\": \"tagValueOfDimension2\"}",
            "type": "object"
          },
          "taxRateId": {
            "description": "Unique yokoy identifier of the tax rate associated with the line item",
            "example": "Y6cp2G30M",
            "nullable": true,
            "type": "string"
          },
          "unit": {
            "description": "The unit of the line item",
            "example": "kg",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "gross",
          "net"
        ],
        "type": "object"
      },
      "InvoicePaymentTerms": {
        "properties": {
          "discounts": {
            "description": "List of a discounts if an invoice is payed within a given timeframe",
            "items": {
              "properties": {
                "days": {
                  "description": "Days within which the discount will be applicable",
                  "example": 3,
                  "type": "number"
                },
                "discount": {
                  "description": "Discount in percent of the invoice (5% == 5)",
                  "example": 5,
                  "type": "number"
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "externalId": {
            "description": "The external reference to the payment term.",
            "example": "externalId1",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "The invoice payment term's internal id.",
            "example": "06x2u4nagAMEq3gGoMch",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The payment term's name.",
            "example": "Supplier Payment Term",
            "type": "string"
          },
          "netPaymentPeriod": {
            "description": "Describes the duration within which a payment is required in days.",
            "example": 3,
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "netPaymentPeriod"
        ],
        "type": "object"
      },
      "InvoiceTaxItem": {
        "properties": {
          "tax": {
            "description": "Tax amount in journal entry currency",
            "type": "number"
          },
          "taxOriginalCurrency": {
            "description": "Tax amount in original invoice currency",
            "type": "number"
          },
          "taxRateId": {
            "description": "Internal id of the tax rate",
            "type": "string"
          },
          "taxReverseCharge": {
            "description": "Tax amount reverse charge in journal entry currency",
            "type": "string"
          },
          "taxReverseChargeOriginalCurrency": {
            "description": "Tax amount reverse charge in original invoice currency"
          }
        },
        "type": "object"
      },
      "LegalEntity": {
        "properties": {
          "categories": {
            "items": {
              "properties": {
                "accountReference": {
                  "description": "The category's account reference.",
                  "example": "lunchAccount",
                  "type": "string"
                },
                "customInformation": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Dictionary of custom information associated to the category.",
                  "example": {
                    "externalId": "Cat1"
                  },
                  "nullable": true,
                  "type": "object"
                },
                "id": {
                  "description": "The category's internal id.",
                  "example": "9L7rovNzNhTCsJSTkbfq",
                  "pattern": "[\\w-]+",
                  "type": "string"
                },
                "name": {
                  "description": "The category's name.",
                  "example": "Lunch Expenses",
                  "type": "string"
                },
                "statusActive": {
                  "description": "Whether the category is active.",
                  "example": true,
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "accountReference",
                "statusActive"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "code": {
            "description": "The legal entity's account in the ERP system.",
            "example": "11",
            "type": "string"
          },
          "id": {
            "description": "The legal entity's internal id.",
            "example": "aB9jQoE3HE",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "language": {
            "description": "The legal entity's main language.",
            "enum": [
              "de",
              "de-ch",
              "en",
              "en-gb",
              "fr",
              "es"
            ],
            "example": "de-ch",
            "type": "string"
          },
          "name": {
            "description": "The legal entity's name.",
            "example": "ACME corporation",
            "type": "string"
          },
          "policies": {
            "items": {
              "properties": {
                "code": {
                  "description": "The policy's code.",
                  "example": "policy0",
                  "type": "string"
                },
                "id": {
                  "description": "The policy's internal id.",
                  "example": "06x2u4nagAMEq3gGoMch",
                  "pattern": "[\\w-]+",
                  "type": "string"
                },
                "name": {
                  "description": "The policy's name.",
                  "example": "Employee Policy",
                  "type": "string"
                },
                "statusActive": {
                  "description": "Whether the policy is active.",
                  "example": true,
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "code",
                "statusActive"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "taxRates": {
            "items": {
              "properties": {
                "code": {
                  "description": "The tax rates's code.",
                  "example": "tax77",
                  "type": "string"
                },
                "customInformation": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Dictionary of custom information associated to the tax rate.",
                  "example": {
                    "externalId": "Tax1"
                  },
                  "nullable": true,
                  "type": "object"
                },
                "id": {
                  "description": "The tax rate's internal id.",
                  "example": "06x2u4nagAMEq3gGMoch",
                  "pattern": "[\\w-]+",
                  "type": "string"
                },
                "name": {
                  "description": "The tax rates's name.",
                  "example": "7.7% Standard Rate",
                  "type": "string"
                },
                "statusActive": {
                  "description": "Whether the tax rate is active.",
                  "example": true,
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "code",
                "statusActive"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "code",
          "language",
          "policies",
          "categories"
        ],
        "type": "object"
      },
      "LegalEntitySupplier": {
        "properties": {
          "customInformation": {
            "additionalProperties": true,
            "nullable": true,
            "type": "object"
          },
          "defaultApproverId": {
            "description": "The internal Yokoy id of the default approver.",
            "example": "uhmkC9Mzzn",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "defaultCategoryId": {
            "description": "The internal Yokoy id of the default invoice category.",
            "example": "uhmkC9Mzzn",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "defaultCostCenterId": {
            "description": "The internal Yokoy id of the default cost center.",
            "example": "uhmkC9Mzzn",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "defaultPaymentTermId": {
            "description": "The internal Yokoy id of the default payment term.",
            "example": "uhmkC9Mzzn",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "statusActive": {
            "type": "boolean"
          },
          "supplierId": {
            "description": "The ID of the organization supplier to extend. Must reference an existing Organization level supplier",
            "example": "uhmkC9Mzzn",
            "type": "string"
          }
        },
        "required": [
          "id",
          "legalEntityId",
          "supplierId",
          "statusActive"
        ],
        "type": "object"
      },
      "OrganizationSupplier": {
        "properties": {
          "bankAccounts": {
            "items": {
              "$ref": "#/components/schemas/InvoiceBankAccount"
            },
            "nullable": true,
            "type": "array"
          },
          "city": {
            "description": "The supplier's city.",
            "example": "Los Angeles",
            "nullable": true,
            "type": "string"
          },
          "contacts": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/SupplierContact"
            },
            "nullable": true,
            "type": "array"
          },
          "countryCode": {
            "description": "The supplier's country (ISO code).",
            "example": "US",
            "nullable": true,
            "type": "string"
          },
          "customInformation": {
            "additionalProperties": true,
            "nullable": true,
            "type": "object"
          },
          "externalId": {
            "description": "The supplier's external identifier. This must be unique within an organization and cannot be changed after creation",
            "example": "S33998",
            "type": "string"
          },
          "id": {
            "description": "The supplier's internal id.",
            "example": "uhmkC9zMzn",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The supplier's clear name.",
            "example": "Acme INC",
            "type": "string"
          },
          "secondaryName": {
            "description": "The supplier's name addition.",
            "example": "Department A",
            "nullable": true,
            "type": "string"
          },
          "shortName": {
            "description": "The supplier's short name for display.",
            "example": "Acme",
            "nullable": true,
            "type": "string"
          },
          "statusActive": {
            "type": "boolean"
          },
          "street": {
            "description": "The supplier's street.",
            "example": "Sunset Blvd",
            "nullable": true,
            "type": "string"
          },
          "taxNumber": {
            "description": "The supplier's official tax number.",
            "example": 1234,
            "nullable": true,
            "type": "string"
          },
          "url": {
            "description": "The supplier's web site.",
            "example": "www.acme.com",
            "nullable": true,
            "type": "string"
          },
          "zipCode": {
            "description": "The supplier's zip code.",
            "example": 12345,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "externalId",
          "name",
          "statusActive"
        ],
        "type": "object"
      },
      "Policy": {
        "properties": {
          "categoryIds": {
            "description": "The category ids associated to the policy.",
            "items": {
              "description": "The category's internal id.",
              "example": "9L7rovNzNhTCsJSTkbfq",
              "pattern": "[\\w-]+",
              "type": "string"
            },
            "type": "array"
          },
          "code": {
            "description": "The policy's code.",
            "example": "policy0",
            "type": "string"
          },
          "id": {
            "description": "The policy's internal id.",
            "example": "06x2u4nagAMEq3gGoMch",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The policy's name.",
            "example": "Employee Policy",
            "type": "string"
          },
          "statusActive": {
            "description": "Whether the policy is active.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "code",
          "categoryIds",
          "statusActive"
        ],
        "type": "object"
      },
      "PurchaseOrder": {
        "properties": {
          "currency": {
            "description": "The purchase order's currency",
            "example": "CHF",
            "type": "string"
          },
          "description": {
            "description": "A description of the purchase order.",
            "example": "This text describes the purchase order.",
            "nullable": true,
            "type": "string"
          },
          "externalId": {
            "description": "The purchase order's external id.",
            "example": "external-1234567890",
            "nullable": true,
            "type": "string"
          },
          "grossAmount": {
            "description": "The purchase order's gross amount. Calculated from the purchase order's line items.",
            "example": 35,
            "minimum": 0,
            "readOnly": true,
            "type": "number"
          },
          "id": {
            "description": "The purchase order's internal id.",
            "example": "9L7rovNzNhTCsJSTkbfq",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "items": {
            "description": "The purchase order's line items",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderItem"
            },
            "nullable": false,
            "type": "array"
          },
          "netAmount": {
            "description": "The purchase order's net amount. Calculated from the purchase order's line items.",
            "example": 34,
            "minimum": 0,
            "readOnly": true,
            "type": "number"
          },
          "paymentTermsId": {
            "description": "The payment terms associated with the purchase order. Must link to an existing Invoice Payment Terms' id",
            "nullable": true,
            "type": "string"
          },
          "purchaseOrderNumber": {
            "description": "The purchase order number.",
            "example": "1234567890",
            "type": "string"
          },
          "quantity": {
            "description": "Sum of quantites of the purchase order's line items.",
            "example": 123,
            "nullable": false,
            "readOnly": true,
            "type": "number"
          },
          "statusActive": {
            "description": "Whether the purchase order is active.",
            "example": true,
            "nullable": false,
            "type": "boolean"
          },
          "supplierId": {
            "description": "The internal id of the supplier associated with the purchase order. Must link to an existing entity supplier's ID",
            "example": "9L7rovNzNhTCsJSTkbfq",
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "validityEndDate": {
            "$ref": "#/components/schemas/DateString",
            "description": "The purchase orders validity end date",
            "nullable": true
          },
          "validityStartDate": {
            "$ref": "#/components/schemas/DateString",
            "description": "The purchase orders validity start date",
            "nullable": true
          }
        },
        "required": [
          "id",
          "purchaseOrderNumber",
          "supplierId",
          "statusActive",
          "currency",
          "items"
        ],
        "type": "object"
      },
      "PurchaseOrderItem": {
        "properties": {
          "categoryId": {
            "description": "Unique yokoy identifier of the invoice category associated with the line item. Must link to an existing invoice category ID",
            "example": "Y6cp2G30M",
            "nullable": true,
            "type": "string"
          },
          "costObjectId": {
            "description": "Unique yokoy identifier of the cost object associated with the line item. Must link to an existing cost object's ID",
            "example": "Y6cp2G30M",
            "type": "string"
          },
          "description": {
            "description": "A description of the purchase order line item.",
            "example": "This text describes the purchase order line item.",
            "nullable": true,
            "type": "string"
          },
          "eanupc": {
            "description": "EAN or UPC or barcode of the item.",
            "example": "1234 5678 90",
            "nullable": true,
            "type": "string"
          },
          "externalId": {
            "description": "The purchase order item's externalId.",
            "example": "external-1234567890",
            "nullable": true,
            "type": "string"
          },
          "grossAmount": {
            "description": "The purchase order items's gross amount.",
            "example": 35,
            "minimum": 0,
            "type": "number"
          },
          "id": {
            "description": "The purchase order items's internal id.\nFor new items, the system will generate the ID. For existing items, you can reference that id.\n",
            "example": "9L7rovNzNhTCsJSTkbfq",
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "itemNumber": {
            "description": "The purchase order item's number.",
            "example": "1234567890",
            "nullable": true,
            "type": "string"
          },
          "itemPrice": {
            "description": "The line item's per item price.",
            "minimum": 0,
            "nullable": true,
            "readOnly": false,
            "type": "number"
          },
          "materialId": {
            "description": "The ERP's identifier of the material associated with line item.",
            "nullable": true,
            "type": "string"
          },
          "netAmount": {
            "description": "The purchase order item's net amount.",
            "example": 34,
            "minimum": 0,
            "type": "number"
          },
          "quantity": {
            "description": "The purchase order item's quantity.",
            "example": 123,
            "minimum": 0,
            "nullable": false,
            "type": "number"
          },
          "requireGoodsReceipt": {
            "description": "Whether or not the Purchase order item expects the Goods receipt",
            "example": true,
            "type": "boolean"
          },
          "statusActive": {
            "description": "Whether the purchase order is active.",
            "example": true,
            "nullable": false,
            "type": "boolean"
          },
          "supplierMaterialId": {
            "description": "The Supplier's identifier of the material associated with line item.",
            "nullable": true,
            "type": "string"
          },
          "taxRateId": {
            "description": "Unique yokoy identifier of the tax rate associated with the line item. Must link to an existing tax rate ID",
            "example": "Y6cp2G30M",
            "nullable": true,
            "type": "string"
          },
          "unit": {
            "description": "The unit of the line item",
            "example": "kg",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Supplier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrganizationSupplier"
          },
          {
            "$ref": "#/components/schemas/LegalEntitySupplier"
          }
        ]
      },
      "SupplierContact": {
        "properties": {
          "email": {
            "description": "The contact's email.",
            "example": "peter.smith@acme.com",
            "type": "string"
          },
          "firstName": {
            "description": "The contact's first name.",
            "example": "Peter",
            "type": "string"
          },
          "lastName": {
            "description": "The contact's last name.",
            "example": "Smith",
            "type": "string"
          },
          "phone": {
            "description": "The contact's phone number.",
            "example": "+1 1234",
            "type": "string"
          },
          "role": {
            "description": "The contact's role in the supplier company.",
            "example": "Sales representative",
            "type": "string"
          }
        },
        "required": [
          "email",
          "firstName",
          "lastName",
          "phone",
          "role"
        ],
        "type": "object"
      },
      "Tag": {
        "properties": {
          "code": {
            "description": "The tag's account in the ERP system.",
            "example": "11",
            "type": "string"
          },
          "dimensionCode": {
            "description": "The dimension code associated to the tag.",
            "example": "countries",
            "type": "string"
          },
          "id": {
            "description": "The tag's internal id.",
            "example": "CP0YGe9VwzWixLOZdTK8",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The tag's clear name.",
            "example": "Italy",
            "type": "string"
          },
          "statusActive": {
            "description": "Whether the tag is active.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "code",
          "dimensionCode",
          "statusActive"
        ],
        "type": "object"
      },
      "TaxItem": {
        "properties": {
          "gross": {
            "description": "Gross amount subject to the indicated tax rate in expense currency.",
            "example": 150,
            "type": "number"
          },
          "rateId": {
            "description": "Yokoy's internal reference of the tax rate.",
            "example": "h9cQajbG",
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "tax": {
            "description": "tax amount in expense currency.",
            "example": 15,
            "type": "number"
          }
        },
        "type": "object"
      },
      "TaxRate": {
        "properties": {
          "accountReference": {
            "description": "The tax rates's account reference.",
            "example": "stdVatAccount",
            "type": "string"
          },
          "code": {
            "description": "The tax rates's code.",
            "example": "tax77",
            "type": "string"
          },
          "country": {
            "description": "The tax rates's country, ISO string.",
            "example": "CH",
            "type": "string"
          },
          "customInformation": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Dictionary of custom information associated to the tax rate.",
            "example": {
              "externalId": "Tax1"
            },
            "nullable": true,
            "type": "object"
          },
          "id": {
            "description": "The tax rate's internal id.",
            "example": "06x2u4nagAMEq3gGMoch",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The tax rates's name.",
            "example": "7.7% Standard Rate",
            "type": "string"
          },
          "rate": {
            "description": "The tax rates's numerical rate.",
            "example": 7.7,
            "type": "number"
          },
          "statusActive": {
            "description": "Whether the tax rate is active.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "code",
          "accountReference",
          "rate",
          "country",
          "statusActive"
        ],
        "type": "object"
      },
      "Trip": {
        "properties": {
          "created": {
            "description": "Datetime when the trip was created",
            "example": "Tue, 15 Nov 2022 17:08:45 GMT",
            "type": "string"
          },
          "currency": {
            "description": "Original trip currency as ISO4217 country currency code",
            "example": "EUR",
            "type": "string"
          },
          "customInformation": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Dictionary of custom information associated to the trip.",
            "example": {
              "bookingType": "ASDF1234"
            },
            "nullable": true,
            "type": "object"
          },
          "endDatetime": {
            "description": "End-datetime of the trip in format YYYY-MM-DDThh:mm.",
            "example": "2023-06-14T23:11",
            "type": "string"
          },
          "id": {
            "description": "The trip's internal id.",
            "example": "uhmkC9zMzn",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "lastModified": {
            "description": "Datetime when the trip was last modified",
            "example": "Tue, 15 Nov 2022 17:08:45 GMT",
            "type": "string"
          },
          "legalEntityId": {
            "description": "The internal legal entity id identifying the legal entity to which the trip is assigned",
            "example": "aB9jQoE3HE",
            "type": "string"
          },
          "name": {
            "description": "Name or short description of the trip (free text descriptions added by users).",
            "example": "Business travel to NYC",
            "type": "string"
          },
          "startDatetime": {
            "description": "Start-datetime of the trip in format YYYY-MM-DDThh:mm.",
            "example": "2023-06-14T23:11",
            "type": "string"
          },
          "status": {
            "description": "Trip status reflecting the overall status of all expenses assigned to the trip",
            "enum": [
              "draft",
              "needsRevision",
              "forApproval",
              "forReview",
              "forExpenseExport",
              "rejected",
              "expenseExported",
              "forTransactionExport",
              "transactionExported",
              "readyForTripSubmission",
              "travelDraft",
              "tripPreApprovalDraft",
              "tripPreApprovalNeedsRevision",
              "tripPreApprovalInPreApproval",
              "tripPreApprovalPreApproved",
              "tripPreApprovalRejected"
            ],
            "example": "draft",
            "type": "string"
          },
          "totalClaim": {
            "description": "Total claim of the trip",
            "example": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "userId": {
            "description": "The internal user id",
            "example": "h9cQajbG",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        "required": [
          "id",
          "status",
          "totalClaim"
        ],
        "type": "object"
      },
      "User": {
        "properties": {
          "costCenterId": {
            "description": "The internal cost center id of the associated cost center.",
            "example": "uhmkC9zMzn",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "customInformation": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Dictionary of custom information associated to the user.",
            "example": {
              "externalId": "E111"
            },
            "nullable": true,
            "type": "object"
          },
          "email": {
            "description": "The user's email address, used to log into the Yokoy tool.",
            "example": "peter.smith@company.com",
            "format": "email",
            "type": "string"
          },
          "employeeId": {
            "description": "The creditor account number of the user.",
            "example": 5599,
            "type": "string"
          },
          "firstName": {
            "description": "The user's given name.",
            "example": "Peter",
            "type": "string"
          },
          "id": {
            "description": "The user's internal id.",
            "example": "Y6cp2G30M",
            "pattern": "[\\w-]+",
            "readOnly": true,
            "type": "string"
          },
          "invitationOnCreation": {
            "description": "Whether the user is supposed to be invited when created or activated.",
            "example": false,
            "nullable": true,
            "type": "boolean"
          },
          "language": {
            "description": "The user's preferred language for using Yokoy.",
            "enum": [
              "de",
              "de-ch",
              "en",
              "en-gb",
              "fr"
            ],
            "example": "en",
            "nullable": true,
            "type": "string"
          },
          "lastName": {
            "description": "The user's family name.",
            "example": "Smith",
            "type": "string"
          },
          "legalEntityId": {
            "description": "The internal legal entity id identifying the user's legal entity.",
            "example": "aB9jQoE3HE",
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "lineManagerId": {
            "description": "The internal user id of the user acting as the user's line manager.",
            "example": "OYwMfJJcAdOtUvT292a7",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "lineManagerThreshold": {
            "description": "Approval limit in legal entity currency.",
            "example": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "policyId": {
            "description": "The internal policy id of the associated employee policy id.",
            "example": "0QP9qtsCUJ1rkt5s6qtI",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          },
          "statusActive": {
            "description": "Whether the user is active, i.e. can log into Yokoy.",
            "example": true,
            "type": "boolean"
          },
          "submissionDelegateId": {
            "description": "The internal user id of the user acting as the user's submission delegate.",
            "example": "IfukBQl9lopuuwJRASnS",
            "nullable": true,
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "legalEntityId",
          "email",
          "employeeId",
          "statusActive"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "description": "Authentication to the Yokoy API relies on the standard OAuth2\nclient credentials flow.\n\n1. Obtain an access token\n\nPerform a `POST` request to\n`https://accounts.yokoy.ai/oauth2/token`. Pass the client id\nand client secret as username and password in a basic auth\nheader. Set the content-type to\n`application/x-www-form-urlencoded` and specify\n`grant_type=client_credentials` in the body.\n\n> Note: For the test environment, use the url\n> `https://accounts.test.yokoy.ai/oauth2/token` instead.\n\nExample request for the client id `ClientId` and client\nsecret `ClientSecret`:\n```\nPOST https://accounts.yokoy.ai/oauth2/token\nAuthorization: Basic Q2xpZW50SWQ6Q2xpZW50U2VjcmV0\nContent-Type: application/x-www-form-urlencoded\ngrant_type=client_credentials\n```\nIn this example, the string `Q2xpZW50SWQ6Q2xpZW50U2VjcmV0` is\nobtained by base64-encoding the string\n`ClientId:ClientSecret`, as required for basic access authentication.\n\n> Note: Yokoy neither requires nor uses specifications of\n> scopes.\n\nThe JSON response contains the access token in the attribute\n`access_token`. The response also contains the expiration in\nseconds.\n\nExample response:\n```\n{\n    \"access_token\": \"4lDvPkrBF87WHuyvlINQD\",\n    \"expires_in\": 3900,\n    \"token_type\": \"Bearer\"\n}\n```\n\n2. Pass the access token from step 1 as a bearer token in\nsubsequent requests to the API.\n\nExample header field for the example response from step 1:\n```\nAuthorization: Bearer 4lDvPkrBF87WHuyvlINQD\n```\n",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://accounts[.test].yokoy.ai/oauth2/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "description": "Public API of the Yokoy Application",
    "title": "Yokoy API",
    "version": "1.7.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/expenses": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "id eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "expenses": {
                      "items": {
                        "$ref": "#/components/schemas/Expense"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all expenses.",
        "tags": [
          "Expense"
        ]
      },
      "parameters": [
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/expenses/{expenseId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expense"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns an expense by internal ID.",
        "tags": [
          "Expense"
        ]
      },
      "parameters": [
        {
          "description": "The expense's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "expenseId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/legal-entities": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "legalEntities": {
                      "items": {
                        "$ref": "#/components/schemas/LegalEntity"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all legal entities.",
        "tags": [
          "LegalEntity"
        ]
      },
      "parameters": [
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/legal-entities/{legalEntityId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns a legal entity by internal ID.",
        "tags": [
          "LegalEntity"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/legal-entities/{legalEntityId}/categories": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "categories": {
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all categories belonging to the legal entity identified in the path.",
        "tags": [
          "Expense Category"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Creates a new category and returns the created entity.",
        "tags": [
          "Expense Category"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/categories/{categoryId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns a category by internal ID.",
        "tags": [
          "Expense Category"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The category's internal id, assigned by Yokoy.",
          "example": "9L7rovNzNhTCsJSTkbfq",
          "in": "path",
          "name": "categoryId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "Dictionary of Category attributes to update. Explicit null values mark attributes for deletion.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a category, identified by internal ID, by replacing some attributes. The whole entity is returned.",
        "tags": [
          "Expense Category"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a category, identified by internal ID, by replacing all attributes. The whole entity is returned.",
        "tags": [
          "Expense Category"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/company-cards": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "companyCards": {
                      "items": {
                        "$ref": "#/components/schemas/CompanyCard"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all company cards belonging to the legal entity identified in the path.",
        "tags": [
          "CompanyCard"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyCard"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Creates a new company card and returns the created entity.",
        "tags": [
          "CompanyCard"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/company-cards/{companyCardId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyCard"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns a company card by internal ID.",
        "tags": [
          "CompanyCard"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The company card's internal id, assigned by Yokoy.",
          "example": "Y6c2p3G0x",
          "in": "path",
          "name": "companyCardId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "Dictionary of CompanyCard attributes to update. Explicit null values mark attributes for deletion.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyCard"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a company card, identified by internal ID, by replacing some attributes. The whole entity is returned.",
        "tags": [
          "CompanyCard"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyCard"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a company card, identified by internal ID, by replacing all attributes. The whole entity is returned.",
        "tags": [
          "CompanyCard"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/cost-centers": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "costCenters": {
                      "items": {
                        "$ref": "#/components/schemas/CostCenter"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all cost centers belonging to the legal entity identified in the path.",
        "tags": [
          "CostCenter"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CostCenter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenter"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Creates a new cost center and returns the created entity.",
        "tags": [
          "CostCenter"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/cost-centers/{costCenterId}": {
      "delete": {
        "responses": {
          "204": {
            "description": "CostCenter deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Deletes a cost center by internal ID.",
        "tags": [
          "CostCenter"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenter"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns a cost center by internal ID.",
        "tags": [
          "CostCenter"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The cost center's internal id, assigned by Yokoy.",
          "example": "uhmkC9zMzn",
          "in": "path",
          "name": "costCenterId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "Dictionary of CostCenter attributes to update. Explicit null values mark attributes for deletion.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenter"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a cost center, identified by internal ID, by replacing some attributes. The whole entity is returned.",
        "tags": [
          "CostCenter"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CostCenter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenter"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a cost center, identified by internal ID, by replacing all attributes. The whole entity is returned.",
        "tags": [
          "CostCenter"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/expense-export-facilities/{exportFacility}/export-tasks": {
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The expense export facility (the type of expenses to be exported).",
          "in": "path",
          "name": "exportFacility",
          "required": true,
          "schema": {
            "enum": [
              "expense",
              "card",
              "travel"
            ],
            "example": "expense",
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "documentIds": {
                    "description": "List of internal expense document ids to be exported (only considered if exportScope \"documentIds\" is selected).",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "earliestPostingDate": {
                    "description": "Earliest allowed posting date. For expenses with an earlier posting date, the posting date is replaced with the earliest allowed posting date (to avoid posting to already closed books).",
                    "example": "2023-03-31",
                    "pattern": "\\d{4}-\\d{2}-\\d{2}",
                    "type": "string"
                  },
                  "exportScope": {
                    "description": "Selection approach for the expenses to be exported. Either all expenses in scope of the export facility that are ready for export are exported (\"all\") or a determined set of expenses specified by their internal document id (\"documentIds\") is exported.",
                    "enum": [
                      "all",
                      "documentIds"
                    ],
                    "example": "all",
                    "type": "string"
                  },
                  "exporterId": {
                    "description": "The user's internal id on behalf of which the export is executed. The user needs to have the finance role for the legal entity to trigger an export.",
                    "example": "zbRCb62OlcF8WcuOKVs9",
                    "type": "string"
                  }
                },
                "required": [
                  "exportScope",
                  "exporterId",
                  "earliestPostingDate"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "resource": {
                      "description": "task id of the export",
                      "example": "h6tplNlvNxnHUpeAwd7D",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "204": {
            "description": "Nothing to export"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Triggers an expense export in Yokoy and returns the exportTaskId (id of the export).",
        "tags": [
          "Finance Export"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/export-tasks/{exportTaskId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpenseExportTaskInformation"
                    },
                    {
                      "$ref": "#/components/schemas/InvoiceExportTaskInformation"
                    }
                  ]
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns the status of the asynchronous export job.",
        "tags": [
          "Finance Export"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The export id as returned when triggering the export.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "exportTaskId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/legal-entities/{legalEntityId}/export-tasks/{exportTaskId}/artefacts": {
      "get": {
        "responses": {
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns the export artefacts in case the selected export facility supports this feature.",
        "tags": [
          "Finance Export"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The export task's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "exportTaskId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/legal-entities/{legalEntityId}/invoice-categories": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "invoice-categories": {
                      "items": {
                        "$ref": "#/components/schemas/InvoiceCategory"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all invoice categories belonging to the legal entity identified in the path.",
        "tags": [
          "Invoice Category"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceCategory"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Creates a new invoice category and returns the created entity.",
        "tags": [
          "Invoice Category"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/invoice-categories/{categoryId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceCategory"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns an invoice category by internal ID.",
        "tags": [
          "Invoice Category"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The invoice category's internal id, assigned by Yokoy.",
          "example": "9L7rovNzNhTCsJSTkbfq",
          "in": "path",
          "name": "categoryId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "Dictionary of Invoice Category attributes to update. Explicit null values mark attributes for deletion.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceCategory"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a category, identified by internal ID, by replacing some attributes. The whole entity is returned.",
        "tags": [
          "Invoice Category"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceCategory"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates an invoice category, identified by internal ID, by replacing all attributes. The whole entity is returned.",
        "tags": [
          "Invoice Category"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/invoice-export-facilities/{exportFacility}/export-tasks": {
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The invoice export facility id that can be found under Admin > Integrations > Supplier invoices export, opening the wizard for the required export facility.\n\nThis export facility must be active in Yokoy.\n",
          "example": "dfP59n4vLVvO6KWj27pS",
          "in": "path",
          "name": "exportFacility",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout the handling of the request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "documentIds": {
                    "description": "List of internal invoice document ids to be exported (only considered if exportScope \"documentIds\" is selected)",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "earliestPostingDate": {
                    "description": "Earliest allowed posting date. For invoices with an earlier posting date, the posting date is replaced with the earliest allowed posting date (to avoid posting to already closed books).",
                    "example": "2023-03-31",
                    "pattern": "\\d{4}-\\d{2}-\\d{2}",
                    "type": "string"
                  },
                  "exportScope": {
                    "description": "Selection approach for the invoices to be exported. Either all invoices in scope of the export facility that are ready for export are exported (\"all\") or a determined set of invoices specified by their internal document id (\"documentIds\") is exported.",
                    "enum": [
                      "all",
                      "documentIds"
                    ],
                    "example": "all",
                    "type": "string"
                  },
                  "exporterId": {
                    "description": "The user's internal id on behalf of which the export is executed. The user needs to have the finance role for the legal entity to trigger an export.",
                    "example": "zbRCb62OlcF8WcuOKVs9",
                    "type": "string"
                  }
                },
                "required": [
                  "exportScope",
                  "exporterId",
                  "earliestPostingDate"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "resource": {
                      "description": "task id of the export",
                      "example": "h6tplNlvNxnHUpeAwd7D",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "204": {
            "description": "Nothing to export"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Triggers an invoice export in Yokoy and returns the exportTaskId (id of the export).",
        "tags": [
          "Finance Export"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/invoice-goods-receipts": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "invoice-goods-receipts": {
                      "items": {
                        "$ref": "#/components/schemas/GoodsReceipt"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all goods receipt belonging to the legal entity identified in the path.",
        "tags": [
          "Invoice Goods Receipt"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoodsReceipt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoodsReceipt"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Creates a new invoice goods receipt and returns the created entity.",
        "tags": [
          "Invoice Goods Receipt"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/invoice-goods-receipts/{goodsReceiptId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoodsReceipt"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns an invoice goods receipt by internal ID.",
        "tags": [
          "Invoice Goods Receipt"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The invoice goods receipt's internal id, assigned by Yokoy.",
          "example": "9L7rovNzNhTCsJSTkbfq",
          "in": "path",
          "name": "goodsReceiptId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "Dictionary of Invoice goods receipt attributes to update. Explicit null values mark attributes for deletion.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoodsReceipt"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a invoice goods receipt, identified by internal ID, by replacing some attributes. The whole entity is returned.",
        "tags": [
          "Invoice Goods Receipt"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoodsReceipt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoodsReceipt"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates an invoice goods receipt, identified by internal ID, by replacing all attributes. The whole entity is returned.",
        "tags": [
          "Invoice Goods Receipt"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/invoice-payment-terms": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "invoice-payment-terms": {
                      "items": {
                        "$ref": "#/components/schemas/InvoicePaymentTerms"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all payment terms belonging to the legal entity identified in the path.",
        "tags": [
          "Invoice Payment Terms"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoicePaymentTerms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicePaymentTerms"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Creates a new invoice payment term and returns the created entity.",
        "tags": [
          "Invoice Payment Terms"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/invoice-payment-terms/{paymentTermId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicePaymentTerms"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns an invoice payment term by internal ID.",
        "tags": [
          "Invoice Payment Terms"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The invoice payment term's internal id, assigned by Yokoy.",
          "example": "9L7rovNzNhTCsJSTkbfq",
          "in": "path",
          "name": "paymentTermId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "Dictionary of Invoice Payment Terms attributes to update. Explicit null values mark attributes for deletion.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicePaymentTerms"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a invoice payment terms, identified by internal ID, by replacing some attributes. The whole entity is returned.",
        "tags": [
          "Invoice Payment Terms"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoicePaymentTerms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicePaymentTerms"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates an invoice payment term, identified by internal ID, by replacing all attributes. The whole entity is returned.",
        "tags": [
          "Invoice Payment Terms"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/invoice-purchase-orders": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "invoice-purchase-orders": {
                      "items": {
                        "$ref": "#/components/schemas/PurchaseOrder"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all purchase orders belonging to the legal entity identified in the path.",
        "tags": [
          "Invoice Purchase Order"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Creates a new purchase order and returns the created entity.",
        "tags": [
          "Invoice Purchase Order"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/invoice-purchase-orders/{purchaseOrderId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns an invoice purchase order by internal ID.",
        "tags": [
          "Invoice Purchase Order"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The invoice purchase order's internal id, assigned by Yokoy.",
          "example": "9L7rovNzNhTCsJSTkbfq",
          "in": "path",
          "name": "purchaseOrderId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "Dictionary of Invoice Purchase Order attributes to update. Explicit null values mark attributes for deletion.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a invoice purchase order, identified by internal ID, by replacing some attributes. The whole entity is returned.",
        "tags": [
          "Invoice Purchase Order"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates an invoice purchase order, identified by internal ID, by replacing all attributes. The whole entity is returned.",
        "tags": [
          "Invoice Purchase Order"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/invoices": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "invoices": {
                      "items": {
                        "$ref": "#/components/schemas/Invoice"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all invoices belonging to the legal entity identified in the path.",
        "tags": [
          "Invoice"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Creates a new invoice and returns the created entity.",
        "tags": [
          "Invoice"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/invoices/upload": {
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Uploads a new invoice to be processed by the Yokoy AI. A lot of fields will be empty at the start but will be updated once the AI has run.\n",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "encoding": {
                "file": {
                  "contentType": "application/pdf"
                }
              },
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "required": [
                  "file"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Uploads a new invoice to be processed by the Yokoy AI",
        "tags": [
          "Invoice"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/invoices/{invoiceId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns an invoice by internal ID.",
        "tags": [
          "Invoice"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The invoice's internal id, assigned by Yokoy.",
          "example": "9L7rovNzNhTCsJSTkbfq",
          "in": "path",
          "name": "invoiceId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/legal-entities/{legalEntityId}/invoices/{invoiceId}/presentation": {
      "get": {
        "description": "Downloads the supplier invoice file in PDF format\n",
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Invoice file in PDF format"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Downloads the supplier invoice file in PDF format",
        "tags": [
          "Invoice"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The supplier invoice's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "invoiceId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/legal-entities/{legalEntityId}/policies": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "policies": {
                      "items": {
                        "$ref": "#/components/schemas/Policy"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all policies belonging to the legal entity identified in the path.",
        "tags": [
          "Policy"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Creates a new policy and returns the created entity.",
        "tags": [
          "Policy"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/policies/{policyId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns a policy by internal ID.",
        "tags": [
          "Policy"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The policy's internal id, assigned by Yokoy.",
          "example": "06x2u4nagAMEq3gGoMch",
          "in": "path",
          "name": "policyId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "Dictionary of Policy attributes to update. Explicit null values mark attributes for deletion.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a policy, identified by internal ID, by replacing some attributes. The whole entity is returned.",
        "tags": [
          "Policy"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a policy, identified by internal ID, by replacing all attributes. The whole entity is returned.",
        "tags": [
          "Policy"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/suppliers": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "suppliers": {
                      "items": {
                        "$ref": "#/components/schemas/Supplier"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all suppliers of a legal entity",
        "tags": [
          "Invoice Supplier"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LegalEntitySupplier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supplier"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Adds a specific organization supplier to an entity with entity specific information.",
        "tags": [
          "Invoice Supplier"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/suppliers/{supplierId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supplier"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns a supplier based on internal Yokoy id.",
        "tags": [
          "Invoice Supplier"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The legal entity supplier's internal id, assigned by Yokoy.",
          "example": "9L7rovNzNhTCsJSTkbfq",
          "in": "path",
          "name": "supplierId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LegalEntitySupplier",
                "additionalProperties": true,
                "description": "Organization supplier to be patched first, followed by this entity supplier patch to update all relevant fields. Explicit null values mark attributes for deletion.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supplier"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates an entity supplier, identified by internal ID, by replacing some entity specific attributes. The whole entity is returned.",
        "tags": [
          "Invoice Supplier"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LegalEntitySupplier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supplier"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates an entity supplier, identified by internal ID, by replacing all entity specific attributes. The whole entity is returned.",
        "tags": [
          "Invoice Supplier"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/tags": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tags": {
                      "items": {
                        "$ref": "#/components/schemas/Tag"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all tags belonging to the legal entity identified in the path.",
        "tags": [
          "Tag"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Creates a new tag and returns the created entity.",
        "tags": [
          "Tag"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/tags/{tagId}": {
      "delete": {
        "responses": {
          "204": {
            "description": "Tag deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Deletes a tag by internal ID.",
        "tags": [
          "Tag"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns a tag by internal ID.",
        "tags": [
          "Tag"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The tag's internal id, assigned by Yokoy.",
          "example": "CP0YGe9VwzWixLOZdTK8",
          "in": "path",
          "name": "tagId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "Dictionary of Tag attributes to update. Explicit null values mark attributes for deletion.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a tag, identified by internal ID, by replacing some attributes. The whole entity is returned.",
        "tags": [
          "Tag"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a tag, identified by internal ID, by replacing all attributes. The whole entity is returned.",
        "tags": [
          "Tag"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/tax-rates": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "taxRates": {
                      "items": {
                        "$ref": "#/components/schemas/TaxRate"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all tax rates belonging to the legal entity identified in the path.",
        "tags": [
          "TaxRate"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRate"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Creates a new tax rate and returns the created entity.",
        "tags": [
          "TaxRate"
        ]
      }
    },
    "/legal-entities/{legalEntityId}/tax-rates/{taxRateId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRate"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns a tax rate by internal ID.",
        "tags": [
          "TaxRate"
        ]
      },
      "parameters": [
        {
          "description": "The legal entity's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "legalEntityId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "description": "The tax rate's internal id, assigned by Yokoy.",
          "example": "06x2u4nagAMEq3gGMoch",
          "in": "path",
          "name": "taxRateId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "Dictionary of Tax Rate attributes to update. Explicit null values mark attributes for deletion.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRate"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a tax rate, identified by internal ID, by replacing some attributes. The whole entity is returned.",
        "tags": [
          "TaxRate"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRate"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a tax rate, identified by internal ID, by replacing all attributes. The whole entity is returned.",
        "tags": [
          "TaxRate"
        ]
      }
    },
    "/suppliers": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "organization-suppliers": {
                      "items": {
                        "$ref": "#/components/schemas/OrganizationSupplier"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all organization level suppliers of an organization",
        "tags": [
          "Invoice Supplier"
        ]
      },
      "parameters": [
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Creates a new organization supplier and returns the created entity. \nAn organization supplier is the basic information of a supplier but not linked to any entity.\nThis supplier will not show up in the app, it needs to be created in a legal entity as well in legal-entities/{legalEntityId}/suppliers\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSupplier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSupplier"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Creates a new organization supplier and returns the created entity.",
        "tags": [
          "Invoice Supplier"
        ]
      }
    },
    "/suppliers/{supplierId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSupplier"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns an organization supplier based on internal Yokoy id.",
        "tags": [
          "Invoice Supplier"
        ]
      },
      "parameters": [
        {
          "description": "The organization supplier's internal id, assigned by Yokoy.",
          "example": "9L7rovNzNhTCsJSTkbfq",
          "in": "path",
          "name": "supplierId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "Dictionary of Organization Supplier attributes to update. Explicit null values mark attributes for deletion.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSupplier"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a organization supplier, identified by internal ID, by replacing some attributes. The whole entity is returned.",
        "tags": [
          "Invoice Supplier"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSupplier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSupplier"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: name has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates an organization supplier, identified by internal ID, by replacing all attributes. The whole entity is returned.",
        "tags": [
          "Invoice Supplier"
        ]
      }
    },
    "/trips": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "id eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "trips": {
                      "items": {
                        "$ref": "#/components/schemas/Trip"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all trips.",
        "tags": [
          "Trip"
        ]
      },
      "parameters": [
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/trips/{tripId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trip"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns an trip by internal ID.",
        "tags": [
          "Trip"
        ]
      },
      "parameters": [
        {
          "description": "The trip's internal id.",
          "example": "aB9jQoE3HE",
          "in": "path",
          "name": "tripId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users": {
      "get": {
        "parameters": [
          {
            "description": "A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).",
            "example": "code eq \"12345\" and customInformation.customField ew foo",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "users": {
                      "items": {
                        "$ref": "#/components/schemas/User"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "Invalid filter string: foo e bar"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns all users.",
        "tags": [
          "User"
        ]
      },
      "parameters": [
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: email has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Creates a new user and returns the created entity.",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{userId}": {
      "delete": {
        "responses": {
          "204": {
            "description": "User deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Deletes a user by internal ID.",
        "tags": [
          "User"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Returns a user by internal ID.",
        "tags": [
          "User"
        ]
      },
      "parameters": [
        {
          "description": "The user's internal id, assigned by Yokoy.",
          "example": "Y6cp2G30M",
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "pattern": "[\\w-]+",
            "type": "string"
          }
        },
        {
          "example": "yokoy",
          "in": "header",
          "name": "X-Yk-Auth-Method",
          "required": true,
          "schema": {
            "enum": [
              "yokoy"
            ],
            "type": "string"
          }
        },
        {
          "description": "Correlation id to use throughout handling of request",
          "example": "4ea8985e-80a2-40a0-8a40-401a1a1374b3",
          "in": "header",
          "name": "X-Yk-Correlation-Id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "Dictionary of User attributes to update. Explicit null values mark attributes for deletion.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: email has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a user, identified by internal ID, by replacing some attributes. The whole entity is returned.",
        "tags": [
          "User"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": 400,
                  "message": "ValidationError: email has to be set"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The request was not valid."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "summary": "Updates a user, identified by internal ID, by replacing all attributes. The whole entity is returned.",
        "tags": [
          "User"
        ]
      }
    }
  },
  "servers": [
    {
      "description": "API server scoped to organization with id organizationId",
      "url": "https://api.yokoy.ai/v1/organizations/{organizationId}",
      "variables": {
        "organizationId": {
          "default": "AbcDeF1234",
          "description": "Yokoy Organization ID"
        }
      }
    },
    {
      "description": "API test server scoped to organization with id organizationId",
      "url": "https://api.test.yokoy.ai/v1/organizations/{organizationId}",
      "variables": {
        "organizationId": {
          "default": "AbcDeF1234",
          "description": "Yokoy Organization ID"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "LegalEntity"
    },
    {
      "description": "Cost Centers, also called cost objects. These are applicable for both expenses, trips and invoices.",
      "name": "CostCenter"
    },
    {
      "name": "CompanyCard"
    },
    {
      "description": "Categories for expenses, also called booking accounts. These are only applicable for expenses and trips, not for invoices.",
      "name": "Expense Category"
    },
    {
      "name": "Policy"
    },
    {
      "description": "Tax rates. These are applicable for both expenses, trips and invoices.",
      "name": "TaxRate"
    },
    {
      "name": "Tag"
    },
    {
      "name": "User"
    },
    {
      "name": "Expense"
    },
    {
      "name": "Trip"
    },
    {
      "description": "Finance export mechanism in Yokoy. The public API exposes three different endpoints for the management of finance exports:\n1. /export-tasks to trigger an export (separate endpoints for the expense and the invoice module).\nThis action is equivalent to clicking the \"Export\" button under Finance > Export within the Yokoy application.\nAs a result of a successful export, the expenses/invoices are set to the exported state.\n2. /export-tasks/{exportTaskId} to poll the details (in particular the status) of the asynchronous export job.\n3. /export-tasks/{exportTaskId}/artefacts to fetch the artefacts for those export facilities that support this functionality.\n\nIn order to generate the standard Yokoy export artefacts, the export facility \"Yokoy Standard Export (API)\" must be selected in Yokoy (Admin > Integrations).\nThe data model of the standard export artefacts (ExpenseExportArtefact and InvoiceExportArtefact) is described in the <a href=\"https://api.yokoy.ai/v1/swagger.json\">following OpenAPI specification</a>.\n",
      "name": "Finance Export"
    },
    {
      "description": "Invoices within yokoy. In the public API, invoices can only be created or retrieved, never updated or deleted.\nTo update or delete invoices, please use the actual Yokoy app.\n",
      "name": "Invoice"
    },
    {
      "name": "Invoice Category"
    },
    {
      "name": "Invoice Payment Terms"
    },
    {
      "description": "Suppliers are the other party for invoices. They have information on the name, address and bank accounts. \nThey can be configured in different legal entities, with defaults per entity.\nSuppliers must first be created on the organization level on `/suppliers` with their basic information.\nThen they need to be created on legal entity level on `/legal-entities/{entityId}/suppliers` with id organization supplier ID in `supplierId`.\n\nLegal Entity suppliers can be updated/created just for certain applicable fields (see documentation of the endpoint for more details). \nIn order to PATCH, POST or PUT Legal Entity Suppliers complete record (e.g. the name of the supplier, contact or banking information), the Organisation Suppliers endpoints need to be hit first. \nWith a subsequent call to the Legal Entity Supplier endpoint, Legal Entity suppliers will then be updated.\n",
      "name": "Invoice Supplier"
    },
    {
      "name": "Invoice Purchase Order"
    },
    {
      "name": "Invoice Goods Receipt"
    }
  ]
}
