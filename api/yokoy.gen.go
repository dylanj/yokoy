// Package yokoy provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// Defines values for EventLogEntryActionType.
const (
	EventLogEntryActionTypeApprove         EventLogEntryActionType = "approve"
	EventLogEntryActionTypeArchive         EventLogEntryActionType = "archive"
	EventLogEntryActionTypeBackToReview    EventLogEntryActionType = "backToReview"
	EventLogEntryActionTypeExport          EventLogEntryActionType = "export"
	EventLogEntryActionTypeExportReverted  EventLogEntryActionType = "exportReverted"
	EventLogEntryActionTypeForwardApproval EventLogEntryActionType = "forwardApproval"
	EventLogEntryActionTypeImported        EventLogEntryActionType = "imported"
	EventLogEntryActionTypeNeedsRevision   EventLogEntryActionType = "needsRevision"
	EventLogEntryActionTypeRecall          EventLogEntryActionType = "recall"
	EventLogEntryActionTypeReject          EventLogEntryActionType = "reject"
	EventLogEntryActionTypeRevertExport    EventLogEntryActionType = "revertExport"
	EventLogEntryActionTypeReview          EventLogEntryActionType = "review"
	EventLogEntryActionTypeSubmit          EventLogEntryActionType = "submit"
)

// Defines values for ExpenseExpenseType.
const (
	Mileage     ExpenseExpenseType = "mileage"
	PerDiem     ExpenseExpenseType = "perDiem"
	Receipt     ExpenseExpenseType = "receipt"
	Receiptless ExpenseExpenseType = "receiptless"
)

// Defines values for ExpensePaymentMethod.
const (
	CompanyCreditCard ExpensePaymentMethod = "companyCreditCard"
	PaidPrivately     ExpensePaymentMethod = "paidPrivately"
	TravelProvider    ExpensePaymentMethod = "travelProvider"
)

// Defines values for ExpenseStatus.
const (
	ExpenseStatusDraft                  ExpenseStatus = "draft"
	ExpenseStatusExpenseExported        ExpenseStatus = "expenseExported"
	ExpenseStatusForApproval            ExpenseStatus = "forApproval"
	ExpenseStatusForExpenseExport       ExpenseStatus = "forExpenseExport"
	ExpenseStatusForReview              ExpenseStatus = "forReview"
	ExpenseStatusForTransactionExport   ExpenseStatus = "forTransactionExport"
	ExpenseStatusNeedsRevision          ExpenseStatus = "needsRevision"
	ExpenseStatusReadyForTripSubmission ExpenseStatus = "readyForTripSubmission"
	ExpenseStatusRejected               ExpenseStatus = "rejected"
	ExpenseStatusTransactionExported    ExpenseStatus = "transactionExported"
	ExpenseStatusTravelDraft            ExpenseStatus = "travelDraft"
)

// Defines values for ExpenseExportTaskInformationResourceFacilityId.
const (
	ExpenseExportTaskInformationResourceFacilityIdCard    ExpenseExportTaskInformationResourceFacilityId = "card"
	ExpenseExportTaskInformationResourceFacilityIdExpense ExpenseExportTaskInformationResourceFacilityId = "expense"
	ExpenseExportTaskInformationResourceFacilityIdTravel  ExpenseExportTaskInformationResourceFacilityId = "travel"
)

// Defines values for ExpenseExportTaskInformationResourceMethod.
const (
	ExpenseExportTaskInformationResourceMethodApi       ExpenseExportTaskInformationResourceMethod = "api"
	ExpenseExportTaskInformationResourceMethodAutomatic ExpenseExportTaskInformationResourceMethod = "automatic"
	ExpenseExportTaskInformationResourceMethodManual    ExpenseExportTaskInformationResourceMethod = "manual"
)

// Defines values for InvoiceStatus.
const (
	InvoiceStatusDraft          InvoiceStatus = "draft"
	InvoiceStatusExported       InvoiceStatus = "exported"
	InvoiceStatusInApproval     InvoiceStatus = "inApproval"
	InvoiceStatusInReview       InvoiceStatus = "inReview"
	InvoiceStatusNeedsRevision  InvoiceStatus = "needsRevision"
	InvoiceStatusNew            InvoiceStatus = "new"
	InvoiceStatusReadyForExport InvoiceStatus = "readyForExport"
	InvoiceStatusRejected       InvoiceStatus = "rejected"
)

// Defines values for InvoiceExportTaskInformationResourceMethod.
const (
	InvoiceExportTaskInformationResourceMethodApi       InvoiceExportTaskInformationResourceMethod = "api"
	InvoiceExportTaskInformationResourceMethodAutomatic InvoiceExportTaskInformationResourceMethod = "automatic"
	InvoiceExportTaskInformationResourceMethodManual    InvoiceExportTaskInformationResourceMethod = "manual"
)

// Defines values for LegalEntityLanguage.
const (
	LegalEntityLanguageDe   LegalEntityLanguage = "de"
	LegalEntityLanguageDeCh LegalEntityLanguage = "de-ch"
	LegalEntityLanguageEn   LegalEntityLanguage = "en"
	LegalEntityLanguageEnGb LegalEntityLanguage = "en-gb"
	LegalEntityLanguageEs   LegalEntityLanguage = "es"
	LegalEntityLanguageFr   LegalEntityLanguage = "fr"
)

// Defines values for TripStatus.
const (
	TripStatusDraft                        TripStatus = "draft"
	TripStatusExpenseExported              TripStatus = "expenseExported"
	TripStatusForApproval                  TripStatus = "forApproval"
	TripStatusForExpenseExport             TripStatus = "forExpenseExport"
	TripStatusForReview                    TripStatus = "forReview"
	TripStatusForTransactionExport         TripStatus = "forTransactionExport"
	TripStatusNeedsRevision                TripStatus = "needsRevision"
	TripStatusReadyForTripSubmission       TripStatus = "readyForTripSubmission"
	TripStatusRejected                     TripStatus = "rejected"
	TripStatusTransactionExported          TripStatus = "transactionExported"
	TripStatusTravelDraft                  TripStatus = "travelDraft"
	TripStatusTripPreApprovalDraft         TripStatus = "tripPreApprovalDraft"
	TripStatusTripPreApprovalInPreApproval TripStatus = "tripPreApprovalInPreApproval"
	TripStatusTripPreApprovalNeedsRevision TripStatus = "tripPreApprovalNeedsRevision"
	TripStatusTripPreApprovalPreApproved   TripStatus = "tripPreApprovalPreApproved"
	TripStatusTripPreApprovalRejected      TripStatus = "tripPreApprovalRejected"
)

// Defines values for UserLanguage.
const (
	UserLanguageDe   UserLanguage = "de"
	UserLanguageDeCh UserLanguage = "de-ch"
	UserLanguageEn   UserLanguage = "en"
	UserLanguageEnGb UserLanguage = "en-gb"
	UserLanguageFr   UserLanguage = "fr"
)

// Defines values for PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONBodyExportScope.
const (
	PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONBodyExportScopeAll         PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONBodyExportScope = "all"
	PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONBodyExportScopeDocumentIds PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONBodyExportScope = "documentIds"
)

// Defines values for PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONBodyExportScope.
const (
	PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONBodyExportScopeAll         PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONBodyExportScope = "all"
	PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONBodyExportScopeDocumentIds PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONBodyExportScope = "documentIds"
)

// Category defines model for Category.
type Category struct {
	// AccountReference The category's account reference.
	AccountReference string `json:"accountReference"`

	// ChargeToEmployee Flag for usage in export.
	ChargeToEmployee *bool `json:"chargeToEmployee"`

	// CustomInformation Dictionary of custom information associated to the category.
	CustomInformation *map[string]string `json:"customInformation"`

	// Id The category's internal id.
	Id *string `json:"id,omitempty"`

	// Name The category's name.
	Name string `json:"name"`

	// StatusActive Whether the category is active.
	StatusActive bool `json:"statusActive"`
}

// CompanyCard defines model for CompanyCard.
type CompanyCard struct {
	// AccountReference The card's account reference.
	AccountReference string `json:"accountReference"`

	// CardReference The external reference to the company card.
	CardReference *string `json:"cardReference"`

	// Currency The card's currency, ISO code.
	Currency string `json:"currency"`

	// Description The card's description.
	Description *string `json:"description"`

	// Id The company card's internal id.
	Id *string `json:"id,omitempty"`

	// Name The card's name.
	Name string `json:"name"`

	// Number The card number. Any string can be supplied, only the last four characters, padded with stars, will be returned. Queries can only be made using the 'endswith' operator on four or less characters, e.g. 'number ew "1234"'.
	Number string `json:"number"`

	// OwnerId The internal user id identifying the card's owner.
	OwnerId string `json:"ownerId"`

	// StatusActive Whether the card is active.
	StatusActive bool `json:"statusActive"`
}

// CostCenter defines model for CostCenter.
type CostCenter struct {
	// ApprovalLimit Approval limit in legal entity currency.
	ApprovalLimit *float32 `json:"approvalLimit"`

	// ApproverId The internal user id identifying the cost center's approver.
	ApproverId *string `json:"approverId"`

	// AutoApprovalLimit Auto approval limit in legal entity currency.
	AutoApprovalLimit *float32 `json:"autoApprovalLimit"`

	// Code The account number associated to the cost center.
	Code string `json:"code"`

	// CustomInformation Dictionary of custom information associated to the cost center.
	CustomInformation *map[string]string `json:"customInformation"`

	// DelegateExpiry The expiry date and time of the cost center's delegate.
	DelegateExpiry *string `json:"delegateExpiry"`

	// DelegateId The internal user id identifying the cost center's delegate.
	DelegateId *string `json:"delegateId"`

	// Description The cost center's description.
	Description string `json:"description"`

	// Id The cost center's internal id.
	Id *string `json:"id,omitempty"`

	// Name The cost center's clear name.
	Name string `json:"name"`

	// ParentId The internal cost center id identifying the cost center's parent.
	ParentId *string `json:"parentId"`

	// StatusActive Whether the cost center is active.
	StatusActive bool `json:"statusActive"`
}

// CostCenterItem defines model for CostCenterItem.
type CostCenterItem struct {
	// Id Yokoy's internal reference of the cost center/cost object.
	Id *string `json:"id,omitempty"`

	// PctWeight Cost percentage assigned to the dedicated cost center/cost object.
	PctWeight *float32 `json:"pctWeight,omitempty"`
}

// DateRange defines model for DateRange.
type DateRange = []openapi_types.Date

// DateString defines model for DateString.
type DateString = openapi_types.Date

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// EventLogEntry defines model for EventLogEntry.
type EventLogEntry struct {
	// ActionType Event type.
	ActionType *EventLogEntryActionType `json:"actionType,omitempty"`

	// Comment comment provided by the user conducting the event.
	Comment *string `json:"comment,omitempty"`

	// Name Name of the user that conducted the event
	Name *string `json:"name"`

	// Timestamp Datetime of the event
	Timestamp *string `json:"timestamp,omitempty"`

	// UserId The internal user id
	UserId *string `json:"userId"`
}

// EventLogEntryActionType Event type.
type EventLogEntryActionType string

// Expense defines model for Expense.
type Expense struct {
	// AdditionalCharges Additional charges to be added to the total amount (example - tip, personal card fees, foreign exchange conversion fees).
	AdditionalCharges *float32 `json:"additionalCharges"`

	// ApproverIds List of users that have approved the expense
	ApproverIds *[]string `json:"approverIds,omitempty"`

	// CategoryId The internal category id (primary/first category tagged in the expense)
	CategoryId      *string           `json:"categoryId"`
	CostCenterItems *[]CostCenterItem `json:"costCenterItems"`

	// Country Country where expense occurred as ISO3166 Alpha-2 code
	Country *string `json:"country,omitempty"`

	// Created Datetime when the expense was created
	Created *string `json:"created,omitempty"`

	// Currency Original expense currency as ISO4217 country currency code
	Currency *string `json:"currency,omitempty"`

	// CurrentAproverIds List of users that currently need to approve the expense
	CurrentAproverIds *[]string `json:"currentAproverIds,omitempty"`

	// CustomInformation Dictionary of custom information associated to the expense.
	CustomInformation *map[string]string `json:"customInformation"`

	// Description Description including business purpose (free text descriptions added by users).
	Description *string          `json:"description,omitempty"`
	EventLog    *[]EventLogEntry `json:"eventLog"`

	// ExpenseDate Date when the expense occurred (date on receipt or invoice).
	ExpenseDate *string `json:"expenseDate,omitempty"`

	// ExpenseEndDate End date of an expense related to an extended stay (e.g. hotel stay, flight).
	ExpenseEndDate *string `json:"expenseEndDate,omitempty"`

	// ExpenseStartDate Start date of an expense related to an extended stay (e.g. hotel stay, flight).
	ExpenseStartDate *string `json:"expenseStartDate,omitempty"`

	// ExpenseType Expense type.
	ExpenseType *ExpenseExpenseType `json:"expenseType,omitempty"`

	// Id The expense's internal id.
	Id *string `json:"id,omitempty"`

	// IsCreditNote Returns true if the expense is a credit note (equivalent to negative expense amount)
	IsCreditNote *bool `json:"isCreditNote"`

	// LastModified Datetime when the expense was last modified
	LastModified *string `json:"lastModified,omitempty"`

	// LegalEntityId The internal legal entity id identifying the legal entity to which the expense is assigned
	LegalEntityId *string `json:"legalEntityId,omitempty"`

	// PaymentMethod Expense payment method.
	PaymentMethod *ExpensePaymentMethod `json:"paymentMethod,omitempty"`

	// PostingDate Date when expense is or shall be posted to the general ledger.
	PostingDate *string `json:"postingDate,omitempty"`

	// Status Expense status.
	Status ExpenseStatus `json:"status"`

	// Tags The tags associated with the expense
	Tags     *map[string]string `json:"tags"`
	TaxItems *[]TaxItem         `json:"taxItems"`

	// TaxNumber Merchant tax number extracted from the expense/invoice.
	TaxNumber *string `json:"taxNumber,omitempty"`

	// TotalAmount Expense amount in original expense currency (excluding additional charges)
	TotalAmount *float32 `json:"totalAmount"`

	// TotalClaim Total claim in original expense currency (including additional charges)
	TotalClaim *float32 `json:"totalClaim"`

	// TripId The internal trip id (primary/first category tagged in the expense)
	TripId *string `json:"tripId"`

	// UserId The internal user id
	UserId *string `json:"userId"`
}

// ExpenseExpenseType Expense type.
type ExpenseExpenseType string

// ExpensePaymentMethod Expense payment method.
type ExpensePaymentMethod string

// ExpenseStatus Expense status.
type ExpenseStatus string

// ExpenseExportTaskInformation defines model for ExpenseExportTaskInformation.
type ExpenseExportTaskInformation struct {
	Resource *struct {
		// Created Datetime when the export was triggered.
		Created *string `json:"created,omitempty"`

		// EarliestPostingDate Earliest allowed posting date specified for the export.
		EarliestPostingDate *string `json:"earliestPostingDate,omitempty"`

		// ExporterId The user's internal id on behalf of which the export was executed.
		ExporterId *string `json:"exporterId,omitempty"`

		// ExporterName The user's name last name on behalf of which the export was executed.
		ExporterName *string `json:"exporterName,omitempty"`

		// FacilityId Internal id of the export facility (corresponding to the expense type).
		FacilityId *ExpenseExportTaskInformationResourceFacilityId `json:"facilityId,omitempty"`

		// GeneratedFiles List of file names of additional files generated in the context of the export.
		GeneratedFiles *[]string `json:"generatedFiles,omitempty"`

		// Id Export task id.
		Id *string `json:"id,omitempty"`

		// IsPending Whether the export job is still pending
		IsPending *bool `json:"isPending,omitempty"`

		// Method Triggering method for the export.
		Method *ExpenseExportTaskInformationResourceMethod `json:"method,omitempty"`
	} `json:"resource,omitempty"`
}

// ExpenseExportTaskInformationResourceFacilityId Internal id of the export facility (corresponding to the expense type).
type ExpenseExportTaskInformationResourceFacilityId string

// ExpenseExportTaskInformationResourceMethod Triggering method for the export.
type ExpenseExportTaskInformationResourceMethod string

// GoodsReceipt defines model for GoodsReceipt.
type GoodsReceipt struct {
	// Amount The goods receipt's amount. Calculated from the inner items.
	Amount *float32 `json:"amount,omitempty"`

	// Currency The goods receipt's currency
	Currency string `json:"currency"`

	// ExternalId The goods receipt's external id.
	ExternalId *string `json:"externalId"`

	// GoodsReceiptNumber The goods receipt number.
	GoodsReceiptNumber string `json:"goodsReceiptNumber"`

	// Id The goods receipt's internal id.
	Id          *string            `json:"id,omitempty"`
	Items       []GoodsReceiptItem `json:"items"`
	PostingDate *DateString        `json:"postingDate,omitempty"`
}

// GoodsReceiptItem defines model for GoodsReceiptItem.
type GoodsReceiptItem struct {
	// Amount The goods receipt items's amount.
	Amount float32 `json:"amount"`

	// ExternalId The goods receipt item's externalId.
	ExternalId *string `json:"externalId"`

	// Id The goods receipt item's internal id.
	// For new items, the system will generate the ID. For existing items, you can reference that id.
	Id *string `json:"id,omitempty"`

	// ItemNumber The goods receipt item's number.
	ItemNumber *string `json:"itemNumber"`

	// ItemPrice The item's per item price.
	ItemPrice *float32 `json:"itemPrice"`

	// PurchaseOrderId The yokoy purchaseOrder identifier associated with the line item
	PurchaseOrderId string `json:"purchaseOrderId"`

	// PurchaseOrderItemId The yokoy purchaseOrderItem identifier associated with the line item
	PurchaseOrderItemId string `json:"purchaseOrderItemId"`

	// Quantity The goods receipt item's quantity.
	Quantity *float32 `json:"quantity,omitempty"`

	// StatusActive Whether the goods receipt is active.
	StatusActive bool `json:"statusActive"`

	// Unit The unit of the line item
	Unit *string `json:"unit"`
}

// Invoice defines model for Invoice.
type Invoice struct {
	BankAccount *InvoiceBankAccount `json:"bankAccount,omitempty"`

	// Country The invoice's country alpha 2 code as defined in in the ISO3166-1 standard
	Country *string `json:"country,omitempty"`

	// Currency The invoice's currency
	Currency *string `json:"currency,omitempty"`

	// CustomInformation Dictionary of custom information associated with the invoice.
	CustomInformation *map[string]string `json:"customInformation"`
	Date              *DateString        `json:"date,omitempty"`

	// DocumentData A base64 encoded string of the document related to the invoice.
	// This document will be uploaded and linked to the invoice.
	// However, the document will not be analyzed by the AI.
	// The document must be a PDF.
	DocumentData *string `json:"documentData,omitempty"`

	// GrossAmount The invoice's gross amount, aggregated from the invoice's line items
	GrossAmount *float32 `json:"grossAmount,omitempty"`

	// Id The invoice's internal id.
	Id *string `json:"id,omitempty"`

	// InvoiceNumber The invoice's number
	InvoiceNumber string `json:"invoiceNumber"`

	// IsCreditNote Whether or not the invoice is a credit note
	IsCreditNote *bool             `json:"isCreditNote"`
	LineItems    []InvoiceLineItem `json:"lineItems"`

	// NetAmount The invoices net amount, aggregated from the invoice's line items
	NetAmount *float32 `json:"netAmount,omitempty"`

	// PaymentTermId The yokoy identifier of the payment terms associated with the invoice
	PaymentTermId *string     `json:"paymentTermId"`
	PostingDate   *DateString `json:"postingDate,omitempty"`

	// PurchaseOrderIds Array of yokoy purchase order identifiers associated with the invoice
	PurchaseOrderIds *[]string `json:"purchaseOrderIds"`

	// ServiceDate The invoice's service date(s). If a single date is passed as a string then it describes that date.
	// Else if two dates are passed then it is considered a range of dates.
	ServiceDate *Invoice_ServiceDate `json:"serviceDate"`

	// Status The invoice's status id. The system manages this and cannot be changed directly.
	Status *InvoiceStatus `json:"status,omitempty"`

	// Submitters List of the user IDs who submitted the invoice or who will be responsible to code the invoice
	Submitters *[]string `json:"submitters"`

	// SupplierId Yokoy - identifier of the entity supplier associated with the invoice
	SupplierId *string `json:"supplierId"`

	// TaxableAmount The invoice's tayable amount, aggregated from the invoice's line items
	TaxableAmount *float32 `json:"taxableAmount"`
}

// Invoice_ServiceDate The invoice's service date(s). If a single date is passed as a string then it describes that date.
// Else if two dates are passed then it is considered a range of dates.
type Invoice_ServiceDate struct {
	union json.RawMessage
}

// InvoiceStatus The invoice's status id. The system manages this and cannot be changed directly.
type InvoiceStatus string

// InvoiceBankAccount defines model for InvoiceBankAccount.
type InvoiceBankAccount struct {
	// BankAccount The bank account number, often used if no IBAN exists
	BankAccount *string `json:"bankAccount"`

	// BankCountry The country of the bank
	BankCountry *string `json:"bankCountry"`

	// BankKey The Bank Key, also called branch code
	BankKey *string `json:"bankKey"`

	// BankNumber The Bank Number, also called bank code
	BankNumber *string `json:"bankNumber"`

	// ExternalId The bank connection's external id in ERP systems
	ExternalId *string `json:"externalId"`

	// Iban The Internal Bank Account Number
	Iban *string `json:"iban"`

	// SwiftCode The Swift code, also called the BIC
	SwiftCode *string `json:"swiftCode"`
}

// InvoiceCategory defines model for InvoiceCategory.
type InvoiceCategory struct {
	// AccountReference The invoice category's account reference.
	AccountReference string `json:"accountReference"`

	// CustomInformation Dictionary of custom information associated to the category.
	CustomInformation *map[string]string `json:"customInformation"`

	// Description The invoice category's description.
	Description *string `json:"description"`

	// Id The invoice category's internal id.
	Id *string `json:"id,omitempty"`

	// Name The invoice category's name.
	Name string `json:"name"`

	// StatusActive Whether the invoice category is active.
	StatusActive bool `json:"statusActive"`
}

// InvoiceExportTaskInformation defines model for InvoiceExportTaskInformation.
type InvoiceExportTaskInformation struct {
	Resource *struct {
		// Created Datetime when the export was triggered.
		Created *string `json:"created,omitempty"`

		// EarliestPostingDate Earliest allowed posting date specified for the export.
		EarliestPostingDate *string `json:"earliestPostingDate,omitempty"`

		// ExporterId The user's internal id on behalf of which the export was executed.
		ExporterId *string `json:"exporterId,omitempty"`

		// ExporterName The user's name last name on behalf of which the export was executed.
		ExporterName *string `json:"exporterName,omitempty"`

		// FacilityId Internal id of the export facility.
		FacilityId *string `json:"facilityId,omitempty"`

		// GeneratedFiles List of file names of additional files generated in the context of the export.
		GeneratedFiles *[]string `json:"generatedFiles,omitempty"`

		// Id Export task id.
		Id *string `json:"id,omitempty"`

		// IsPending Whether the export job is still pending
		IsPending *bool `json:"isPending,omitempty"`

		// Method Triggering method for the export.
		Method *InvoiceExportTaskInformationResourceMethod `json:"method,omitempty"`
	} `json:"resource,omitempty"`
}

// InvoiceExportTaskInformationResourceMethod Triggering method for the export.
type InvoiceExportTaskInformationResourceMethod string

// InvoiceLineItem defines model for InvoiceLineItem.
type InvoiceLineItem struct {
	// CategoryId Unique yokoy identifier of the invoice category associated with the line item
	CategoryId *string `json:"categoryId"`

	// CostObjectId Unique yokoy identifier of the cost object associated with the line item
	CostObjectId *string `json:"costObjectId"`

	// Description The description amount of the line item
	Description *string `json:"description"`

	// Gross The gross amount of the line item
	Gross float32 `json:"gross"`

	// ItemPrice The item price of the line item
	ItemPrice *float32 `json:"itemPrice"`

	// Net The net amount of the line item
	Net float32 `json:"net"`

	// PurchaseOrderId The yokoy purchaseOrder identifier associated with the line item
	PurchaseOrderId *string `json:"purchaseOrderId"`

	// PurchaseOrderItemId The yokoy purchaseOrderItem identifier associated with the line item
	PurchaseOrderItemId *string `json:"purchaseOrderItemId"`

	// Quantity The quantity of the line item
	Quantity *float32 `json:"quantity"`

	// Tags The tags associated with the line item
	Tags *map[string]string `json:"tags,omitempty"`

	// TaxRateId Unique yokoy identifier of the tax rate associated with the line item
	TaxRateId *string `json:"taxRateId"`

	// Unit The unit of the line item
	Unit *string `json:"unit"`
}

// InvoicePaymentTerms defines model for InvoicePaymentTerms.
type InvoicePaymentTerms struct {
	// Discounts List of a discounts if an invoice is payed within a given timeframe
	Discounts *[]struct {
		// Days Days within which the discount will be applicable
		Days *float32 `json:"days,omitempty"`

		// Discount Discount in percent of the invoice (5% == 5)
		Discount *float32 `json:"discount,omitempty"`
	} `json:"discounts"`

	// ExternalId The external reference to the payment term.
	ExternalId *string `json:"externalId"`

	// Id The invoice payment term's internal id.
	Id *string `json:"id,omitempty"`

	// Name The payment term's name.
	Name string `json:"name"`

	// NetPaymentPeriod Describes the duration within which a payment is required in days.
	NetPaymentPeriod float32 `json:"netPaymentPeriod"`
}

// LegalEntity defines model for LegalEntity.
type LegalEntity struct {
	Categories []struct {
		// AccountReference The category's account reference.
		AccountReference string `json:"accountReference"`

		// CustomInformation Dictionary of custom information associated to the category.
		CustomInformation *map[string]string `json:"customInformation"`

		// Id The category's internal id.
		Id *string `json:"id,omitempty"`

		// Name The category's name.
		Name string `json:"name"`

		// StatusActive Whether the category is active.
		StatusActive bool `json:"statusActive"`
	} `json:"categories"`

	// Code The legal entity's account in the ERP system.
	Code string `json:"code"`

	// Id The legal entity's internal id.
	Id *string `json:"id,omitempty"`

	// Language The legal entity's main language.
	Language LegalEntityLanguage `json:"language"`

	// Name The legal entity's name.
	Name     *string `json:"name,omitempty"`
	Policies []struct {
		// Code The policy's code.
		Code string `json:"code"`

		// Id The policy's internal id.
		Id *string `json:"id,omitempty"`

		// Name The policy's name.
		Name string `json:"name"`

		// StatusActive Whether the policy is active.
		StatusActive bool `json:"statusActive"`
	} `json:"policies"`
	TaxRates *[]struct {
		// Code The tax rates's code.
		Code string `json:"code"`

		// CustomInformation Dictionary of custom information associated to the tax rate.
		CustomInformation *map[string]string `json:"customInformation"`

		// Id The tax rate's internal id.
		Id *string `json:"id,omitempty"`

		// Name The tax rates's name.
		Name string `json:"name"`

		// StatusActive Whether the tax rate is active.
		StatusActive bool `json:"statusActive"`
	} `json:"taxRates"`
}

// LegalEntityLanguage The legal entity's main language.
type LegalEntityLanguage string

// LegalEntitySupplier defines model for LegalEntitySupplier.
type LegalEntitySupplier struct {
	CustomInformation *map[string]interface{} `json:"customInformation"`

	// DefaultApproverId The internal Yokoy id of the default approver.
	DefaultApproverId *string `json:"defaultApproverId"`

	// DefaultCategoryId The internal Yokoy id of the default invoice category.
	DefaultCategoryId *string `json:"defaultCategoryId"`

	// DefaultCostCenterId The internal Yokoy id of the default cost center.
	DefaultCostCenterId *string `json:"defaultCostCenterId"`

	// DefaultPaymentTermId The internal Yokoy id of the default payment term.
	DefaultPaymentTermId *string `json:"defaultPaymentTermId"`
	StatusActive         bool    `json:"statusActive"`

	// SupplierId The ID of the organization supplier to extend. Must reference an existing Organization level supplier
	SupplierId string `json:"supplierId"`
}

// OrganizationSupplier defines model for OrganizationSupplier.
type OrganizationSupplier struct {
	BankAccounts *[]InvoiceBankAccount `json:"bankAccounts"`

	// City The supplier's city.
	City     *string            `json:"city"`
	Contacts *[]SupplierContact `json:"contacts"`

	// CountryCode The supplier's country (ISO code).
	CountryCode       *string                 `json:"countryCode"`
	CustomInformation *map[string]interface{} `json:"customInformation"`

	// ExternalId The supplier's external identifier. This must be unique within an organization and cannot be changed after creation
	ExternalId string `json:"externalId"`

	// Id The supplier's internal id.
	Id *string `json:"id,omitempty"`

	// Name The supplier's clear name.
	Name string `json:"name"`

	// SecondaryName The supplier's name addition.
	SecondaryName *string `json:"secondaryName"`

	// ShortName The supplier's short name for display.
	ShortName    *string `json:"shortName"`
	StatusActive bool    `json:"statusActive"`

	// Street The supplier's street.
	Street *string `json:"street"`

	// TaxNumber The supplier's official tax number.
	TaxNumber *string `json:"taxNumber"`

	// Url The supplier's web site.
	Url *string `json:"url"`

	// ZipCode The supplier's zip code.
	ZipCode *string `json:"zipCode"`
}

// Policy defines model for Policy.
type Policy struct {
	// CategoryIds The category ids associated to the policy.
	CategoryIds []string `json:"categoryIds"`

	// Code The policy's code.
	Code string `json:"code"`

	// Id The policy's internal id.
	Id *string `json:"id,omitempty"`

	// Name The policy's name.
	Name string `json:"name"`

	// StatusActive Whether the policy is active.
	StatusActive bool `json:"statusActive"`
}

// PurchaseOrder defines model for PurchaseOrder.
type PurchaseOrder struct {
	// Currency The purchase order's currency
	Currency string `json:"currency"`

	// Description A description of the purchase order.
	Description *string `json:"description"`

	// ExternalId The purchase order's external id.
	ExternalId *string `json:"externalId"`

	// GrossAmount The purchase order's gross amount. Calculated from the purchase order's line items.
	GrossAmount *float32 `json:"grossAmount,omitempty"`

	// Id The purchase order's internal id.
	Id *string `json:"id,omitempty"`

	// Items The purchase order's line items
	Items []PurchaseOrderItem `json:"items"`

	// NetAmount The purchase order's net amount. Calculated from the purchase order's line items.
	NetAmount *float32 `json:"netAmount,omitempty"`

	// PaymentTermsId The payment terms associated with the purchase order. Must link to an existing Invoice Payment Terms' id
	PaymentTermsId *string `json:"paymentTermsId"`

	// PurchaseOrderNumber The purchase order number.
	PurchaseOrderNumber string `json:"purchaseOrderNumber"`

	// Quantity Sum of quantites of the purchase order's line items.
	Quantity *float32 `json:"quantity,omitempty"`

	// StatusActive Whether the purchase order is active.
	StatusActive bool `json:"statusActive"`

	// SupplierId The internal id of the supplier associated with the purchase order. Must link to an existing entity supplier's ID
	SupplierId        string      `json:"supplierId"`
	ValidityEndDate   *DateString `json:"validityEndDate,omitempty"`
	ValidityStartDate *DateString `json:"validityStartDate,omitempty"`
}

// PurchaseOrderItem defines model for PurchaseOrderItem.
type PurchaseOrderItem struct {
	// CategoryId Unique yokoy identifier of the invoice category associated with the line item. Must link to an existing invoice category ID
	CategoryId *string `json:"categoryId"`

	// CostObjectId Unique yokoy identifier of the cost object associated with the line item. Must link to an existing cost object's ID
	CostObjectId *string `json:"costObjectId,omitempty"`

	// Description A description of the purchase order line item.
	Description *string `json:"description"`

	// Eanupc EAN or UPC or barcode of the item.
	Eanupc *string `json:"eanupc"`

	// ExternalId The purchase order item's externalId.
	ExternalId *string `json:"externalId"`

	// GrossAmount The purchase order items's gross amount.
	GrossAmount *float32 `json:"grossAmount,omitempty"`

	// Id The purchase order items's internal id.
	// For new items, the system will generate the ID. For existing items, you can reference that id.
	Id *string `json:"id,omitempty"`

	// ItemNumber The purchase order item's number.
	ItemNumber *string `json:"itemNumber"`

	// ItemPrice The line item's per item price.
	ItemPrice *float32 `json:"itemPrice"`

	// MaterialId The ERP's identifier of the material associated with line item.
	MaterialId *string `json:"materialId"`

	// NetAmount The purchase order item's net amount.
	NetAmount *float32 `json:"netAmount,omitempty"`

	// Quantity The purchase order item's quantity.
	Quantity *float32 `json:"quantity,omitempty"`

	// RequireGoodsReceipt Whether or not the Purchase order item expects the Goods receipt
	RequireGoodsReceipt *bool `json:"requireGoodsReceipt,omitempty"`

	// StatusActive Whether the purchase order is active.
	StatusActive *bool `json:"statusActive,omitempty"`

	// SupplierMaterialId The Supplier's identifier of the material associated with line item.
	SupplierMaterialId *string `json:"supplierMaterialId"`

	// TaxRateId Unique yokoy identifier of the tax rate associated with the line item. Must link to an existing tax rate ID
	TaxRateId *string `json:"taxRateId"`

	// Unit The unit of the line item
	Unit *string `json:"unit"`
}

// Supplier defines model for Supplier.
type Supplier struct {
	BankAccounts *[]InvoiceBankAccount `json:"bankAccounts"`

	// City The supplier's city.
	City     *string            `json:"city"`
	Contacts *[]SupplierContact `json:"contacts"`

	// CountryCode The supplier's country (ISO code).
	CountryCode       *string                 `json:"countryCode"`
	CustomInformation *map[string]interface{} `json:"customInformation"`

	// DefaultApproverId The internal Yokoy id of the default approver.
	DefaultApproverId *string `json:"defaultApproverId"`

	// DefaultCategoryId The internal Yokoy id of the default invoice category.
	DefaultCategoryId *string `json:"defaultCategoryId"`

	// DefaultCostCenterId The internal Yokoy id of the default cost center.
	DefaultCostCenterId *string `json:"defaultCostCenterId"`

	// DefaultPaymentTermId The internal Yokoy id of the default payment term.
	DefaultPaymentTermId *string `json:"defaultPaymentTermId"`

	// ExternalId The supplier's external identifier. This must be unique within an organization and cannot be changed after creation
	ExternalId string `json:"externalId"`

	// Id The supplier's internal id.
	Id *string `json:"id,omitempty"`

	// Name The supplier's clear name.
	Name string `json:"name"`

	// SecondaryName The supplier's name addition.
	SecondaryName *string `json:"secondaryName"`

	// ShortName The supplier's short name for display.
	ShortName    *string `json:"shortName"`
	StatusActive bool    `json:"statusActive"`

	// Street The supplier's street.
	Street *string `json:"street"`

	// SupplierId The ID of the organization supplier to extend. Must reference an existing Organization level supplier
	SupplierId string `json:"supplierId"`

	// TaxNumber The supplier's official tax number.
	TaxNumber *string `json:"taxNumber"`

	// Url The supplier's web site.
	Url *string `json:"url"`

	// ZipCode The supplier's zip code.
	ZipCode *string `json:"zipCode"`
}

// SupplierContact defines model for SupplierContact.
type SupplierContact struct {
	// Email The contact's email.
	Email string `json:"email"`

	// FirstName The contact's first name.
	FirstName string `json:"firstName"`

	// LastName The contact's last name.
	LastName string `json:"lastName"`

	// Phone The contact's phone number.
	Phone string `json:"phone"`

	// Role The contact's role in the supplier company.
	Role string `json:"role"`
}

// Tag defines model for Tag.
type Tag struct {
	// Code The tag's account in the ERP system.
	Code string `json:"code"`

	// DimensionCode The dimension code associated to the tag.
	DimensionCode string `json:"dimensionCode"`

	// Id The tag's internal id.
	Id *string `json:"id,omitempty"`

	// Name The tag's clear name.
	Name string `json:"name"`

	// StatusActive Whether the tag is active.
	StatusActive bool `json:"statusActive"`
}

// TaxItem defines model for TaxItem.
type TaxItem struct {
	// Gross Gross amount subject to the indicated tax rate in expense currency.
	Gross *float32 `json:"gross,omitempty"`

	// RateId Yokoy's internal reference of the tax rate.
	RateId *string `json:"rateId,omitempty"`

	// Tax tax amount in expense currency.
	Tax *float32 `json:"tax,omitempty"`
}

// TaxRate defines model for TaxRate.
type TaxRate struct {
	// AccountReference The tax rates's account reference.
	AccountReference string `json:"accountReference"`

	// Code The tax rates's code.
	Code string `json:"code"`

	// Country The tax rates's country, ISO string.
	Country string `json:"country"`

	// CustomInformation Dictionary of custom information associated to the tax rate.
	CustomInformation *map[string]string `json:"customInformation"`

	// Id The tax rate's internal id.
	Id *string `json:"id,omitempty"`

	// Name The tax rates's name.
	Name string `json:"name"`

	// Rate The tax rates's numerical rate.
	Rate float32 `json:"rate"`

	// StatusActive Whether the tax rate is active.
	StatusActive bool `json:"statusActive"`
}

// Trip defines model for Trip.
type Trip struct {
	// Created Datetime when the trip was created
	Created *string `json:"created,omitempty"`

	// Currency Original trip currency as ISO4217 country currency code
	Currency *string `json:"currency,omitempty"`

	// CustomInformation Dictionary of custom information associated to the trip.
	CustomInformation *map[string]string `json:"customInformation"`

	// EndDatetime End-datetime of the trip in format YYYY-MM-DDThh:mm.
	EndDatetime *string `json:"endDatetime,omitempty"`

	// Id The trip's internal id.
	Id *string `json:"id,omitempty"`

	// LastModified Datetime when the trip was last modified
	LastModified *string `json:"lastModified,omitempty"`

	// LegalEntityId The internal legal entity id identifying the legal entity to which the trip is assigned
	LegalEntityId *string `json:"legalEntityId,omitempty"`

	// Name Name or short description of the trip (free text descriptions added by users).
	Name *string `json:"name,omitempty"`

	// StartDatetime Start-datetime of the trip in format YYYY-MM-DDThh:mm.
	StartDatetime *string `json:"startDatetime,omitempty"`

	// Status Trip status reflecting the overall status of all expenses assigned to the trip
	Status TripStatus `json:"status"`

	// TotalClaim Total claim of the trip
	TotalClaim *float32 `json:"totalClaim"`

	// UserId The internal user id
	UserId *string `json:"userId"`
}

// TripStatus Trip status reflecting the overall status of all expenses assigned to the trip
type TripStatus string

// User defines model for User.
type User struct {
	// CostCenterId The internal cost center id of the associated cost center.
	CostCenterId *string `json:"costCenterId"`

	// CustomInformation Dictionary of custom information associated to the user.
	CustomInformation *map[string]string `json:"customInformation"`

	// Email The user's email address, used to log into the Yokoy tool.
	Email string `json:"email"`

	// EmployeeId The creditor account number of the user.
	EmployeeId string `json:"employeeId"`

	// FirstName The user's given name.
	FirstName string `json:"firstName"`

	// Id The user's internal id.
	Id *string `json:"id,omitempty"`

	// InvitationOnCreation Whether the user is supposed to be invited when created or activated.
	InvitationOnCreation *bool `json:"invitationOnCreation"`

	// Language The user's preferred language for using Yokoy.
	Language *UserLanguage `json:"language"`

	// LastName The user's family name.
	LastName string `json:"lastName"`

	// LegalEntityId The internal legal entity id identifying the user's legal entity.
	LegalEntityId string `json:"legalEntityId"`

	// LineManagerId The internal user id of the user acting as the user's line manager.
	LineManagerId *string `json:"lineManagerId"`

	// LineManagerThreshold Approval limit in legal entity currency.
	LineManagerThreshold *float32 `json:"lineManagerThreshold"`

	// PolicyId The internal policy id of the associated employee policy id.
	PolicyId *string `json:"policyId"`

	// StatusActive Whether the user is active, i.e. can log into Yokoy.
	StatusActive bool `json:"statusActive"`

	// SubmissionDelegateId The internal user id of the user acting as the user's submission delegate.
	SubmissionDelegateId *string `json:"submissionDelegateId"`
}

// UserLanguage The user's preferred language for using Yokoy.
type UserLanguage string

// Forbidden defines model for Forbidden.
type Forbidden = Error

// NotFound defines model for NotFound.
type NotFound = Error

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// GetExpensesParams defines parameters for GetExpenses.
type GetExpensesParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetExpensesExpenseIdParams defines parameters for GetExpensesExpenseId.
type GetExpensesExpenseIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesParams defines parameters for GetLegalEntitiesa
type GetLegalEntitiesParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdParams defines parameters for GetLegalEntitiesLegalEntityId.
type GetLegalEntitiesLegalEntityIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdCategoriesParams defines parameters for GetLegalEntitiesLegalEntityIdCategories.
type GetLegalEntitiesLegalEntityIdCategoriesParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdCategoriesParams defines parameters for PostLegalEntitiesLegalEntityIdCategories.
type PostLegalEntitiesLegalEntityIdCategoriesParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdCategoriesCategoryIdParams defines parameters for GetLegalEntitiesLegalEntityIdCategoriesCategoryId.
type GetLegalEntitiesLegalEntityIdCategoriesCategoryIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONBody defines parameters for PatchLegalEntitiesLegalEntityIdCategoriesCategoryId.
type PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONBody map[string]interface{}

// PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams defines parameters for PatchLegalEntitiesLegalEntityIdCategoriesCategoryId.
type PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams defines parameters for PutLegalEntitiesLegalEntityIdCategoriesCategoryId.
type PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdCompanyCardsParams defines parameters for GetLegalEntitiesLegalEntityIdCompanyCards.
type GetLegalEntitiesLegalEntityIdCompanyCardsParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdCompanyCardsParams defines parameters for PostLegalEntitiesLegalEntityIdCompanyCards.
type PostLegalEntitiesLegalEntityIdCompanyCardsParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams defines parameters for GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId.
type GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONBody defines parameters for PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId.
type PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONBody map[string]interface{}

// PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams defines parameters for PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId.
type PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams defines parameters for PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId.
type PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdCostCentersParams defines parameters for GetLegalEntitiesLegalEntityIdCostCenters.
type GetLegalEntitiesLegalEntityIdCostCentersParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdCostCentersParams defines parameters for PostLegalEntitiesLegalEntityIdCostCenters.
type PostLegalEntitiesLegalEntityIdCostCentersParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams defines parameters for DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterId.
type DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams defines parameters for GetLegalEntitiesLegalEntityIdCostCentersCostCenterId.
type GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONBody defines parameters for PatchLegalEntitiesLegalEntityIdCostCentersCostCenterId.
type PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONBody map[string]interface{}

// PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams defines parameters for PatchLegalEntitiesLegalEntityIdCostCentersCostCenterId.
type PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams defines parameters for PutLegalEntitiesLegalEntityIdCostCentersCostCenterId.
type PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONBody defines parameters for PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks.
type PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONBody struct {
	// DocumentIds List of internal expense document ids to be exported (only considered if exportScope "documentIds" is selected).
	DocumentIds *[]string `json:"documentIds,omitempty"`

	// EarliestPostingDate Earliest allowed posting date. For expenses with an earlier posting date, the posting date is replaced with the earliest allowed posting date (to avoid posting to already closed books).
	EarliestPostingDate string `json:"earliestPostingDate"`

	// ExportScope Selection approach for the expenses to be exported. Either all expenses in scope of the export facility that are ready for export are exported ("all") or a determined set of expenses specified by their internal document id ("documentIds") is exported.
	ExportScope PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONBodyExportScope `json:"exportScope"`

	// ExporterId The user's internal id on behalf of which the export is executed. The user needs to have the finance role for the legal entity to trigger an export.
	ExporterId string `json:"exporterId"`
}

// PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams defines parameters for PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks.
type PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams struct {
	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONBodyExportScope defines parameters for PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks.
type PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONBodyExportScope string

// GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdParams defines parameters for GetLegalEntitiesLegalEntityIdExportTasksExportTaskId.
type GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdParams struct {
	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsParams defines parameters for GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefacts.
type GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsParams struct {
	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdInvoiceCategoriesParams defines parameters for GetLegalEntitiesLegalEntityIdInvoiceCategories.
type GetLegalEntitiesLegalEntityIdInvoiceCategoriesParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams defines parameters for PostLegalEntitiesLegalEntityIdInvoiceCategories.
type PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams defines parameters for GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId.
type GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONBody defines parameters for PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId.
type PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONBody map[string]interface{}

// PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams defines parameters for PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId.
type PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams defines parameters for PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId.
type PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONBody defines parameters for PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks.
type PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONBody struct {
	// DocumentIds List of internal invoice document ids to be exported (only considered if exportScope "documentIds" is selected)
	DocumentIds *[]string `json:"documentIds,omitempty"`

	// EarliestPostingDate Earliest allowed posting date. For invoices with an earlier posting date, the posting date is replaced with the earliest allowed posting date (to avoid posting to already closed books).
	EarliestPostingDate string `json:"earliestPostingDate"`

	// ExportScope Selection approach for the invoices to be exported. Either all invoices in scope of the export facility that are ready for export are exported ("all") or a determined set of invoices specified by their internal document id ("documentIds") is exported.
	ExportScope PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONBodyExportScope `json:"exportScope"`

	// ExporterId The user's internal id on behalf of which the export is executed. The user needs to have the finance role for the legal entity to trigger an export.
	ExporterId string `json:"exporterId"`
}

// PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams defines parameters for PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks.
type PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams struct {
	// XYkCorrelationId Correlation id to use throughout the handling of the request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONBodyExportScope defines parameters for PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks.
type PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONBodyExportScope string

// GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams defines parameters for GetLegalEntitiesLegalEntityIdInvoiceGoodsReceipts.
type GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams defines parameters for PostLegalEntitiesLegalEntityIdInvoiceGoodsReceipts.
type PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams defines parameters for GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId.
type GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONBody defines parameters for PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId.
type PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONBody map[string]interface{}

// PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams defines parameters for PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId.
type PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams defines parameters for PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId.
type PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdInvoicePaymentTermsParams defines parameters for GetLegalEntitiesLegalEntityIdInvoicePaymentTerms.
type GetLegalEntitiesLegalEntityIdInvoicePaymentTermsParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams defines parameters for PostLegalEntitiesLegalEntityIdInvoicePaymentTerms.
type PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams defines parameters for GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId.
type GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONBody defines parameters for PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId.
type PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONBody map[string]interface{}

// PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams defines parameters for PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId.
type PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams defines parameters for PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId.
type PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams defines parameters for GetLegalEntitiesLegalEntityIdInvoicePurchaseOrders.
type GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams defines parameters for PostLegalEntitiesLegalEntityIdInvoicePurchaseOrders.
type PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams defines parameters for GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId.
type GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONBody defines parameters for PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId.
type PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONBody map[string]interface{}

// PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams defines parameters for PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId.
type PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams defines parameters for PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId.
type PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdInvoicesParams defines parameters for GetLegalEntitiesLegalEntityIdInvoices.
type GetLegalEntitiesLegalEntityIdInvoicesParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdInvoicesParams defines parameters for PostLegalEntitiesLegalEntityIdInvoices.
type PostLegalEntitiesLegalEntityIdInvoicesParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdInvoicesUploadMultipartBody defines parameters for PostLegalEntitiesLegalEntityIdInvoicesUpload.
type PostLegalEntitiesLegalEntityIdInvoicesUploadMultipartBody struct {
	File openapi_types.File `json:"file"`
}

// PostLegalEntitiesLegalEntityIdInvoicesUploadParams defines parameters for PostLegalEntitiesLegalEntityIdInvoicesUpload.
type PostLegalEntitiesLegalEntityIdInvoicesUploadParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdParams defines parameters for GetLegalEntitiesLegalEntityIdInvoicesInvoiceId.
type GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationParams defines parameters for GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentation.
type GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdPoliciesParams defines parameters for GetLegalEntitiesLegalEntityIdPolicies.
type GetLegalEntitiesLegalEntityIdPoliciesParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdPoliciesParams defines parameters for PostLegalEntitiesLegalEntityIdPolicies.
type PostLegalEntitiesLegalEntityIdPoliciesParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdPoliciesPolicyIdParams defines parameters for GetLegalEntitiesLegalEntityIdPoliciesPolicyId.
type GetLegalEntitiesLegalEntityIdPoliciesPolicyIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONBody defines parameters for PatchLegalEntitiesLegalEntityIdPoliciesPolicyId.
type PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONBody map[string]interface{}

// PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams defines parameters for PatchLegalEntitiesLegalEntityIdPoliciesPolicyId.
type PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams defines parameters for PutLegalEntitiesLegalEntityIdPoliciesPolicyId.
type PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdSuppliersParams defines parameters for GetLegalEntitiesLegalEntityIdSuppliers.
type GetLegalEntitiesLegalEntityIdSuppliersParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdSuppliersParams defines parameters for PostLegalEntitiesLegalEntityIdSuppliers.
type PostLegalEntitiesLegalEntityIdSuppliersParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdSuppliersSupplierIdParams defines parameters for GetLegalEntitiesLegalEntityIdSuppliersSupplierId.
type GetLegalEntitiesLegalEntityIdSuppliersSupplierIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams defines parameters for PatchLegalEntitiesLegalEntityIdSuppliersSupplierId.
type PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams defines parameters for PutLegalEntitiesLegalEntityIdSuppliersSupplierId.
type PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdTagsParams defines parameters for GetLegalEntitiesLegalEntityIdTags.
type GetLegalEntitiesLegalEntityIdTagsParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdTagsParams defines parameters for PostLegalEntitiesLegalEntityIdTags.
type PostLegalEntitiesLegalEntityIdTagsParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// DeleteLegalEntitiesLegalEntityIdTagsTagIdParams defines parameters for DeleteLegalEntitiesLegalEntityIdTagsTagId.
type DeleteLegalEntitiesLegalEntityIdTagsTagIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdTagsTagIdParams defines parameters for GetLegalEntitiesLegalEntityIdTagsTagId.
type GetLegalEntitiesLegalEntityIdTagsTagIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PatchLegalEntitiesLegalEntityIdTagsTagIdJSONBody defines parameters for PatchLegalEntitiesLegalEntityIdTagsTagId.
type PatchLegalEntitiesLegalEntityIdTagsTagIdJSONBody map[string]interface{}

// PatchLegalEntitiesLegalEntityIdTagsTagIdParams defines parameters for PatchLegalEntitiesLegalEntityIdTagsTagId.
type PatchLegalEntitiesLegalEntityIdTagsTagIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PutLegalEntitiesLegalEntityIdTagsTagIdParams defines parameters for PutLegalEntitiesLegalEntityIdTagsTagId.
type PutLegalEntitiesLegalEntityIdTagsTagIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdTaxRatesParams defines parameters for GetLegalEntitiesLegalEntityIdTaxRates.
type GetLegalEntitiesLegalEntityIdTaxRatesParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdTaxRatesParams defines parameters for PostLegalEntitiesLegalEntityIdTaxRates.
type PostLegalEntitiesLegalEntityIdTaxRatesParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams defines parameters for GetLegalEntitiesLegalEntityIdTaxRatesTaxRateId.
type GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONBody defines parameters for PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateId.
type PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONBody map[string]interface{}

// PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams defines parameters for PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateId.
type PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams defines parameters for PutLegalEntitiesLegalEntityIdTaxRatesTaxRateId.
type PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetSuppliersParams defines parameters for GetSuppliers.
type GetSuppliersParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostSuppliersParams defines parameters for PostSuppliers.
type PostSuppliersParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetSuppliersSupplierIdParams defines parameters for GetSuppliersSupplierId.
type GetSuppliersSupplierIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PatchSuppliersSupplierIdJSONBody defines parameters for PatchSuppliersSupplierId.
type PatchSuppliersSupplierIdJSONBody map[string]interface{}

// PatchSuppliersSupplierIdParams defines parameters for PatchSuppliersSupplierId.
type PatchSuppliersSupplierIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PutSuppliersSupplierIdParams defines parameters for PutSuppliersSupplierId.
type PutSuppliersSupplierIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetTripsParams defines parameters for GetTrips.
type GetTripsParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetTripsTripIdParams defines parameters for GetTripsTripId.
type GetTripsTripIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Filter A filter string in the form defined in the [scim specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2).
	Filter        *string `form:"filter,omitempty" json:"filter,omitempty"`
	XYkAuthMethod string  `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostUsersParams defines parameters for PostUsers.
type PostUsersParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// DeleteUsersUserIdParams defines parameters for DeleteUsersUserId.
type DeleteUsersUserIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// GetUsersUserIdParams defines parameters for GetUsersUserId.
type GetUsersUserIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PatchUsersUserIdJSONBody defines parameters for PatchUsersUserId.
type PatchUsersUserIdJSONBody map[string]interface{}

// PatchUsersUserIdParams defines parameters for PatchUsersUserId.
type PatchUsersUserIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PutUsersUserIdParams defines parameters for PutUsersUserId.
type PutUsersUserIdParams struct {
	XYkAuthMethod string `json:"X-Yk-Auth-Method"`

	// XYkCorrelationId Correlation id to use throughout handling of request
	XYkCorrelationId *string `json:"X-Yk-Correlation-Id,omitempty"`
}

// PostLegalEntitiesLegalEntityIdCategoriesJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdCategories for application/json ContentType.
type PostLegalEntitiesLegalEntityIdCategoriesJSONRequestBody = Category

// PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody defines body for PatchLegalEntitiesLegalEntityIdCategoriesCategoryId for application/json ContentType.
type PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONBody

// PutLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody defines body for PutLegalEntitiesLegalEntityIdCategoriesCategoryId for application/json ContentType.
type PutLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody = Category

// PostLegalEntitiesLegalEntityIdCompanyCardsJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdCompanyCards for application/json ContentType.
type PostLegalEntitiesLegalEntityIdCompanyCardsJSONRequestBody = CompanyCard

// PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody defines body for PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId for application/json ContentType.
type PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONBody

// PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody defines body for PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId for application/json ContentType.
type PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody = CompanyCard

// PostLegalEntitiesLegalEntityIdCostCentersJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdCostCenters for application/json ContentType.
type PostLegalEntitiesLegalEntityIdCostCentersJSONRequestBody = CostCenter

// PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody defines body for PatchLegalEntitiesLegalEntityIdCostCentersCostCenterId for application/json ContentType.
type PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONBody

// PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody defines body for PutLegalEntitiesLegalEntityIdCostCentersCostCenterId for application/json ContentType.
type PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody = CostCenter

// PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks for application/json ContentType.
type PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONRequestBody PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONBody

// PostLegalEntitiesLegalEntityIdInvoiceCategoriesJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdInvoiceCategories for application/json ContentType.
type PostLegalEntitiesLegalEntityIdInvoiceCategoriesJSONRequestBody = InvoiceCategory

// PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody defines body for PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId for application/json ContentType.
type PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONBody

// PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody defines body for PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId for application/json ContentType.
type PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody = InvoiceCategory

// PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks for application/json ContentType.
type PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONRequestBody PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONBody

// PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdInvoiceGoodsReceipts for application/json ContentType.
type PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsJSONRequestBody = GoodsReceipt

// PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody defines body for PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId for application/json ContentType.
type PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONBody

// PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody defines body for PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId for application/json ContentType.
type PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody = GoodsReceipt

// PostLegalEntitiesLegalEntityIdInvoicePaymentTermsJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdInvoicePaymentTerms for application/json ContentType.
type PostLegalEntitiesLegalEntityIdInvoicePaymentTermsJSONRequestBody = InvoicePaymentTerms

// PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody defines body for PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId for application/json ContentType.
type PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONBody

// PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody defines body for PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId for application/json ContentType.
type PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody = InvoicePaymentTerms

// PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdInvoicePurchaseOrders for application/json ContentType.
type PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersJSONRequestBody = PurchaseOrder

// PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody defines body for PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId for application/json ContentType.
type PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONBody

// PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody defines body for PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId for application/json ContentType.
type PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody = PurchaseOrder

// PostLegalEntitiesLegalEntityIdInvoicesJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdInvoices for application/json ContentType.
type PostLegalEntitiesLegalEntityIdInvoicesJSONRequestBody = Invoice

// PostLegalEntitiesLegalEntityIdInvoicesUploadMultipartRequestBody defines body for PostLegalEntitiesLegalEntityIdInvoicesUpload for multipart/form-data ContentType.
type PostLegalEntitiesLegalEntityIdInvoicesUploadMultipartRequestBody PostLegalEntitiesLegalEntityIdInvoicesUploadMultipartBody

// PostLegalEntitiesLegalEntityIdPoliciesJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdPolicies for application/json ContentType.
type PostLegalEntitiesLegalEntityIdPoliciesJSONRequestBody = Policy

// PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody defines body for PatchLegalEntitiesLegalEntityIdPoliciesPolicyId for application/json ContentType.
type PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONBody

// PutLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody defines body for PutLegalEntitiesLegalEntityIdPoliciesPolicyId for application/json ContentType.
type PutLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody = Policy

// PostLegalEntitiesLegalEntityIdSuppliersJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdSuppliers for application/json ContentType.
type PostLegalEntitiesLegalEntityIdSuppliersJSONRequestBody = LegalEntitySupplier

// PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody defines body for PatchLegalEntitiesLegalEntityIdSuppliersSupplierId for application/json ContentType.
type PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody = LegalEntitySupplier

// PutLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody defines body for PutLegalEntitiesLegalEntityIdSuppliersSupplierId for application/json ContentType.
type PutLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody = LegalEntitySupplier

// PostLegalEntitiesLegalEntityIdTagsJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdTags for application/json ContentType.
type PostLegalEntitiesLegalEntityIdTagsJSONRequestBody = Tag

// PatchLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody defines body for PatchLegalEntitiesLegalEntityIdTagsTagId for application/json ContentType.
type PatchLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody PatchLegalEntitiesLegalEntityIdTagsTagIdJSONBody

// PutLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody defines body for PutLegalEntitiesLegalEntityIdTagsTagId for application/json ContentType.
type PutLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody = Tag

// PostLegalEntitiesLegalEntityIdTaxRatesJSONRequestBody defines body for PostLegalEntitiesLegalEntityIdTaxRates for application/json ContentType.
type PostLegalEntitiesLegalEntityIdTaxRatesJSONRequestBody = TaxRate

// PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody defines body for PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateId for application/json ContentType.
type PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONBody

// PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody defines body for PutLegalEntitiesLegalEntityIdTaxRatesTaxRateId for application/json ContentType.
type PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody = TaxRate

// PostSuppliersJSONRequestBody defines body for PostSuppliers for application/json ContentType.
type PostSuppliersJSONRequestBody = OrganizationSupplier

// PatchSuppliersSupplierIdJSONRequestBody defines body for PatchSuppliersSupplierId for application/json ContentType.
type PatchSuppliersSupplierIdJSONRequestBody PatchSuppliersSupplierIdJSONBody

// PutSuppliersSupplierIdJSONRequestBody defines body for PutSuppliersSupplierId for application/json ContentType.
type PutSuppliersSupplierIdJSONRequestBody = OrganizationSupplier

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = User

// PatchUsersUserIdJSONRequestBody defines body for PatchUsersUserId for application/json ContentType.
type PatchUsersUserIdJSONRequestBody PatchUsersUserIdJSONBody

// PutUsersUserIdJSONRequestBody defines body for PutUsersUserId for application/json ContentType.
type PutUsersUserIdJSONRequestBody = User

// AsDateString returns the union data inside the Invoice_ServiceDate as a DateString
func (t Invoice_ServiceDate) AsDateString() (DateString, error) {
	var body DateString
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDateString overwrites any union data inside the Invoice_ServiceDate as the provided DateString
func (t *Invoice_ServiceDate) FromDateString(v DateString) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDateString performs a merge with any union data inside the Invoice_ServiceDate, using the provided DateString
func (t *Invoice_ServiceDate) MergeDateString(v DateString) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDateRange returns the union data inside the Invoice_ServiceDate as a DateRange
func (t Invoice_ServiceDate) AsDateRange() (DateRange, error) {
	var body DateRange
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDateRange overwrites any union data inside the Invoice_ServiceDate as the provided DateRange
func (t *Invoice_ServiceDate) FromDateRange(v DateRange) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDateRange performs a merge with any union data inside the Invoice_ServiceDate, using the provided DateRange
func (t *Invoice_ServiceDate) MergeDateRange(v DateRange) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Invoice_ServiceDate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Invoice_ServiceDate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetExpenses request
	GetExpenses(ctx context.Context, params *GetExpensesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExpensesExpenseId request
	GetExpensesExpenseId(ctx context.Context, expenseId string, params *GetExpensesExpenseIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntities request
	GetLegalEntities(ctx context.Context, params *GetLegalEntitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityId request
	GetLegalEntitiesLegalEntityId(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdCategories request
	GetLegalEntitiesLegalEntityIdCategories(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdCategoriesWithBody request with any body
	PostLegalEntitiesLegalEntityIdCategoriesWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdCategories(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCategoriesParams, body PostLegalEntitiesLegalEntityIdCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdCategoriesCategoryId request
	GetLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx context.Context, legalEntityId string, categoryId string, params *GetLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBody request with any body
	PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBody(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, body PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBody request with any body
	PutLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBody(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, body PutLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdCompanyCards request
	GetLegalEntitiesLegalEntityIdCompanyCards(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCompanyCardsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdCompanyCardsWithBody request with any body
	PostLegalEntitiesLegalEntityIdCompanyCardsWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCompanyCardsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdCompanyCards(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCompanyCardsParams, body PostLegalEntitiesLegalEntityIdCompanyCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId request
	GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx context.Context, legalEntityId string, companyCardId string, params *GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBody request with any body
	PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBody(ctx context.Context, legalEntityId string, companyCardId string, params *PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx context.Context, legalEntityId string, companyCardId string, params *PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, body PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBody request with any body
	PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBody(ctx context.Context, legalEntityId string, companyCardId string, params *PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx context.Context, legalEntityId string, companyCardId string, params *PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, body PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdCostCenters request
	GetLegalEntitiesLegalEntityIdCostCenters(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCostCentersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdCostCentersWithBody request with any body
	PostLegalEntitiesLegalEntityIdCostCentersWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCostCentersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdCostCenters(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCostCentersParams, body PostLegalEntitiesLegalEntityIdCostCentersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterId request
	DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx context.Context, legalEntityId string, costCenterId string, params *DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdCostCentersCostCenterId request
	GetLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx context.Context, legalEntityId string, costCenterId string, params *GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBody request with any body
	PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBody(ctx context.Context, legalEntityId string, costCenterId string, params *PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx context.Context, legalEntityId string, costCenterId string, params *PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, body PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBody request with any body
	PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBody(ctx context.Context, legalEntityId string, costCenterId string, params *PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx context.Context, legalEntityId string, costCenterId string, params *PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, body PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksWithBody request with any body
	PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksWithBody(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams, body PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdExportTasksExportTaskId request
	GetLegalEntitiesLegalEntityIdExportTasksExportTaskId(ctx context.Context, legalEntityId string, exportTaskId string, params *GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefacts request
	GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefacts(ctx context.Context, legalEntityId string, exportTaskId string, params *GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdInvoiceCategories request
	GetLegalEntitiesLegalEntityIdInvoiceCategories(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoiceCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdInvoiceCategoriesWithBody request with any body
	PostLegalEntitiesLegalEntityIdInvoiceCategoriesWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdInvoiceCategories(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams, body PostLegalEntitiesLegalEntityIdInvoiceCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId request
	GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx context.Context, legalEntityId string, categoryId string, params *GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBody request with any body
	PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBody(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, body PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBody request with any body
	PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBody(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, body PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksWithBody request with any body
	PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksWithBody(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams, body PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdInvoiceGoodsReceipts request
	GetLegalEntitiesLegalEntityIdInvoiceGoodsReceipts(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithBody request with any body
	PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdInvoiceGoodsReceipts(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, body PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId request
	GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx context.Context, legalEntityId string, goodsReceiptId string, params *GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBody request with any body
	PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBody(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, body PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBody request with any body
	PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBody(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, body PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdInvoicePaymentTerms request
	GetLegalEntitiesLegalEntityIdInvoicePaymentTerms(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdInvoicePaymentTermsWithBody request with any body
	PostLegalEntitiesLegalEntityIdInvoicePaymentTermsWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdInvoicePaymentTerms(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, body PostLegalEntitiesLegalEntityIdInvoicePaymentTermsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId request
	GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx context.Context, legalEntityId string, paymentTermId string, params *GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBody request with any body
	PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBody(ctx context.Context, legalEntityId string, paymentTermId string, params *PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx context.Context, legalEntityId string, paymentTermId string, params *PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, body PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBody request with any body
	PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBody(ctx context.Context, legalEntityId string, paymentTermId string, params *PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx context.Context, legalEntityId string, paymentTermId string, params *PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, body PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdInvoicePurchaseOrders request
	GetLegalEntitiesLegalEntityIdInvoicePurchaseOrders(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithBody request with any body
	PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdInvoicePurchaseOrders(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, body PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId request
	GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx context.Context, legalEntityId string, purchaseOrderId string, params *GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBody request with any body
	PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBody(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, body PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBody request with any body
	PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBody(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, body PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdInvoices request
	GetLegalEntitiesLegalEntityIdInvoices(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdInvoicesWithBody request with any body
	PostLegalEntitiesLegalEntityIdInvoicesWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdInvoices(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesParams, body PostLegalEntitiesLegalEntityIdInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdInvoicesUploadWithBody request with any body
	PostLegalEntitiesLegalEntityIdInvoicesUploadWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdInvoicesInvoiceId request
	GetLegalEntitiesLegalEntityIdInvoicesInvoiceId(ctx context.Context, legalEntityId string, invoiceId string, params *GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentation request
	GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentation(ctx context.Context, legalEntityId string, invoiceId string, params *GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdPolicies request
	GetLegalEntitiesLegalEntityIdPolicies(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdPoliciesWithBody request with any body
	PostLegalEntitiesLegalEntityIdPoliciesWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdPoliciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdPolicies(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdPoliciesParams, body PostLegalEntitiesLegalEntityIdPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdPoliciesPolicyId request
	GetLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx context.Context, legalEntityId string, policyId string, params *GetLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBody request with any body
	PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBody(ctx context.Context, legalEntityId string, policyId string, params *PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx context.Context, legalEntityId string, policyId string, params *PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, body PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBody request with any body
	PutLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBody(ctx context.Context, legalEntityId string, policyId string, params *PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx context.Context, legalEntityId string, policyId string, params *PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, body PutLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdSuppliers request
	GetLegalEntitiesLegalEntityIdSuppliers(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdSuppliersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdSuppliersWithBody request with any body
	PostLegalEntitiesLegalEntityIdSuppliersWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdSuppliersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdSuppliers(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdSuppliersParams, body PostLegalEntitiesLegalEntityIdSuppliersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdSuppliersSupplierId request
	GetLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx context.Context, legalEntityId string, supplierId string, params *GetLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBody request with any body
	PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBody(ctx context.Context, legalEntityId string, supplierId string, params *PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx context.Context, legalEntityId string, supplierId string, params *PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, body PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBody request with any body
	PutLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBody(ctx context.Context, legalEntityId string, supplierId string, params *PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx context.Context, legalEntityId string, supplierId string, params *PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, body PutLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdTags request
	GetLegalEntitiesLegalEntityIdTags(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdTagsWithBody request with any body
	PostLegalEntitiesLegalEntityIdTagsWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdTags(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTagsParams, body PostLegalEntitiesLegalEntityIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLegalEntitiesLegalEntityIdTagsTagId request
	DeleteLegalEntitiesLegalEntityIdTagsTagId(ctx context.Context, legalEntityId string, tagId string, params *DeleteLegalEntitiesLegalEntityIdTagsTagIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdTagsTagId request
	GetLegalEntitiesLegalEntityIdTagsTagId(ctx context.Context, legalEntityId string, tagId string, params *GetLegalEntitiesLegalEntityIdTagsTagIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLegalEntitiesLegalEntityIdTagsTagIdWithBody request with any body
	PatchLegalEntitiesLegalEntityIdTagsTagIdWithBody(ctx context.Context, legalEntityId string, tagId string, params *PatchLegalEntitiesLegalEntityIdTagsTagIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLegalEntitiesLegalEntityIdTagsTagId(ctx context.Context, legalEntityId string, tagId string, params *PatchLegalEntitiesLegalEntityIdTagsTagIdParams, body PatchLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLegalEntitiesLegalEntityIdTagsTagIdWithBody request with any body
	PutLegalEntitiesLegalEntityIdTagsTagIdWithBody(ctx context.Context, legalEntityId string, tagId string, params *PutLegalEntitiesLegalEntityIdTagsTagIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLegalEntitiesLegalEntityIdTagsTagId(ctx context.Context, legalEntityId string, tagId string, params *PutLegalEntitiesLegalEntityIdTagsTagIdParams, body PutLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdTaxRates request
	GetLegalEntitiesLegalEntityIdTaxRates(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdTaxRatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegalEntitiesLegalEntityIdTaxRatesWithBody request with any body
	PostLegalEntitiesLegalEntityIdTaxRatesWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegalEntitiesLegalEntityIdTaxRates(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTaxRatesParams, body PostLegalEntitiesLegalEntityIdTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegalEntitiesLegalEntityIdTaxRatesTaxRateId request
	GetLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx context.Context, legalEntityId string, taxRateId string, params *GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBody request with any body
	PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBody(ctx context.Context, legalEntityId string, taxRateId string, params *PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx context.Context, legalEntityId string, taxRateId string, params *PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, body PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBody request with any body
	PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBody(ctx context.Context, legalEntityId string, taxRateId string, params *PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx context.Context, legalEntityId string, taxRateId string, params *PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, body PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSuppliers request
	GetSuppliers(ctx context.Context, params *GetSuppliersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSuppliersWithBody request with any body
	PostSuppliersWithBody(ctx context.Context, params *PostSuppliersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSuppliers(ctx context.Context, params *PostSuppliersParams, body PostSuppliersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSuppliersSupplierId request
	GetSuppliersSupplierId(ctx context.Context, supplierId string, params *GetSuppliersSupplierIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSuppliersSupplierIdWithBody request with any body
	PatchSuppliersSupplierIdWithBody(ctx context.Context, supplierId string, params *PatchSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSuppliersSupplierId(ctx context.Context, supplierId string, params *PatchSuppliersSupplierIdParams, body PatchSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSuppliersSupplierIdWithBody request with any body
	PutSuppliersSupplierIdWithBody(ctx context.Context, supplierId string, params *PutSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSuppliersSupplierId(ctx context.Context, supplierId string, params *PutSuppliersSupplierIdParams, body PutSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrips request
	GetTrips(ctx context.Context, params *GetTripsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTripsTripId request
	GetTripsTripId(ctx context.Context, tripId string, params *GetTripsTripIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersWithBody request with any body
	PostUsersWithBody(ctx context.Context, params *PostUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsers(ctx context.Context, params *PostUsersParams, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersUserId request
	DeleteUsersUserId(ctx context.Context, userId string, params *DeleteUsersUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUserId request
	GetUsersUserId(ctx context.Context, userId string, params *GetUsersUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUsersUserIdWithBody request with any body
	PatchUsersUserIdWithBody(ctx context.Context, userId string, params *PatchUsersUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUsersUserId(ctx context.Context, userId string, params *PatchUsersUserIdParams, body PatchUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUsersUserIdWithBody request with any body
	PutUsersUserIdWithBody(ctx context.Context, userId string, params *PutUsersUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUsersUserId(ctx context.Context, userId string, params *PutUsersUserIdParams, body PutUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetExpenses(ctx context.Context, params *GetExpensesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExpensesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpensesExpenseId(ctx context.Context, expenseId string, params *GetExpensesExpenseIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExpensesExpenseIdRequest(c.Server, expenseId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntities(ctx context.Context, params *GetLegalEntitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityId(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdRequest(c.Server, legalEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdCategories(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdCategoriesRequest(c.Server, legalEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdCategoriesWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdCategoriesRequestWithBody(c.Server, legalEntityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdCategories(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCategoriesParams, body PostLegalEntitiesLegalEntityIdCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdCategoriesRequest(c.Server, legalEntityId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx context.Context, legalEntityId string, categoryId string, params *GetLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdCategoriesCategoryIdRequest(c.Server, legalEntityId, categoryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBody(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdCategoriesCategoryIdRequestWithBody(c.Server, legalEntityId, categoryId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, body PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdCategoriesCategoryIdRequest(c.Server, legalEntityId, categoryId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBody(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdCategoriesCategoryIdRequestWithBody(c.Server, legalEntityId, categoryId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, body PutLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdCategoriesCategoryIdRequest(c.Server, legalEntityId, categoryId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdCompanyCards(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCompanyCardsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdCompanyCardsRequest(c.Server, legalEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdCompanyCardsWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCompanyCardsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdCompanyCardsRequestWithBody(c.Server, legalEntityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdCompanyCards(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCompanyCardsParams, body PostLegalEntitiesLegalEntityIdCompanyCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdCompanyCardsRequest(c.Server, legalEntityId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx context.Context, legalEntityId string, companyCardId string, params *GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequest(c.Server, legalEntityId, companyCardId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBody(ctx context.Context, legalEntityId string, companyCardId string, params *PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequestWithBody(c.Server, legalEntityId, companyCardId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx context.Context, legalEntityId string, companyCardId string, params *PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, body PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequest(c.Server, legalEntityId, companyCardId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBody(ctx context.Context, legalEntityId string, companyCardId string, params *PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequestWithBody(c.Server, legalEntityId, companyCardId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx context.Context, legalEntityId string, companyCardId string, params *PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, body PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequest(c.Server, legalEntityId, companyCardId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdCostCenters(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCostCentersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdCostCentersRequest(c.Server, legalEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdCostCentersWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCostCentersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdCostCentersRequestWithBody(c.Server, legalEntityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdCostCenters(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCostCentersParams, body PostLegalEntitiesLegalEntityIdCostCentersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdCostCentersRequest(c.Server, legalEntityId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx context.Context, legalEntityId string, costCenterId string, params *DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequest(c.Server, legalEntityId, costCenterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx context.Context, legalEntityId string, costCenterId string, params *GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequest(c.Server, legalEntityId, costCenterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBody(ctx context.Context, legalEntityId string, costCenterId string, params *PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequestWithBody(c.Server, legalEntityId, costCenterId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx context.Context, legalEntityId string, costCenterId string, params *PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, body PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequest(c.Server, legalEntityId, costCenterId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBody(ctx context.Context, legalEntityId string, costCenterId string, params *PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequestWithBody(c.Server, legalEntityId, costCenterId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx context.Context, legalEntityId string, costCenterId string, params *PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, body PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequest(c.Server, legalEntityId, costCenterId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksWithBody(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksRequestWithBody(c.Server, legalEntityId, exportFacility, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams, body PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksRequest(c.Server, legalEntityId, exportFacility, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdExportTasksExportTaskId(ctx context.Context, legalEntityId string, exportTaskId string, params *GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdExportTasksExportTaskIdRequest(c.Server, legalEntityId, exportTaskId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefacts(ctx context.Context, legalEntityId string, exportTaskId string, params *GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsRequest(c.Server, legalEntityId, exportTaskId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdInvoiceCategories(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoiceCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdInvoiceCategoriesRequest(c.Server, legalEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdInvoiceCategoriesWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdInvoiceCategoriesRequestWithBody(c.Server, legalEntityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdInvoiceCategories(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams, body PostLegalEntitiesLegalEntityIdInvoiceCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdInvoiceCategoriesRequest(c.Server, legalEntityId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx context.Context, legalEntityId string, categoryId string, params *GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequest(c.Server, legalEntityId, categoryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBody(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequestWithBody(c.Server, legalEntityId, categoryId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, body PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequest(c.Server, legalEntityId, categoryId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBody(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequestWithBody(c.Server, legalEntityId, categoryId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, body PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequest(c.Server, legalEntityId, categoryId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksWithBody(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksRequestWithBody(c.Server, legalEntityId, exportFacility, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams, body PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksRequest(c.Server, legalEntityId, exportFacility, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdInvoiceGoodsReceipts(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsRequest(c.Server, legalEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsRequestWithBody(c.Server, legalEntityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdInvoiceGoodsReceipts(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, body PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsRequest(c.Server, legalEntityId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx context.Context, legalEntityId string, goodsReceiptId string, params *GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequest(c.Server, legalEntityId, goodsReceiptId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBody(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequestWithBody(c.Server, legalEntityId, goodsReceiptId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, body PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequest(c.Server, legalEntityId, goodsReceiptId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBody(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequestWithBody(c.Server, legalEntityId, goodsReceiptId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, body PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequest(c.Server, legalEntityId, goodsReceiptId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdInvoicePaymentTerms(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdInvoicePaymentTermsRequest(c.Server, legalEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdInvoicePaymentTermsWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdInvoicePaymentTermsRequestWithBody(c.Server, legalEntityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdInvoicePaymentTerms(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, body PostLegalEntitiesLegalEntityIdInvoicePaymentTermsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdInvoicePaymentTermsRequest(c.Server, legalEntityId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx context.Context, legalEntityId string, paymentTermId string, params *GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequest(c.Server, legalEntityId, paymentTermId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBody(ctx context.Context, legalEntityId string, paymentTermId string, params *PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequestWithBody(c.Server, legalEntityId, paymentTermId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx context.Context, legalEntityId string, paymentTermId string, params *PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, body PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequest(c.Server, legalEntityId, paymentTermId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBody(ctx context.Context, legalEntityId string, paymentTermId string, params *PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequestWithBody(c.Server, legalEntityId, paymentTermId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx context.Context, legalEntityId string, paymentTermId string, params *PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, body PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequest(c.Server, legalEntityId, paymentTermId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdInvoicePurchaseOrders(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersRequest(c.Server, legalEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersRequestWithBody(c.Server, legalEntityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdInvoicePurchaseOrders(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, body PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersRequest(c.Server, legalEntityId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx context.Context, legalEntityId string, purchaseOrderId string, params *GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequest(c.Server, legalEntityId, purchaseOrderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBody(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequestWithBody(c.Server, legalEntityId, purchaseOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, body PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequest(c.Server, legalEntityId, purchaseOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBody(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequestWithBody(c.Server, legalEntityId, purchaseOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, body PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequest(c.Server, legalEntityId, purchaseOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdInvoices(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdInvoicesRequest(c.Server, legalEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdInvoicesWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdInvoicesRequestWithBody(c.Server, legalEntityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdInvoices(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesParams, body PostLegalEntitiesLegalEntityIdInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdInvoicesRequest(c.Server, legalEntityId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdInvoicesUploadWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdInvoicesUploadRequestWithBody(c.Server, legalEntityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdInvoicesInvoiceId(ctx context.Context, legalEntityId string, invoiceId string, params *GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdInvoicesInvoiceIdRequest(c.Server, legalEntityId, invoiceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentation(ctx context.Context, legalEntityId string, invoiceId string, params *GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationRequest(c.Server, legalEntityId, invoiceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdPolicies(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdPoliciesRequest(c.Server, legalEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdPoliciesWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdPoliciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdPoliciesRequestWithBody(c.Server, legalEntityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdPolicies(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdPoliciesParams, body PostLegalEntitiesLegalEntityIdPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdPoliciesRequest(c.Server, legalEntityId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx context.Context, legalEntityId string, policyId string, params *GetLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdPoliciesPolicyIdRequest(c.Server, legalEntityId, policyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBody(ctx context.Context, legalEntityId string, policyId string, params *PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdPoliciesPolicyIdRequestWithBody(c.Server, legalEntityId, policyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx context.Context, legalEntityId string, policyId string, params *PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, body PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdPoliciesPolicyIdRequest(c.Server, legalEntityId, policyId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBody(ctx context.Context, legalEntityId string, policyId string, params *PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdPoliciesPolicyIdRequestWithBody(c.Server, legalEntityId, policyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx context.Context, legalEntityId string, policyId string, params *PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, body PutLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdPoliciesPolicyIdRequest(c.Server, legalEntityId, policyId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdSuppliers(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdSuppliersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdSuppliersRequest(c.Server, legalEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdSuppliersWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdSuppliersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdSuppliersRequestWithBody(c.Server, legalEntityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdSuppliers(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdSuppliersParams, body PostLegalEntitiesLegalEntityIdSuppliersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdSuppliersRequest(c.Server, legalEntityId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx context.Context, legalEntityId string, supplierId string, params *GetLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdSuppliersSupplierIdRequest(c.Server, legalEntityId, supplierId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBody(ctx context.Context, legalEntityId string, supplierId string, params *PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdSuppliersSupplierIdRequestWithBody(c.Server, legalEntityId, supplierId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx context.Context, legalEntityId string, supplierId string, params *PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, body PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdSuppliersSupplierIdRequest(c.Server, legalEntityId, supplierId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBody(ctx context.Context, legalEntityId string, supplierId string, params *PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdSuppliersSupplierIdRequestWithBody(c.Server, legalEntityId, supplierId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx context.Context, legalEntityId string, supplierId string, params *PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, body PutLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdSuppliersSupplierIdRequest(c.Server, legalEntityId, supplierId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdTags(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdTagsRequest(c.Server, legalEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdTagsWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdTagsRequestWithBody(c.Server, legalEntityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdTags(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTagsParams, body PostLegalEntitiesLegalEntityIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdTagsRequest(c.Server, legalEntityId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLegalEntitiesLegalEntityIdTagsTagId(ctx context.Context, legalEntityId string, tagId string, params *DeleteLegalEntitiesLegalEntityIdTagsTagIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLegalEntitiesLegalEntityIdTagsTagIdRequest(c.Server, legalEntityId, tagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdTagsTagId(ctx context.Context, legalEntityId string, tagId string, params *GetLegalEntitiesLegalEntityIdTagsTagIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdTagsTagIdRequest(c.Server, legalEntityId, tagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdTagsTagIdWithBody(ctx context.Context, legalEntityId string, tagId string, params *PatchLegalEntitiesLegalEntityIdTagsTagIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdTagsTagIdRequestWithBody(c.Server, legalEntityId, tagId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdTagsTagId(ctx context.Context, legalEntityId string, tagId string, params *PatchLegalEntitiesLegalEntityIdTagsTagIdParams, body PatchLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdTagsTagIdRequest(c.Server, legalEntityId, tagId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdTagsTagIdWithBody(ctx context.Context, legalEntityId string, tagId string, params *PutLegalEntitiesLegalEntityIdTagsTagIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdTagsTagIdRequestWithBody(c.Server, legalEntityId, tagId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdTagsTagId(ctx context.Context, legalEntityId string, tagId string, params *PutLegalEntitiesLegalEntityIdTagsTagIdParams, body PutLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdTagsTagIdRequest(c.Server, legalEntityId, tagId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdTaxRates(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdTaxRatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdTaxRatesRequest(c.Server, legalEntityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdTaxRatesWithBody(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdTaxRatesRequestWithBody(c.Server, legalEntityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegalEntitiesLegalEntityIdTaxRates(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTaxRatesParams, body PostLegalEntitiesLegalEntityIdTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegalEntitiesLegalEntityIdTaxRatesRequest(c.Server, legalEntityId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx context.Context, legalEntityId string, taxRateId string, params *GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequest(c.Server, legalEntityId, taxRateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBody(ctx context.Context, legalEntityId string, taxRateId string, params *PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequestWithBody(c.Server, legalEntityId, taxRateId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx context.Context, legalEntityId string, taxRateId string, params *PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, body PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequest(c.Server, legalEntityId, taxRateId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBody(ctx context.Context, legalEntityId string, taxRateId string, params *PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequestWithBody(c.Server, legalEntityId, taxRateId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx context.Context, legalEntityId string, taxRateId string, params *PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, body PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequest(c.Server, legalEntityId, taxRateId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSuppliers(ctx context.Context, params *GetSuppliersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSuppliersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSuppliersWithBody(ctx context.Context, params *PostSuppliersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSuppliersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSuppliers(ctx context.Context, params *PostSuppliersParams, body PostSuppliersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSuppliersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSuppliersSupplierId(ctx context.Context, supplierId string, params *GetSuppliersSupplierIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSuppliersSupplierIdRequest(c.Server, supplierId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSuppliersSupplierIdWithBody(ctx context.Context, supplierId string, params *PatchSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSuppliersSupplierIdRequestWithBody(c.Server, supplierId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSuppliersSupplierId(ctx context.Context, supplierId string, params *PatchSuppliersSupplierIdParams, body PatchSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSuppliersSupplierIdRequest(c.Server, supplierId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSuppliersSupplierIdWithBody(ctx context.Context, supplierId string, params *PutSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSuppliersSupplierIdRequestWithBody(c.Server, supplierId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSuppliersSupplierId(ctx context.Context, supplierId string, params *PutSuppliersSupplierIdParams, body PutSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSuppliersSupplierIdRequest(c.Server, supplierId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrips(ctx context.Context, params *GetTripsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTripsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTripsTripId(ctx context.Context, tripId string, params *GetTripsTripIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTripsTripIdRequest(c.Server, tripId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersWithBody(ctx context.Context, params *PostUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsers(ctx context.Context, params *PostUsersParams, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersUserId(ctx context.Context, userId string, params *DeleteUsersUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersUserIdRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUserId(ctx context.Context, userId string, params *GetUsersUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUserIdRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersUserIdWithBody(ctx context.Context, userId string, params *PatchUsersUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersUserIdRequestWithBody(c.Server, userId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersUserId(ctx context.Context, userId string, params *PatchUsersUserIdParams, body PatchUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersUserIdRequest(c.Server, userId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersUserIdWithBody(ctx context.Context, userId string, params *PutUsersUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersUserIdRequestWithBody(c.Server, userId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersUserId(ctx context.Context, userId string, params *PutUsersUserIdParams, body PutUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersUserIdRequest(c.Server, userId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetExpensesRequest generates requests for GetExpenses
func NewGetExpensesRequest(server string, params *GetExpensesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/expenses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetExpensesExpenseIdRequest generates requests for GetExpensesExpenseId
func NewGetExpensesExpenseIdRequest(server string, expenseId string, params *GetExpensesExpenseIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expenseId", runtime.ParamLocationPath, expenseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/expenses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesRequest generates requests for GetLegalEntities
func NewGetLegalEntitiesRequest(server string, params *GetLegalEntitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdRequest generates requests for GetLegalEntitiesLegalEntityId
func NewGetLegalEntitiesLegalEntityIdRequest(server string, legalEntityId string, params *GetLegalEntitiesLegalEntityIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdCategoriesRequest generates requests for GetLegalEntitiesLegalEntityIdCategories
func NewGetLegalEntitiesLegalEntityIdCategoriesRequest(server string, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCategoriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/categories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdCategoriesRequest calls the generic PostLegalEntitiesLegalEntityIdCategories builder with application/json body
func NewPostLegalEntitiesLegalEntityIdCategoriesRequest(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCategoriesParams, body PostLegalEntitiesLegalEntityIdCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdCategoriesRequestWithBody(server, legalEntityId, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdCategoriesRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdCategories with any type of body
func NewPostLegalEntitiesLegalEntityIdCategoriesRequestWithBody(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCategoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/categories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdCategoriesCategoryIdRequest generates requests for GetLegalEntitiesLegalEntityIdCategoriesCategoryId
func NewGetLegalEntitiesLegalEntityIdCategoriesCategoryIdRequest(server string, legalEntityId string, categoryId string, params *GetLegalEntitiesLegalEntityIdCategoriesCategoryIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/categories/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPatchLegalEntitiesLegalEntityIdCategoriesCategoryIdRequest calls the generic PatchLegalEntitiesLegalEntityIdCategoriesCategoryId builder with application/json body
func NewPatchLegalEntitiesLegalEntityIdCategoriesCategoryIdRequest(server string, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, body PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLegalEntitiesLegalEntityIdCategoriesCategoryIdRequestWithBody(server, legalEntityId, categoryId, params, "application/json", bodyReader)
}

// NewPatchLegalEntitiesLegalEntityIdCategoriesCategoryIdRequestWithBody generates requests for PatchLegalEntitiesLegalEntityIdCategoriesCategoryId with any type of body
func NewPatchLegalEntitiesLegalEntityIdCategoriesCategoryIdRequestWithBody(server string, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/categories/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPutLegalEntitiesLegalEntityIdCategoriesCategoryIdRequest calls the generic PutLegalEntitiesLegalEntityIdCategoriesCategoryId builder with application/json body
func NewPutLegalEntitiesLegalEntityIdCategoriesCategoryIdRequest(server string, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, body PutLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLegalEntitiesLegalEntityIdCategoriesCategoryIdRequestWithBody(server, legalEntityId, categoryId, params, "application/json", bodyReader)
}

// NewPutLegalEntitiesLegalEntityIdCategoriesCategoryIdRequestWithBody generates requests for PutLegalEntitiesLegalEntityIdCategoriesCategoryId with any type of body
func NewPutLegalEntitiesLegalEntityIdCategoriesCategoryIdRequestWithBody(server string, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/categories/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdCompanyCardsRequest generates requests for GetLegalEntitiesLegalEntityIdCompanyCards
func NewGetLegalEntitiesLegalEntityIdCompanyCardsRequest(server string, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCompanyCardsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/company-cards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdCompanyCardsRequest calls the generic PostLegalEntitiesLegalEntityIdCompanyCards builder with application/json body
func NewPostLegalEntitiesLegalEntityIdCompanyCardsRequest(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCompanyCardsParams, body PostLegalEntitiesLegalEntityIdCompanyCardsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdCompanyCardsRequestWithBody(server, legalEntityId, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdCompanyCardsRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdCompanyCards with any type of body
func NewPostLegalEntitiesLegalEntityIdCompanyCardsRequestWithBody(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCompanyCardsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/company-cards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequest generates requests for GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId
func NewGetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequest(server string, legalEntityId string, companyCardId string, params *GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "companyCardId", runtime.ParamLocationPath, companyCardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/company-cards/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequest calls the generic PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId builder with application/json body
func NewPatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequest(server string, legalEntityId string, companyCardId string, params *PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, body PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequestWithBody(server, legalEntityId, companyCardId, params, "application/json", bodyReader)
}

// NewPatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequestWithBody generates requests for PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId with any type of body
func NewPatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequestWithBody(server string, legalEntityId string, companyCardId string, params *PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "companyCardId", runtime.ParamLocationPath, companyCardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/company-cards/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequest calls the generic PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId builder with application/json body
func NewPutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequest(server string, legalEntityId string, companyCardId string, params *PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, body PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequestWithBody(server, legalEntityId, companyCardId, params, "application/json", bodyReader)
}

// NewPutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequestWithBody generates requests for PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId with any type of body
func NewPutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdRequestWithBody(server string, legalEntityId string, companyCardId string, params *PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "companyCardId", runtime.ParamLocationPath, companyCardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/company-cards/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdCostCentersRequest generates requests for GetLegalEntitiesLegalEntityIdCostCenters
func NewGetLegalEntitiesLegalEntityIdCostCentersRequest(server string, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCostCentersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/cost-centers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdCostCentersRequest calls the generic PostLegalEntitiesLegalEntityIdCostCenters builder with application/json body
func NewPostLegalEntitiesLegalEntityIdCostCentersRequest(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCostCentersParams, body PostLegalEntitiesLegalEntityIdCostCentersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdCostCentersRequestWithBody(server, legalEntityId, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdCostCentersRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdCostCenters with any type of body
func NewPostLegalEntitiesLegalEntityIdCostCentersRequestWithBody(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCostCentersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/cost-centers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequest generates requests for DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterId
func NewDeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequest(server string, legalEntityId string, costCenterId string, params *DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "costCenterId", runtime.ParamLocationPath, costCenterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/cost-centers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequest generates requests for GetLegalEntitiesLegalEntityIdCostCentersCostCenterId
func NewGetLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequest(server string, legalEntityId string, costCenterId string, params *GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "costCenterId", runtime.ParamLocationPath, costCenterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/cost-centers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequest calls the generic PatchLegalEntitiesLegalEntityIdCostCentersCostCenterId builder with application/json body
func NewPatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequest(server string, legalEntityId string, costCenterId string, params *PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, body PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequestWithBody(server, legalEntityId, costCenterId, params, "application/json", bodyReader)
}

// NewPatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequestWithBody generates requests for PatchLegalEntitiesLegalEntityIdCostCentersCostCenterId with any type of body
func NewPatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequestWithBody(server string, legalEntityId string, costCenterId string, params *PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "costCenterId", runtime.ParamLocationPath, costCenterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/cost-centers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPutLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequest calls the generic PutLegalEntitiesLegalEntityIdCostCentersCostCenterId builder with application/json body
func NewPutLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequest(server string, legalEntityId string, costCenterId string, params *PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, body PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequestWithBody(server, legalEntityId, costCenterId, params, "application/json", bodyReader)
}

// NewPutLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequestWithBody generates requests for PutLegalEntitiesLegalEntityIdCostCentersCostCenterId with any type of body
func NewPutLegalEntitiesLegalEntityIdCostCentersCostCenterIdRequestWithBody(server string, legalEntityId string, costCenterId string, params *PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "costCenterId", runtime.ParamLocationPath, costCenterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/cost-centers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksRequest calls the generic PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks builder with application/json body
func NewPostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksRequest(server string, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams, body PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksRequestWithBody(server, legalEntityId, exportFacility, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks with any type of body
func NewPostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksRequestWithBody(server string, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "exportFacility", runtime.ParamLocationPath, exportFacility)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/expense-export-facilities/%s/export-tasks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XYkCorrelationId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam0)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdExportTasksExportTaskIdRequest generates requests for GetLegalEntitiesLegalEntityIdExportTasksExportTaskId
func NewGetLegalEntitiesLegalEntityIdExportTasksExportTaskIdRequest(server string, legalEntityId string, exportTaskId string, params *GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "exportTaskId", runtime.ParamLocationPath, exportTaskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/export-tasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XYkCorrelationId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam0)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsRequest generates requests for GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefacts
func NewGetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsRequest(server string, legalEntityId string, exportTaskId string, params *GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "exportTaskId", runtime.ParamLocationPath, exportTaskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/export-tasks/%s/artefacts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XYkCorrelationId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam0)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdInvoiceCategoriesRequest generates requests for GetLegalEntitiesLegalEntityIdInvoiceCategories
func NewGetLegalEntitiesLegalEntityIdInvoiceCategoriesRequest(server string, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoiceCategoriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-categories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdInvoiceCategoriesRequest calls the generic PostLegalEntitiesLegalEntityIdInvoiceCategories builder with application/json body
func NewPostLegalEntitiesLegalEntityIdInvoiceCategoriesRequest(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams, body PostLegalEntitiesLegalEntityIdInvoiceCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdInvoiceCategoriesRequestWithBody(server, legalEntityId, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdInvoiceCategoriesRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdInvoiceCategories with any type of body
func NewPostLegalEntitiesLegalEntityIdInvoiceCategoriesRequestWithBody(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-categories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequest generates requests for GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId
func NewGetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequest(server string, legalEntityId string, categoryId string, params *GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-categories/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequest calls the generic PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId builder with application/json body
func NewPatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequest(server string, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, body PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequestWithBody(server, legalEntityId, categoryId, params, "application/json", bodyReader)
}

// NewPatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequestWithBody generates requests for PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId with any type of body
func NewPatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequestWithBody(server string, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-categories/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequest calls the generic PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId builder with application/json body
func NewPutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequest(server string, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, body PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequestWithBody(server, legalEntityId, categoryId, params, "application/json", bodyReader)
}

// NewPutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequestWithBody generates requests for PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId with any type of body
func NewPutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdRequestWithBody(server string, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-categories/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksRequest calls the generic PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks builder with application/json body
func NewPostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksRequest(server string, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams, body PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksRequestWithBody(server, legalEntityId, exportFacility, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks with any type of body
func NewPostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksRequestWithBody(server string, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "exportFacility", runtime.ParamLocationPath, exportFacility)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-export-facilities/%s/export-tasks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XYkCorrelationId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam0)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsRequest generates requests for GetLegalEntitiesLegalEntityIdInvoiceGoodsReceipts
func NewGetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsRequest(server string, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-goods-receipts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsRequest calls the generic PostLegalEntitiesLegalEntityIdInvoiceGoodsReceipts builder with application/json body
func NewPostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsRequest(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, body PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsRequestWithBody(server, legalEntityId, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdInvoiceGoodsReceipts with any type of body
func NewPostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsRequestWithBody(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-goods-receipts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequest generates requests for GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId
func NewGetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequest(server string, legalEntityId string, goodsReceiptId string, params *GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "goodsReceiptId", runtime.ParamLocationPath, goodsReceiptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-goods-receipts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequest calls the generic PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId builder with application/json body
func NewPatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequest(server string, legalEntityId string, goodsReceiptId string, params *PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, body PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequestWithBody(server, legalEntityId, goodsReceiptId, params, "application/json", bodyReader)
}

// NewPatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequestWithBody generates requests for PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId with any type of body
func NewPatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequestWithBody(server string, legalEntityId string, goodsReceiptId string, params *PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "goodsReceiptId", runtime.ParamLocationPath, goodsReceiptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-goods-receipts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequest calls the generic PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId builder with application/json body
func NewPutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequest(server string, legalEntityId string, goodsReceiptId string, params *PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, body PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequestWithBody(server, legalEntityId, goodsReceiptId, params, "application/json", bodyReader)
}

// NewPutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequestWithBody generates requests for PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId with any type of body
func NewPutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdRequestWithBody(server string, legalEntityId string, goodsReceiptId string, params *PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "goodsReceiptId", runtime.ParamLocationPath, goodsReceiptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-goods-receipts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdInvoicePaymentTermsRequest generates requests for GetLegalEntitiesLegalEntityIdInvoicePaymentTerms
func NewGetLegalEntitiesLegalEntityIdInvoicePaymentTermsRequest(server string, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicePaymentTermsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-payment-terms", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdInvoicePaymentTermsRequest calls the generic PostLegalEntitiesLegalEntityIdInvoicePaymentTerms builder with application/json body
func NewPostLegalEntitiesLegalEntityIdInvoicePaymentTermsRequest(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, body PostLegalEntitiesLegalEntityIdInvoicePaymentTermsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdInvoicePaymentTermsRequestWithBody(server, legalEntityId, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdInvoicePaymentTermsRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdInvoicePaymentTerms with any type of body
func NewPostLegalEntitiesLegalEntityIdInvoicePaymentTermsRequestWithBody(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-payment-terms", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequest generates requests for GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId
func NewGetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequest(server string, legalEntityId string, paymentTermId string, params *GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "paymentTermId", runtime.ParamLocationPath, paymentTermId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-payment-terms/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequest calls the generic PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId builder with application/json body
func NewPatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequest(server string, legalEntityId string, paymentTermId string, params *PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, body PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequestWithBody(server, legalEntityId, paymentTermId, params, "application/json", bodyReader)
}

// NewPatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequestWithBody generates requests for PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId with any type of body
func NewPatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequestWithBody(server string, legalEntityId string, paymentTermId string, params *PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "paymentTermId", runtime.ParamLocationPath, paymentTermId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-payment-terms/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequest calls the generic PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId builder with application/json body
func NewPutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequest(server string, legalEntityId string, paymentTermId string, params *PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, body PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequestWithBody(server, legalEntityId, paymentTermId, params, "application/json", bodyReader)
}

// NewPutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequestWithBody generates requests for PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId with any type of body
func NewPutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdRequestWithBody(server string, legalEntityId string, paymentTermId string, params *PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "paymentTermId", runtime.ParamLocationPath, paymentTermId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-payment-terms/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersRequest generates requests for GetLegalEntitiesLegalEntityIdInvoicePurchaseOrders
func NewGetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersRequest(server string, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-purchase-orders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersRequest calls the generic PostLegalEntitiesLegalEntityIdInvoicePurchaseOrders builder with application/json body
func NewPostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersRequest(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, body PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersRequestWithBody(server, legalEntityId, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdInvoicePurchaseOrders with any type of body
func NewPostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersRequestWithBody(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-purchase-orders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequest generates requests for GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId
func NewGetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequest(server string, legalEntityId string, purchaseOrderId string, params *GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "purchaseOrderId", runtime.ParamLocationPath, purchaseOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-purchase-orders/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequest calls the generic PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId builder with application/json body
func NewPatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequest(server string, legalEntityId string, purchaseOrderId string, params *PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, body PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequestWithBody(server, legalEntityId, purchaseOrderId, params, "application/json", bodyReader)
}

// NewPatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequestWithBody generates requests for PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId with any type of body
func NewPatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequestWithBody(server string, legalEntityId string, purchaseOrderId string, params *PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "purchaseOrderId", runtime.ParamLocationPath, purchaseOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-purchase-orders/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequest calls the generic PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId builder with application/json body
func NewPutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequest(server string, legalEntityId string, purchaseOrderId string, params *PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, body PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequestWithBody(server, legalEntityId, purchaseOrderId, params, "application/json", bodyReader)
}

// NewPutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequestWithBody generates requests for PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId with any type of body
func NewPutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdRequestWithBody(server string, legalEntityId string, purchaseOrderId string, params *PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "purchaseOrderId", runtime.ParamLocationPath, purchaseOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoice-purchase-orders/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdInvoicesRequest generates requests for GetLegalEntitiesLegalEntityIdInvoices
func NewGetLegalEntitiesLegalEntityIdInvoicesRequest(server string, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdInvoicesRequest calls the generic PostLegalEntitiesLegalEntityIdInvoices builder with application/json body
func NewPostLegalEntitiesLegalEntityIdInvoicesRequest(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesParams, body PostLegalEntitiesLegalEntityIdInvoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdInvoicesRequestWithBody(server, legalEntityId, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdInvoicesRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdInvoices with any type of body
func NewPostLegalEntitiesLegalEntityIdInvoicesRequestWithBody(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdInvoicesUploadRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdInvoicesUpload with any type of body
func NewPostLegalEntitiesLegalEntityIdInvoicesUploadRequestWithBody(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesUploadParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoices/upload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdInvoicesInvoiceIdRequest generates requests for GetLegalEntitiesLegalEntityIdInvoicesInvoiceId
func NewGetLegalEntitiesLegalEntityIdInvoicesInvoiceIdRequest(server string, legalEntityId string, invoiceId string, params *GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoices/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationRequest generates requests for GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentation
func NewGetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationRequest(server string, legalEntityId string, invoiceId string, params *GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/invoices/%s/presentation", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdPoliciesRequest generates requests for GetLegalEntitiesLegalEntityIdPolicies
func NewGetLegalEntitiesLegalEntityIdPoliciesRequest(server string, legalEntityId string, params *GetLegalEntitiesLegalEntityIdPoliciesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdPoliciesRequest calls the generic PostLegalEntitiesLegalEntityIdPolicies builder with application/json body
func NewPostLegalEntitiesLegalEntityIdPoliciesRequest(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdPoliciesParams, body PostLegalEntitiesLegalEntityIdPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdPoliciesRequestWithBody(server, legalEntityId, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdPoliciesRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdPolicies with any type of body
func NewPostLegalEntitiesLegalEntityIdPoliciesRequestWithBody(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdPoliciesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdPoliciesPolicyIdRequest generates requests for GetLegalEntitiesLegalEntityIdPoliciesPolicyId
func NewGetLegalEntitiesLegalEntityIdPoliciesPolicyIdRequest(server string, legalEntityId string, policyId string, params *GetLegalEntitiesLegalEntityIdPoliciesPolicyIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPatchLegalEntitiesLegalEntityIdPoliciesPolicyIdRequest calls the generic PatchLegalEntitiesLegalEntityIdPoliciesPolicyId builder with application/json body
func NewPatchLegalEntitiesLegalEntityIdPoliciesPolicyIdRequest(server string, legalEntityId string, policyId string, params *PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, body PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLegalEntitiesLegalEntityIdPoliciesPolicyIdRequestWithBody(server, legalEntityId, policyId, params, "application/json", bodyReader)
}

// NewPatchLegalEntitiesLegalEntityIdPoliciesPolicyIdRequestWithBody generates requests for PatchLegalEntitiesLegalEntityIdPoliciesPolicyId with any type of body
func NewPatchLegalEntitiesLegalEntityIdPoliciesPolicyIdRequestWithBody(server string, legalEntityId string, policyId string, params *PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPutLegalEntitiesLegalEntityIdPoliciesPolicyIdRequest calls the generic PutLegalEntitiesLegalEntityIdPoliciesPolicyId builder with application/json body
func NewPutLegalEntitiesLegalEntityIdPoliciesPolicyIdRequest(server string, legalEntityId string, policyId string, params *PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, body PutLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLegalEntitiesLegalEntityIdPoliciesPolicyIdRequestWithBody(server, legalEntityId, policyId, params, "application/json", bodyReader)
}

// NewPutLegalEntitiesLegalEntityIdPoliciesPolicyIdRequestWithBody generates requests for PutLegalEntitiesLegalEntityIdPoliciesPolicyId with any type of body
func NewPutLegalEntitiesLegalEntityIdPoliciesPolicyIdRequestWithBody(server string, legalEntityId string, policyId string, params *PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdSuppliersRequest generates requests for GetLegalEntitiesLegalEntityIdSuppliers
func NewGetLegalEntitiesLegalEntityIdSuppliersRequest(server string, legalEntityId string, params *GetLegalEntitiesLegalEntityIdSuppliersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/suppliers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdSuppliersRequest calls the generic PostLegalEntitiesLegalEntityIdSuppliers builder with application/json body
func NewPostLegalEntitiesLegalEntityIdSuppliersRequest(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdSuppliersParams, body PostLegalEntitiesLegalEntityIdSuppliersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdSuppliersRequestWithBody(server, legalEntityId, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdSuppliersRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdSuppliers with any type of body
func NewPostLegalEntitiesLegalEntityIdSuppliersRequestWithBody(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdSuppliersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/suppliers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdSuppliersSupplierIdRequest generates requests for GetLegalEntitiesLegalEntityIdSuppliersSupplierId
func NewGetLegalEntitiesLegalEntityIdSuppliersSupplierIdRequest(server string, legalEntityId string, supplierId string, params *GetLegalEntitiesLegalEntityIdSuppliersSupplierIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "supplierId", runtime.ParamLocationPath, supplierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/suppliers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPatchLegalEntitiesLegalEntityIdSuppliersSupplierIdRequest calls the generic PatchLegalEntitiesLegalEntityIdSuppliersSupplierId builder with application/json body
func NewPatchLegalEntitiesLegalEntityIdSuppliersSupplierIdRequest(server string, legalEntityId string, supplierId string, params *PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, body PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLegalEntitiesLegalEntityIdSuppliersSupplierIdRequestWithBody(server, legalEntityId, supplierId, params, "application/json", bodyReader)
}

// NewPatchLegalEntitiesLegalEntityIdSuppliersSupplierIdRequestWithBody generates requests for PatchLegalEntitiesLegalEntityIdSuppliersSupplierId with any type of body
func NewPatchLegalEntitiesLegalEntityIdSuppliersSupplierIdRequestWithBody(server string, legalEntityId string, supplierId string, params *PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "supplierId", runtime.ParamLocationPath, supplierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/suppliers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPutLegalEntitiesLegalEntityIdSuppliersSupplierIdRequest calls the generic PutLegalEntitiesLegalEntityIdSuppliersSupplierId builder with application/json body
func NewPutLegalEntitiesLegalEntityIdSuppliersSupplierIdRequest(server string, legalEntityId string, supplierId string, params *PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, body PutLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLegalEntitiesLegalEntityIdSuppliersSupplierIdRequestWithBody(server, legalEntityId, supplierId, params, "application/json", bodyReader)
}

// NewPutLegalEntitiesLegalEntityIdSuppliersSupplierIdRequestWithBody generates requests for PutLegalEntitiesLegalEntityIdSuppliersSupplierId with any type of body
func NewPutLegalEntitiesLegalEntityIdSuppliersSupplierIdRequestWithBody(server string, legalEntityId string, supplierId string, params *PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "supplierId", runtime.ParamLocationPath, supplierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/suppliers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdTagsRequest generates requests for GetLegalEntitiesLegalEntityIdTags
func NewGetLegalEntitiesLegalEntityIdTagsRequest(server string, legalEntityId string, params *GetLegalEntitiesLegalEntityIdTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdTagsRequest calls the generic PostLegalEntitiesLegalEntityIdTags builder with application/json body
func NewPostLegalEntitiesLegalEntityIdTagsRequest(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTagsParams, body PostLegalEntitiesLegalEntityIdTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdTagsRequestWithBody(server, legalEntityId, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdTagsRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdTags with any type of body
func NewPostLegalEntitiesLegalEntityIdTagsRequestWithBody(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTagsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteLegalEntitiesLegalEntityIdTagsTagIdRequest generates requests for DeleteLegalEntitiesLegalEntityIdTagsTagId
func NewDeleteLegalEntitiesLegalEntityIdTagsTagIdRequest(server string, legalEntityId string, tagId string, params *DeleteLegalEntitiesLegalEntityIdTagsTagIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/tags/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdTagsTagIdRequest generates requests for GetLegalEntitiesLegalEntityIdTagsTagId
func NewGetLegalEntitiesLegalEntityIdTagsTagIdRequest(server string, legalEntityId string, tagId string, params *GetLegalEntitiesLegalEntityIdTagsTagIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/tags/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPatchLegalEntitiesLegalEntityIdTagsTagIdRequest calls the generic PatchLegalEntitiesLegalEntityIdTagsTagId builder with application/json body
func NewPatchLegalEntitiesLegalEntityIdTagsTagIdRequest(server string, legalEntityId string, tagId string, params *PatchLegalEntitiesLegalEntityIdTagsTagIdParams, body PatchLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLegalEntitiesLegalEntityIdTagsTagIdRequestWithBody(server, legalEntityId, tagId, params, "application/json", bodyReader)
}

// NewPatchLegalEntitiesLegalEntityIdTagsTagIdRequestWithBody generates requests for PatchLegalEntitiesLegalEntityIdTagsTagId with any type of body
func NewPatchLegalEntitiesLegalEntityIdTagsTagIdRequestWithBody(server string, legalEntityId string, tagId string, params *PatchLegalEntitiesLegalEntityIdTagsTagIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/tags/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPutLegalEntitiesLegalEntityIdTagsTagIdRequest calls the generic PutLegalEntitiesLegalEntityIdTagsTagId builder with application/json body
func NewPutLegalEntitiesLegalEntityIdTagsTagIdRequest(server string, legalEntityId string, tagId string, params *PutLegalEntitiesLegalEntityIdTagsTagIdParams, body PutLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLegalEntitiesLegalEntityIdTagsTagIdRequestWithBody(server, legalEntityId, tagId, params, "application/json", bodyReader)
}

// NewPutLegalEntitiesLegalEntityIdTagsTagIdRequestWithBody generates requests for PutLegalEntitiesLegalEntityIdTagsTagId with any type of body
func NewPutLegalEntitiesLegalEntityIdTagsTagIdRequestWithBody(server string, legalEntityId string, tagId string, params *PutLegalEntitiesLegalEntityIdTagsTagIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/tags/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdTaxRatesRequest generates requests for GetLegalEntitiesLegalEntityIdTaxRates
func NewGetLegalEntitiesLegalEntityIdTaxRatesRequest(server string, legalEntityId string, params *GetLegalEntitiesLegalEntityIdTaxRatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/tax-rates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostLegalEntitiesLegalEntityIdTaxRatesRequest calls the generic PostLegalEntitiesLegalEntityIdTaxRates builder with application/json body
func NewPostLegalEntitiesLegalEntityIdTaxRatesRequest(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTaxRatesParams, body PostLegalEntitiesLegalEntityIdTaxRatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegalEntitiesLegalEntityIdTaxRatesRequestWithBody(server, legalEntityId, params, "application/json", bodyReader)
}

// NewPostLegalEntitiesLegalEntityIdTaxRatesRequestWithBody generates requests for PostLegalEntitiesLegalEntityIdTaxRates with any type of body
func NewPostLegalEntitiesLegalEntityIdTaxRatesRequestWithBody(server string, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTaxRatesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/tax-rates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequest generates requests for GetLegalEntitiesLegalEntityIdTaxRatesTaxRateId
func NewGetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequest(server string, legalEntityId string, taxRateId string, params *GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taxRateId", runtime.ParamLocationPath, taxRateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/tax-rates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequest calls the generic PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateId builder with application/json body
func NewPatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequest(server string, legalEntityId string, taxRateId string, params *PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, body PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequestWithBody(server, legalEntityId, taxRateId, params, "application/json", bodyReader)
}

// NewPatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequestWithBody generates requests for PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateId with any type of body
func NewPatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequestWithBody(server string, legalEntityId string, taxRateId string, params *PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taxRateId", runtime.ParamLocationPath, taxRateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/tax-rates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequest calls the generic PutLegalEntitiesLegalEntityIdTaxRatesTaxRateId builder with application/json body
func NewPutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequest(server string, legalEntityId string, taxRateId string, params *PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, body PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequestWithBody(server, legalEntityId, taxRateId, params, "application/json", bodyReader)
}

// NewPutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequestWithBody generates requests for PutLegalEntitiesLegalEntityIdTaxRatesTaxRateId with any type of body
func NewPutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdRequestWithBody(server string, legalEntityId string, taxRateId string, params *PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, legalEntityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taxRateId", runtime.ParamLocationPath, taxRateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal-entities/%s/tax-rates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetSuppliersRequest generates requests for GetSuppliers
func NewGetSuppliersRequest(server string, params *GetSuppliersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/suppliers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostSuppliersRequest calls the generic PostSuppliers builder with application/json body
func NewPostSuppliersRequest(server string, params *PostSuppliersParams, body PostSuppliersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSuppliersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSuppliersRequestWithBody generates requests for PostSuppliers with any type of body
func NewPostSuppliersRequestWithBody(server string, params *PostSuppliersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/suppliers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetSuppliersSupplierIdRequest generates requests for GetSuppliersSupplierId
func NewGetSuppliersSupplierIdRequest(server string, supplierId string, params *GetSuppliersSupplierIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supplierId", runtime.ParamLocationPath, supplierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/suppliers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPatchSuppliersSupplierIdRequest calls the generic PatchSuppliersSupplierId builder with application/json body
func NewPatchSuppliersSupplierIdRequest(server string, supplierId string, params *PatchSuppliersSupplierIdParams, body PatchSuppliersSupplierIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSuppliersSupplierIdRequestWithBody(server, supplierId, params, "application/json", bodyReader)
}

// NewPatchSuppliersSupplierIdRequestWithBody generates requests for PatchSuppliersSupplierId with any type of body
func NewPatchSuppliersSupplierIdRequestWithBody(server string, supplierId string, params *PatchSuppliersSupplierIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supplierId", runtime.ParamLocationPath, supplierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/suppliers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPutSuppliersSupplierIdRequest calls the generic PutSuppliersSupplierId builder with application/json body
func NewPutSuppliersSupplierIdRequest(server string, supplierId string, params *PutSuppliersSupplierIdParams, body PutSuppliersSupplierIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSuppliersSupplierIdRequestWithBody(server, supplierId, params, "application/json", bodyReader)
}

// NewPutSuppliersSupplierIdRequestWithBody generates requests for PutSuppliersSupplierId with any type of body
func NewPutSuppliersSupplierIdRequestWithBody(server string, supplierId string, params *PutSuppliersSupplierIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supplierId", runtime.ParamLocationPath, supplierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/suppliers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetTripsRequest generates requests for GetTrips
func NewGetTripsRequest(server string, params *GetTripsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetTripsTripIdRequest generates requests for GetTripsTripId
func NewGetTripsTripIdRequest(server string, tripId string, params *GetTripsTripIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tripId", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPostUsersRequest calls the generic PostUsers builder with application/json body
func NewPostUsersRequest(server string, params *PostUsersParams, body PostUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUsersRequestWithBody generates requests for PostUsers with any type of body
func NewPostUsersRequestWithBody(server string, params *PostUsersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteUsersUserIdRequest generates requests for DeleteUsersUserId
func NewDeleteUsersUserIdRequest(server string, userId string, params *DeleteUsersUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewGetUsersUserIdRequest generates requests for GetUsersUserId
func NewGetUsersUserIdRequest(server string, userId string, params *GetUsersUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPatchUsersUserIdRequest calls the generic PatchUsersUserId builder with application/json body
func NewPatchUsersUserIdRequest(server string, userId string, params *PatchUsersUserIdParams, body PatchUsersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUsersUserIdRequestWithBody(server, userId, params, "application/json", bodyReader)
}

// NewPatchUsersUserIdRequestWithBody generates requests for PatchUsersUserId with any type of body
func NewPatchUsersUserIdRequestWithBody(server string, userId string, params *PatchUsersUserIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

// NewPutUsersUserIdRequest calls the generic PutUsersUserId builder with application/json body
func NewPutUsersUserIdRequest(server string, userId string, params *PutUsersUserIdParams, body PutUsersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUsersUserIdRequestWithBody(server, userId, params, "application/json", bodyReader)
}

// NewPutUsersUserIdRequestWithBody generates requests for PutUsersUserId with any type of body
func NewPutUsersUserIdRequestWithBody(server string, userId string, params *PutUsersUserIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, params.XYkAuthMethod)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Yk-Auth-Method", headerParam0)

		if params.XYkCorrelationId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, *params.XYkCorrelationId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Yk-Correlation-Id", headerParam1)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetExpensesWithResponse request
	GetExpensesWithResponse(ctx context.Context, params *GetExpensesParams, reqEditors ...RequestEditorFn) (*GetExpensesResponse, error)

	// GetExpensesExpenseIdWithResponse request
	GetExpensesExpenseIdWithResponse(ctx context.Context, expenseId string, params *GetExpensesExpenseIdParams, reqEditors ...RequestEditorFn) (*GetExpensesExpenseIdResponse, error)

	// GetLegalEntitiesWithResponse request
	GetLegalEntitiesWithResponse(ctx context.Context, params *GetLegalEntitiesParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesResponse, error)

	// GetLegalEntitiesLegalEntityIdWithResponse request
	GetLegalEntitiesLegalEntityIdWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdResponse, error)

	// GetLegalEntitiesLegalEntityIdCategoriesWithResponse request
	GetLegalEntitiesLegalEntityIdCategoriesWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCategoriesParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdCategoriesResponse, error)

	// PostLegalEntitiesLegalEntityIdCategoriesWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdCategoriesWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdCategoriesResponse, error)

	PostLegalEntitiesLegalEntityIdCategoriesWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCategoriesParams, body PostLegalEntitiesLegalEntityIdCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdCategoriesResponse, error)

	// GetLegalEntitiesLegalEntityIdCategoriesCategoryIdWithResponse request
	GetLegalEntitiesLegalEntityIdCategoriesCategoryIdWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *GetLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse, error)

	// PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBodyWithResponse request with any body
	PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBodyWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse, error)

	PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, body PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse, error)

	// PutLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBodyWithResponse request with any body
	PutLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBodyWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse, error)

	PutLegalEntitiesLegalEntityIdCategoriesCategoryIdWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, body PutLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse, error)

	// GetLegalEntitiesLegalEntityIdCompanyCardsWithResponse request
	GetLegalEntitiesLegalEntityIdCompanyCardsWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCompanyCardsParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdCompanyCardsResponse, error)

	// PostLegalEntitiesLegalEntityIdCompanyCardsWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdCompanyCardsWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCompanyCardsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdCompanyCardsResponse, error)

	PostLegalEntitiesLegalEntityIdCompanyCardsWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCompanyCardsParams, body PostLegalEntitiesLegalEntityIdCompanyCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdCompanyCardsResponse, error)

	// GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithResponse request
	GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithResponse(ctx context.Context, legalEntityId string, companyCardId string, params *GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse, error)

	// PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBodyWithResponse request with any body
	PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBodyWithResponse(ctx context.Context, legalEntityId string, companyCardId string, params *PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse, error)

	PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithResponse(ctx context.Context, legalEntityId string, companyCardId string, params *PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, body PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse, error)

	// PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBodyWithResponse request with any body
	PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBodyWithResponse(ctx context.Context, legalEntityId string, companyCardId string, params *PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse, error)

	PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithResponse(ctx context.Context, legalEntityId string, companyCardId string, params *PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, body PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse, error)

	// GetLegalEntitiesLegalEntityIdCostCentersWithResponse request
	GetLegalEntitiesLegalEntityIdCostCentersWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCostCentersParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdCostCentersResponse, error)

	// PostLegalEntitiesLegalEntityIdCostCentersWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdCostCentersWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCostCentersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdCostCentersResponse, error)

	PostLegalEntitiesLegalEntityIdCostCentersWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCostCentersParams, body PostLegalEntitiesLegalEntityIdCostCentersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdCostCentersResponse, error)

	// DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse request
	DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse(ctx context.Context, legalEntityId string, costCenterId string, params *DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, reqEditors ...RequestEditorFn) (*DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error)

	// GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse request
	GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse(ctx context.Context, legalEntityId string, costCenterId string, params *GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error)

	// PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBodyWithResponse request with any body
	PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBodyWithResponse(ctx context.Context, legalEntityId string, costCenterId string, params *PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error)

	PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse(ctx context.Context, legalEntityId string, costCenterId string, params *PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, body PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error)

	// PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBodyWithResponse request with any body
	PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBodyWithResponse(ctx context.Context, legalEntityId string, costCenterId string, params *PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error)

	PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse(ctx context.Context, legalEntityId string, costCenterId string, params *PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, body PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error)

	// PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksWithBodyWithResponse(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse, error)

	PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksWithResponse(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams, body PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse, error)

	// GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdWithResponse request
	GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdWithResponse(ctx context.Context, legalEntityId string, exportTaskId string, params *GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdResponse, error)

	// GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsWithResponse request
	GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsWithResponse(ctx context.Context, legalEntityId string, exportTaskId string, params *GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsResponse, error)

	// GetLegalEntitiesLegalEntityIdInvoiceCategoriesWithResponse request
	GetLegalEntitiesLegalEntityIdInvoiceCategoriesWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoiceCategoriesParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoiceCategoriesResponse, error)

	// PostLegalEntitiesLegalEntityIdInvoiceCategoriesWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdInvoiceCategoriesWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse, error)

	PostLegalEntitiesLegalEntityIdInvoiceCategoriesWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams, body PostLegalEntitiesLegalEntityIdInvoiceCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse, error)

	// GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithResponse request
	GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse, error)

	// PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBodyWithResponse request with any body
	PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBodyWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse, error)

	PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, body PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse, error)

	// PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBodyWithResponse request with any body
	PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBodyWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse, error)

	PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, body PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse, error)

	// PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksWithBodyWithResponse(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse, error)

	PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksWithResponse(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams, body PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse, error)

	// GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithResponse request
	GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse, error)

	// PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse, error)

	PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, body PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse, error)

	// GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithResponse request
	GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithResponse(ctx context.Context, legalEntityId string, goodsReceiptId string, params *GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse, error)

	// PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBodyWithResponse request with any body
	PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBodyWithResponse(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse, error)

	PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithResponse(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, body PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse, error)

	// PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBodyWithResponse request with any body
	PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBodyWithResponse(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse, error)

	PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithResponse(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, body PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse, error)

	// GetLegalEntitiesLegalEntityIdInvoicePaymentTermsWithResponse request
	GetLegalEntitiesLegalEntityIdInvoicePaymentTermsWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse, error)

	// PostLegalEntitiesLegalEntityIdInvoicePaymentTermsWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdInvoicePaymentTermsWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse, error)

	PostLegalEntitiesLegalEntityIdInvoicePaymentTermsWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, body PostLegalEntitiesLegalEntityIdInvoicePaymentTermsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse, error)

	// GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithResponse request
	GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithResponse(ctx context.Context, legalEntityId string, paymentTermId string, params *GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse, error)

	// PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBodyWithResponse request with any body
	PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBodyWithResponse(ctx context.Context, legalEntityId string, paymentTermId string, params *PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse, error)

	PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithResponse(ctx context.Context, legalEntityId string, paymentTermId string, params *PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, body PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse, error)

	// PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBodyWithResponse request with any body
	PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBodyWithResponse(ctx context.Context, legalEntityId string, paymentTermId string, params *PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse, error)

	PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithResponse(ctx context.Context, legalEntityId string, paymentTermId string, params *PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, body PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse, error)

	// GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithResponse request
	GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse, error)

	// PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse, error)

	PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, body PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse, error)

	// GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithResponse request
	GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithResponse(ctx context.Context, legalEntityId string, purchaseOrderId string, params *GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse, error)

	// PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBodyWithResponse request with any body
	PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBodyWithResponse(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse, error)

	PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithResponse(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, body PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse, error)

	// PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBodyWithResponse request with any body
	PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBodyWithResponse(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse, error)

	PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithResponse(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, body PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse, error)

	// GetLegalEntitiesLegalEntityIdInvoicesWithResponse request
	GetLegalEntitiesLegalEntityIdInvoicesWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicesParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicesResponse, error)

	// PostLegalEntitiesLegalEntityIdInvoicesWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdInvoicesWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicesResponse, error)

	PostLegalEntitiesLegalEntityIdInvoicesWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesParams, body PostLegalEntitiesLegalEntityIdInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicesResponse, error)

	// PostLegalEntitiesLegalEntityIdInvoicesUploadWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdInvoicesUploadWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicesUploadResponse, error)

	// GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdWithResponse request
	GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdWithResponse(ctx context.Context, legalEntityId string, invoiceId string, params *GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdResponse, error)

	// GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationWithResponse request
	GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationWithResponse(ctx context.Context, legalEntityId string, invoiceId string, params *GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationResponse, error)

	// GetLegalEntitiesLegalEntityIdPoliciesWithResponse request
	GetLegalEntitiesLegalEntityIdPoliciesWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdPoliciesParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdPoliciesResponse, error)

	// PostLegalEntitiesLegalEntityIdPoliciesWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdPoliciesWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdPoliciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdPoliciesResponse, error)

	PostLegalEntitiesLegalEntityIdPoliciesWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdPoliciesParams, body PostLegalEntitiesLegalEntityIdPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdPoliciesResponse, error)

	// GetLegalEntitiesLegalEntityIdPoliciesPolicyIdWithResponse request
	GetLegalEntitiesLegalEntityIdPoliciesPolicyIdWithResponse(ctx context.Context, legalEntityId string, policyId string, params *GetLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse, error)

	// PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBodyWithResponse request with any body
	PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBodyWithResponse(ctx context.Context, legalEntityId string, policyId string, params *PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse, error)

	PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdWithResponse(ctx context.Context, legalEntityId string, policyId string, params *PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, body PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse, error)

	// PutLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBodyWithResponse request with any body
	PutLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBodyWithResponse(ctx context.Context, legalEntityId string, policyId string, params *PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse, error)

	PutLegalEntitiesLegalEntityIdPoliciesPolicyIdWithResponse(ctx context.Context, legalEntityId string, policyId string, params *PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, body PutLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse, error)

	// GetLegalEntitiesLegalEntityIdSuppliersWithResponse request
	GetLegalEntitiesLegalEntityIdSuppliersWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdSuppliersParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdSuppliersResponse, error)

	// PostLegalEntitiesLegalEntityIdSuppliersWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdSuppliersWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdSuppliersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdSuppliersResponse, error)

	PostLegalEntitiesLegalEntityIdSuppliersWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdSuppliersParams, body PostLegalEntitiesLegalEntityIdSuppliersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdSuppliersResponse, error)

	// GetLegalEntitiesLegalEntityIdSuppliersSupplierIdWithResponse request
	GetLegalEntitiesLegalEntityIdSuppliersSupplierIdWithResponse(ctx context.Context, legalEntityId string, supplierId string, params *GetLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse, error)

	// PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBodyWithResponse request with any body
	PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBodyWithResponse(ctx context.Context, legalEntityId string, supplierId string, params *PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse, error)

	PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdWithResponse(ctx context.Context, legalEntityId string, supplierId string, params *PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, body PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse, error)

	// PutLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBodyWithResponse request with any body
	PutLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBodyWithResponse(ctx context.Context, legalEntityId string, supplierId string, params *PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse, error)

	PutLegalEntitiesLegalEntityIdSuppliersSupplierIdWithResponse(ctx context.Context, legalEntityId string, supplierId string, params *PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, body PutLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse, error)

	// GetLegalEntitiesLegalEntityIdTagsWithResponse request
	GetLegalEntitiesLegalEntityIdTagsWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdTagsParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdTagsResponse, error)

	// PostLegalEntitiesLegalEntityIdTagsWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdTagsWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdTagsResponse, error)

	PostLegalEntitiesLegalEntityIdTagsWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTagsParams, body PostLegalEntitiesLegalEntityIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdTagsResponse, error)

	// DeleteLegalEntitiesLegalEntityIdTagsTagIdWithResponse request
	DeleteLegalEntitiesLegalEntityIdTagsTagIdWithResponse(ctx context.Context, legalEntityId string, tagId string, params *DeleteLegalEntitiesLegalEntityIdTagsTagIdParams, reqEditors ...RequestEditorFn) (*DeleteLegalEntitiesLegalEntityIdTagsTagIdResponse, error)

	// GetLegalEntitiesLegalEntityIdTagsTagIdWithResponse request
	GetLegalEntitiesLegalEntityIdTagsTagIdWithResponse(ctx context.Context, legalEntityId string, tagId string, params *GetLegalEntitiesLegalEntityIdTagsTagIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdTagsTagIdResponse, error)

	// PatchLegalEntitiesLegalEntityIdTagsTagIdWithBodyWithResponse request with any body
	PatchLegalEntitiesLegalEntityIdTagsTagIdWithBodyWithResponse(ctx context.Context, legalEntityId string, tagId string, params *PatchLegalEntitiesLegalEntityIdTagsTagIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdTagsTagIdResponse, error)

	PatchLegalEntitiesLegalEntityIdTagsTagIdWithResponse(ctx context.Context, legalEntityId string, tagId string, params *PatchLegalEntitiesLegalEntityIdTagsTagIdParams, body PatchLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdTagsTagIdResponse, error)

	// PutLegalEntitiesLegalEntityIdTagsTagIdWithBodyWithResponse request with any body
	PutLegalEntitiesLegalEntityIdTagsTagIdWithBodyWithResponse(ctx context.Context, legalEntityId string, tagId string, params *PutLegalEntitiesLegalEntityIdTagsTagIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdTagsTagIdResponse, error)

	PutLegalEntitiesLegalEntityIdTagsTagIdWithResponse(ctx context.Context, legalEntityId string, tagId string, params *PutLegalEntitiesLegalEntityIdTagsTagIdParams, body PutLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdTagsTagIdResponse, error)

	// GetLegalEntitiesLegalEntityIdTaxRatesWithResponse request
	GetLegalEntitiesLegalEntityIdTaxRatesWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdTaxRatesParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdTaxRatesResponse, error)

	// PostLegalEntitiesLegalEntityIdTaxRatesWithBodyWithResponse request with any body
	PostLegalEntitiesLegalEntityIdTaxRatesWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdTaxRatesResponse, error)

	PostLegalEntitiesLegalEntityIdTaxRatesWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTaxRatesParams, body PostLegalEntitiesLegalEntityIdTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdTaxRatesResponse, error)

	// GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithResponse request
	GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithResponse(ctx context.Context, legalEntityId string, taxRateId string, params *GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse, error)

	// PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBodyWithResponse request with any body
	PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBodyWithResponse(ctx context.Context, legalEntityId string, taxRateId string, params *PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse, error)

	PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithResponse(ctx context.Context, legalEntityId string, taxRateId string, params *PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, body PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse, error)

	// PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBodyWithResponse request with any body
	PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBodyWithResponse(ctx context.Context, legalEntityId string, taxRateId string, params *PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse, error)

	PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithResponse(ctx context.Context, legalEntityId string, taxRateId string, params *PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, body PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse, error)

	// GetSuppliersWithResponse request
	GetSuppliersWithResponse(ctx context.Context, params *GetSuppliersParams, reqEditors ...RequestEditorFn) (*GetSuppliersResponse, error)

	// PostSuppliersWithBodyWithResponse request with any body
	PostSuppliersWithBodyWithResponse(ctx context.Context, params *PostSuppliersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSuppliersResponse, error)

	PostSuppliersWithResponse(ctx context.Context, params *PostSuppliersParams, body PostSuppliersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSuppliersResponse, error)

	// GetSuppliersSupplierIdWithResponse request
	GetSuppliersSupplierIdWithResponse(ctx context.Context, supplierId string, params *GetSuppliersSupplierIdParams, reqEditors ...RequestEditorFn) (*GetSuppliersSupplierIdResponse, error)

	// PatchSuppliersSupplierIdWithBodyWithResponse request with any body
	PatchSuppliersSupplierIdWithBodyWithResponse(ctx context.Context, supplierId string, params *PatchSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSuppliersSupplierIdResponse, error)

	PatchSuppliersSupplierIdWithResponse(ctx context.Context, supplierId string, params *PatchSuppliersSupplierIdParams, body PatchSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSuppliersSupplierIdResponse, error)

	// PutSuppliersSupplierIdWithBodyWithResponse request with any body
	PutSuppliersSupplierIdWithBodyWithResponse(ctx context.Context, supplierId string, params *PutSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSuppliersSupplierIdResponse, error)

	PutSuppliersSupplierIdWithResponse(ctx context.Context, supplierId string, params *PutSuppliersSupplierIdParams, body PutSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSuppliersSupplierIdResponse, error)

	// GetTripsWithResponse request
	GetTripsWithResponse(ctx context.Context, params *GetTripsParams, reqEditors ...RequestEditorFn) (*GetTripsResponse, error)

	// GetTripsTripIdWithResponse request
	GetTripsTripIdWithResponse(ctx context.Context, tripId string, params *GetTripsTripIdParams, reqEditors ...RequestEditorFn) (*GetTripsTripIdResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// PostUsersWithBodyWithResponse request with any body
	PostUsersWithBodyWithResponse(ctx context.Context, params *PostUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	PostUsersWithResponse(ctx context.Context, params *PostUsersParams, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	// DeleteUsersUserIdWithResponse request
	DeleteUsersUserIdWithResponse(ctx context.Context, userId string, params *DeleteUsersUserIdParams, reqEditors ...RequestEditorFn) (*DeleteUsersUserIdResponse, error)

	// GetUsersUserIdWithResponse request
	GetUsersUserIdWithResponse(ctx context.Context, userId string, params *GetUsersUserIdParams, reqEditors ...RequestEditorFn) (*GetUsersUserIdResponse, error)

	// PatchUsersUserIdWithBodyWithResponse request with any body
	PatchUsersUserIdWithBodyWithResponse(ctx context.Context, userId string, params *PatchUsersUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersUserIdResponse, error)

	PatchUsersUserIdWithResponse(ctx context.Context, userId string, params *PatchUsersUserIdParams, body PatchUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersUserIdResponse, error)

	// PutUsersUserIdWithBodyWithResponse request with any body
	PutUsersUserIdWithBodyWithResponse(ctx context.Context, userId string, params *PutUsersUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersUserIdResponse, error)

	PutUsersUserIdWithResponse(ctx context.Context, userId string, params *PutUsersUserIdParams, body PutUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersUserIdResponse, error)
}

type GetExpensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Expenses *[]Expense `json:"expenses,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetExpensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExpensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExpensesExpenseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Expense
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetExpensesExpenseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExpensesExpenseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		LegalEntities *[]LegalEntity `json:"legalEntities,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LegalEntity
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Categories *[]Category `json:"categories,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Category
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdCompanyCardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CompanyCards *[]CompanyCard `json:"companyCards,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdCompanyCardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdCompanyCardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdCompanyCardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CompanyCard
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdCompanyCardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdCompanyCardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyCard
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyCard
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyCard
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdCostCentersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CostCenters *[]CostCenter `json:"costCenters,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdCostCentersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdCostCentersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdCostCentersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CostCenter
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdCostCentersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdCostCentersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostCenter
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostCenter
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostCenter
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Resource task id of the export
		Resource *string `json:"resource,omitempty"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdInvoiceCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		InvoiceCategories *[]InvoiceCategory `json:"invoice-categories,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdInvoiceCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdInvoiceCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InvoiceCategory
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceCategory
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceCategory
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceCategory
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Resource task id of the export
		Resource *string `json:"resource,omitempty"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		InvoiceGoodsReceipts *[]GoodsReceipt `json:"invoice-goods-receipts,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GoodsReceipt
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GoodsReceipt
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GoodsReceipt
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GoodsReceipt
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		InvoicePaymentTerms *[]InvoicePaymentTerms `json:"invoice-payment-terms,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InvoicePaymentTerms
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoicePaymentTerms
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoicePaymentTerms
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoicePaymentTerms
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		InvoicePurchaseOrders *[]PurchaseOrder `json:"invoice-purchase-orders,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PurchaseOrder
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PurchaseOrder
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PurchaseOrder
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PurchaseOrder
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdInvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Invoices *[]Invoice `json:"invoices,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdInvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Invoice
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdInvoicesUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Invoice
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdInvoicesUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdInvoicesUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Policies *[]Policy `json:"policies,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Policy
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdSuppliersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Suppliers *[]Supplier `json:"suppliers,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdSuppliersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdSuppliersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdSuppliersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Supplier
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdSuppliersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdSuppliersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Supplier
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Supplier
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Supplier
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Tags *[]Tag `json:"tags,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Tag
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLegalEntitiesLegalEntityIdTagsTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r DeleteLegalEntitiesLegalEntityIdTagsTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLegalEntitiesLegalEntityIdTagsTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdTagsTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdTagsTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdTagsTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLegalEntitiesLegalEntityIdTagsTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PatchLegalEntitiesLegalEntityIdTagsTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLegalEntitiesLegalEntityIdTagsTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLegalEntitiesLegalEntityIdTagsTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PutLegalEntitiesLegalEntityIdTagsTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLegalEntitiesLegalEntityIdTagsTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdTaxRatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		TaxRates *[]TaxRate `json:"taxRates,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdTaxRatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdTaxRatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegalEntitiesLegalEntityIdTaxRatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TaxRate
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostLegalEntitiesLegalEntityIdTaxRatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegalEntitiesLegalEntityIdTaxRatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaxRate
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaxRate
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaxRate
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSuppliersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		OrganizationSuppliers *[]OrganizationSupplier `json:"organization-suppliers,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetSuppliersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSuppliersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSuppliersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OrganizationSupplier
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostSuppliersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSuppliersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSuppliersSupplierIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationSupplier
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetSuppliersSupplierIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSuppliersSupplierIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSuppliersSupplierIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationSupplier
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PatchSuppliersSupplierIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSuppliersSupplierIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSuppliersSupplierIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationSupplier
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PutSuppliersSupplierIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSuppliersSupplierIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTripsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Trips *[]Trip `json:"trips,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetTripsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTripsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTripsTripIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trip
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetTripsTripIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTripsTripIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Users *[]User `json:"users,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PostUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r DeleteUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r GetUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PatchUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
}

// Status returns HTTPResponse.Status
func (r PutUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetExpensesWithResponse request returning *GetExpensesResponse
func (c *ClientWithResponses) GetExpensesWithResponse(ctx context.Context, params *GetExpensesParams, reqEditors ...RequestEditorFn) (*GetExpensesResponse, error) {
	rsp, err := c.GetExpenses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExpensesResponse(rsp)
}

// GetExpensesExpenseIdWithResponse request returning *GetExpensesExpenseIdResponse
func (c *ClientWithResponses) GetExpensesExpenseIdWithResponse(ctx context.Context, expenseId string, params *GetExpensesExpenseIdParams, reqEditors ...RequestEditorFn) (*GetExpensesExpenseIdResponse, error) {
	rsp, err := c.GetExpensesExpenseId(ctx, expenseId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExpensesExpenseIdResponse(rsp)
}

// GetLegalEntitiesWithResponse request returning *GetLegalEntitiesResponse
func (c *ClientWithResponses) GetLegalEntitiesWithResponse(ctx context.Context, params *GetLegalEntitiesParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesResponse, error) {
	rsp, err := c.GetLegalEntities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdWithResponse request returning *GetLegalEntitiesLegalEntityIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityId(ctx, legalEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdCategoriesWithResponse request returning *GetLegalEntitiesLegalEntityIdCategoriesResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdCategoriesWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCategoriesParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdCategoriesResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdCategories(ctx, legalEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdCategoriesResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdCategoriesWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdCategoriesResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdCategoriesWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdCategoriesResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdCategoriesWithBody(ctx, legalEntityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdCategoriesResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdCategoriesWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCategoriesParams, body PostLegalEntitiesLegalEntityIdCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdCategoriesResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdCategories(ctx, legalEntityId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdCategoriesResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdCategoriesCategoryIdWithResponse request returning *GetLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdCategoriesCategoryIdWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *GetLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx, legalEntityId, categoryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse(rsp)
}

// PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBodyWithResponse request with arbitrary body returning *PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse
func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBodyWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBody(ctx, legalEntityId, categoryId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse(rsp)
}

func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, body PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx, legalEntityId, categoryId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse(rsp)
}

// PutLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBodyWithResponse request with arbitrary body returning *PutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse
func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBodyWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdCategoriesCategoryIdWithBody(ctx, legalEntityId, categoryId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse(rsp)
}

func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdCategoriesCategoryIdWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams, body PutLegalEntitiesLegalEntityIdCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx, legalEntityId, categoryId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdCompanyCardsWithResponse request returning *GetLegalEntitiesLegalEntityIdCompanyCardsResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdCompanyCardsWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCompanyCardsParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdCompanyCardsResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdCompanyCards(ctx, legalEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdCompanyCardsResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdCompanyCardsWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdCompanyCardsResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdCompanyCardsWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCompanyCardsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdCompanyCardsResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdCompanyCardsWithBody(ctx, legalEntityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdCompanyCardsResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdCompanyCardsWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCompanyCardsParams, body PostLegalEntitiesLegalEntityIdCompanyCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdCompanyCardsResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdCompanyCards(ctx, legalEntityId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdCompanyCardsResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithResponse request returning *GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithResponse(ctx context.Context, legalEntityId string, companyCardId string, params *GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx, legalEntityId, companyCardId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse(rsp)
}

// PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBodyWithResponse request with arbitrary body returning *PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse
func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBodyWithResponse(ctx context.Context, legalEntityId string, companyCardId string, params *PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBody(ctx, legalEntityId, companyCardId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse(rsp)
}

func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithResponse(ctx context.Context, legalEntityId string, companyCardId string, params *PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, body PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx, legalEntityId, companyCardId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse(rsp)
}

// PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBodyWithResponse request with arbitrary body returning *PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse
func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBodyWithResponse(ctx context.Context, legalEntityId string, companyCardId string, params *PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithBody(ctx, legalEntityId, companyCardId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse(rsp)
}

func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithResponse(ctx context.Context, legalEntityId string, companyCardId string, params *PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams, body PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx, legalEntityId, companyCardId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdCostCentersWithResponse request returning *GetLegalEntitiesLegalEntityIdCostCentersResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdCostCentersWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdCostCentersParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdCostCentersResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdCostCenters(ctx, legalEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdCostCentersResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdCostCentersWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdCostCentersResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdCostCentersWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCostCentersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdCostCentersResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdCostCentersWithBody(ctx, legalEntityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdCostCentersResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdCostCentersWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdCostCentersParams, body PostLegalEntitiesLegalEntityIdCostCentersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdCostCentersResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdCostCenters(ctx, legalEntityId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdCostCentersResponse(rsp)
}

// DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse request returning *DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse
func (c *ClientWithResponses) DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse(ctx context.Context, legalEntityId string, costCenterId string, params *DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, reqEditors ...RequestEditorFn) (*DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error) {
	rsp, err := c.DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx, legalEntityId, costCenterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse request returning *GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse(ctx context.Context, legalEntityId string, costCenterId string, params *GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx, legalEntityId, costCenterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse(rsp)
}

// PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBodyWithResponse request with arbitrary body returning *PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse
func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBodyWithResponse(ctx context.Context, legalEntityId string, costCenterId string, params *PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBody(ctx, legalEntityId, costCenterId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse(rsp)
}

func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse(ctx context.Context, legalEntityId string, costCenterId string, params *PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, body PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx, legalEntityId, costCenterId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse(rsp)
}

// PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBodyWithResponse request with arbitrary body returning *PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse
func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBodyWithResponse(ctx context.Context, legalEntityId string, costCenterId string, params *PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithBody(ctx, legalEntityId, costCenterId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse(rsp)
}

func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse(ctx context.Context, legalEntityId string, costCenterId string, params *PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams, body PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx, legalEntityId, costCenterId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksWithBodyWithResponse(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksWithBody(ctx, legalEntityId, exportFacility, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksWithResponse(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams, body PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks(ctx, legalEntityId, exportFacility, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdWithResponse request returning *GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdWithResponse(ctx context.Context, legalEntityId string, exportTaskId string, params *GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdExportTasksExportTaskId(ctx, legalEntityId, exportTaskId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdExportTasksExportTaskIdResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsWithResponse request returning *GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsWithResponse(ctx context.Context, legalEntityId string, exportTaskId string, params *GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefacts(ctx, legalEntityId, exportTaskId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdInvoiceCategoriesWithResponse request returning *GetLegalEntitiesLegalEntityIdInvoiceCategoriesResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdInvoiceCategoriesWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoiceCategoriesParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoiceCategoriesResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdInvoiceCategories(ctx, legalEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdInvoiceCategoriesResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdInvoiceCategoriesWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdInvoiceCategoriesWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdInvoiceCategoriesWithBody(ctx, legalEntityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdInvoiceCategoriesWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams, body PostLegalEntitiesLegalEntityIdInvoiceCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdInvoiceCategories(ctx, legalEntityId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithResponse request returning *GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx, legalEntityId, categoryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse(rsp)
}

// PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBodyWithResponse request with arbitrary body returning *PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse
func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBodyWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBody(ctx, legalEntityId, categoryId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse(rsp)
}

func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, body PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx, legalEntityId, categoryId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse(rsp)
}

// PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBodyWithResponse request with arbitrary body returning *PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse
func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBodyWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithBody(ctx, legalEntityId, categoryId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse(rsp)
}

func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithResponse(ctx context.Context, legalEntityId string, categoryId string, params *PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams, body PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx, legalEntityId, categoryId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksWithBodyWithResponse(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksWithBody(ctx, legalEntityId, exportFacility, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksWithResponse(ctx context.Context, legalEntityId string, exportFacility string, params *PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams, body PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks(ctx, legalEntityId, exportFacility, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithResponse request returning *GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdInvoiceGoodsReceipts(ctx, legalEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithBody(ctx, legalEntityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams, body PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdInvoiceGoodsReceipts(ctx, legalEntityId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithResponse request returning *GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithResponse(ctx context.Context, legalEntityId string, goodsReceiptId string, params *GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx, legalEntityId, goodsReceiptId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse(rsp)
}

// PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBodyWithResponse request with arbitrary body returning *PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse
func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBodyWithResponse(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBody(ctx, legalEntityId, goodsReceiptId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse(rsp)
}

func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithResponse(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, body PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx, legalEntityId, goodsReceiptId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse(rsp)
}

// PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBodyWithResponse request with arbitrary body returning *PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse
func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBodyWithResponse(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithBody(ctx, legalEntityId, goodsReceiptId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse(rsp)
}

func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithResponse(ctx context.Context, legalEntityId string, goodsReceiptId string, params *PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams, body PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx, legalEntityId, goodsReceiptId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdInvoicePaymentTermsWithResponse request returning *GetLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdInvoicePaymentTermsWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdInvoicePaymentTerms(ctx, legalEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdInvoicePaymentTermsWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdInvoicePaymentTermsWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdInvoicePaymentTermsWithBody(ctx, legalEntityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdInvoicePaymentTermsWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams, body PostLegalEntitiesLegalEntityIdInvoicePaymentTermsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdInvoicePaymentTerms(ctx, legalEntityId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithResponse request returning *GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithResponse(ctx context.Context, legalEntityId string, paymentTermId string, params *GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx, legalEntityId, paymentTermId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse(rsp)
}

// PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBodyWithResponse request with arbitrary body returning *PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse
func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBodyWithResponse(ctx context.Context, legalEntityId string, paymentTermId string, params *PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBody(ctx, legalEntityId, paymentTermId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse(rsp)
}

func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithResponse(ctx context.Context, legalEntityId string, paymentTermId string, params *PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, body PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx, legalEntityId, paymentTermId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse(rsp)
}

// PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBodyWithResponse request with arbitrary body returning *PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse
func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBodyWithResponse(ctx context.Context, legalEntityId string, paymentTermId string, params *PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithBody(ctx, legalEntityId, paymentTermId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse(rsp)
}

func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithResponse(ctx context.Context, legalEntityId string, paymentTermId string, params *PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams, body PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx, legalEntityId, paymentTermId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithResponse request returning *GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdInvoicePurchaseOrders(ctx, legalEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithBody(ctx, legalEntityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams, body PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdInvoicePurchaseOrders(ctx, legalEntityId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithResponse request returning *GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithResponse(ctx context.Context, legalEntityId string, purchaseOrderId string, params *GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx, legalEntityId, purchaseOrderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse(rsp)
}

// PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBodyWithResponse request with arbitrary body returning *PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse
func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBodyWithResponse(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBody(ctx, legalEntityId, purchaseOrderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse(rsp)
}

func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithResponse(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, body PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx, legalEntityId, purchaseOrderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse(rsp)
}

// PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBodyWithResponse request with arbitrary body returning *PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse
func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBodyWithResponse(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithBody(ctx, legalEntityId, purchaseOrderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse(rsp)
}

func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithResponse(ctx context.Context, legalEntityId string, purchaseOrderId string, params *PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams, body PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx, legalEntityId, purchaseOrderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdInvoicesWithResponse request returning *GetLegalEntitiesLegalEntityIdInvoicesResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdInvoicesWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdInvoicesParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicesResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdInvoices(ctx, legalEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdInvoicesResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdInvoicesWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdInvoicesResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdInvoicesWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicesResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdInvoicesWithBody(ctx, legalEntityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdInvoicesResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdInvoicesWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesParams, body PostLegalEntitiesLegalEntityIdInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicesResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdInvoices(ctx, legalEntityId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdInvoicesResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdInvoicesUploadWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdInvoicesUploadResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdInvoicesUploadWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdInvoicesUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdInvoicesUploadResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdInvoicesUploadWithBody(ctx, legalEntityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdInvoicesUploadResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdWithResponse request returning *GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdWithResponse(ctx context.Context, legalEntityId string, invoiceId string, params *GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdInvoicesInvoiceId(ctx, legalEntityId, invoiceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdInvoicesInvoiceIdResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationWithResponse request returning *GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationWithResponse(ctx context.Context, legalEntityId string, invoiceId string, params *GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentation(ctx, legalEntityId, invoiceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdPoliciesWithResponse request returning *GetLegalEntitiesLegalEntityIdPoliciesResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdPoliciesWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdPoliciesParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdPoliciesResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdPolicies(ctx, legalEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdPoliciesResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdPoliciesWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdPoliciesResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdPoliciesWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdPoliciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdPoliciesResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdPoliciesWithBody(ctx, legalEntityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdPoliciesWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdPoliciesParams, body PostLegalEntitiesLegalEntityIdPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdPoliciesResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdPolicies(ctx, legalEntityId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdPoliciesResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdPoliciesPolicyIdWithResponse request returning *GetLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdPoliciesPolicyIdWithResponse(ctx context.Context, legalEntityId string, policyId string, params *GetLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx, legalEntityId, policyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse(rsp)
}

// PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBodyWithResponse request with arbitrary body returning *PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse
func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBodyWithResponse(ctx context.Context, legalEntityId string, policyId string, params *PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBody(ctx, legalEntityId, policyId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse(rsp)
}

func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdWithResponse(ctx context.Context, legalEntityId string, policyId string, params *PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, body PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx, legalEntityId, policyId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse(rsp)
}

// PutLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBodyWithResponse request with arbitrary body returning *PutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse
func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBodyWithResponse(ctx context.Context, legalEntityId string, policyId string, params *PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdPoliciesPolicyIdWithBody(ctx, legalEntityId, policyId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse(rsp)
}

func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdPoliciesPolicyIdWithResponse(ctx context.Context, legalEntityId string, policyId string, params *PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams, body PutLegalEntitiesLegalEntityIdPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx, legalEntityId, policyId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdSuppliersWithResponse request returning *GetLegalEntitiesLegalEntityIdSuppliersResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdSuppliersWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdSuppliersParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdSuppliersResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdSuppliers(ctx, legalEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdSuppliersResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdSuppliersWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdSuppliersResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdSuppliersWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdSuppliersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdSuppliersResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdSuppliersWithBody(ctx, legalEntityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdSuppliersResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdSuppliersWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdSuppliersParams, body PostLegalEntitiesLegalEntityIdSuppliersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdSuppliersResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdSuppliers(ctx, legalEntityId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdSuppliersResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdSuppliersSupplierIdWithResponse request returning *GetLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdSuppliersSupplierIdWithResponse(ctx context.Context, legalEntityId string, supplierId string, params *GetLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx, legalEntityId, supplierId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse(rsp)
}

// PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBodyWithResponse request with arbitrary body returning *PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse
func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBodyWithResponse(ctx context.Context, legalEntityId string, supplierId string, params *PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBody(ctx, legalEntityId, supplierId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse(rsp)
}

func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdWithResponse(ctx context.Context, legalEntityId string, supplierId string, params *PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, body PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx, legalEntityId, supplierId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse(rsp)
}

// PutLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBodyWithResponse request with arbitrary body returning *PutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse
func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBodyWithResponse(ctx context.Context, legalEntityId string, supplierId string, params *PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdSuppliersSupplierIdWithBody(ctx, legalEntityId, supplierId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse(rsp)
}

func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdSuppliersSupplierIdWithResponse(ctx context.Context, legalEntityId string, supplierId string, params *PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams, body PutLegalEntitiesLegalEntityIdSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx, legalEntityId, supplierId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdTagsWithResponse request returning *GetLegalEntitiesLegalEntityIdTagsResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdTagsWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdTagsParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdTagsResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdTags(ctx, legalEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdTagsResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdTagsWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdTagsResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdTagsWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdTagsResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdTagsWithBody(ctx, legalEntityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdTagsResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdTagsWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTagsParams, body PostLegalEntitiesLegalEntityIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdTagsResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdTags(ctx, legalEntityId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdTagsResponse(rsp)
}

// DeleteLegalEntitiesLegalEntityIdTagsTagIdWithResponse request returning *DeleteLegalEntitiesLegalEntityIdTagsTagIdResponse
func (c *ClientWithResponses) DeleteLegalEntitiesLegalEntityIdTagsTagIdWithResponse(ctx context.Context, legalEntityId string, tagId string, params *DeleteLegalEntitiesLegalEntityIdTagsTagIdParams, reqEditors ...RequestEditorFn) (*DeleteLegalEntitiesLegalEntityIdTagsTagIdResponse, error) {
	rsp, err := c.DeleteLegalEntitiesLegalEntityIdTagsTagId(ctx, legalEntityId, tagId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLegalEntitiesLegalEntityIdTagsTagIdResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdTagsTagIdWithResponse request returning *GetLegalEntitiesLegalEntityIdTagsTagIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdTagsTagIdWithResponse(ctx context.Context, legalEntityId string, tagId string, params *GetLegalEntitiesLegalEntityIdTagsTagIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdTagsTagIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdTagsTagId(ctx, legalEntityId, tagId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdTagsTagIdResponse(rsp)
}

// PatchLegalEntitiesLegalEntityIdTagsTagIdWithBodyWithResponse request with arbitrary body returning *PatchLegalEntitiesLegalEntityIdTagsTagIdResponse
func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdTagsTagIdWithBodyWithResponse(ctx context.Context, legalEntityId string, tagId string, params *PatchLegalEntitiesLegalEntityIdTagsTagIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdTagsTagIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdTagsTagIdWithBody(ctx, legalEntityId, tagId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdTagsTagIdResponse(rsp)
}

func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdTagsTagIdWithResponse(ctx context.Context, legalEntityId string, tagId string, params *PatchLegalEntitiesLegalEntityIdTagsTagIdParams, body PatchLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdTagsTagIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdTagsTagId(ctx, legalEntityId, tagId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdTagsTagIdResponse(rsp)
}

// PutLegalEntitiesLegalEntityIdTagsTagIdWithBodyWithResponse request with arbitrary body returning *PutLegalEntitiesLegalEntityIdTagsTagIdResponse
func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdTagsTagIdWithBodyWithResponse(ctx context.Context, legalEntityId string, tagId string, params *PutLegalEntitiesLegalEntityIdTagsTagIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdTagsTagIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdTagsTagIdWithBody(ctx, legalEntityId, tagId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdTagsTagIdResponse(rsp)
}

func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdTagsTagIdWithResponse(ctx context.Context, legalEntityId string, tagId string, params *PutLegalEntitiesLegalEntityIdTagsTagIdParams, body PutLegalEntitiesLegalEntityIdTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdTagsTagIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdTagsTagId(ctx, legalEntityId, tagId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdTagsTagIdResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdTaxRatesWithResponse request returning *GetLegalEntitiesLegalEntityIdTaxRatesResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdTaxRatesWithResponse(ctx context.Context, legalEntityId string, params *GetLegalEntitiesLegalEntityIdTaxRatesParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdTaxRatesResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdTaxRates(ctx, legalEntityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdTaxRatesResponse(rsp)
}

// PostLegalEntitiesLegalEntityIdTaxRatesWithBodyWithResponse request with arbitrary body returning *PostLegalEntitiesLegalEntityIdTaxRatesResponse
func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdTaxRatesWithBodyWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdTaxRatesResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdTaxRatesWithBody(ctx, legalEntityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdTaxRatesResponse(rsp)
}

func (c *ClientWithResponses) PostLegalEntitiesLegalEntityIdTaxRatesWithResponse(ctx context.Context, legalEntityId string, params *PostLegalEntitiesLegalEntityIdTaxRatesParams, body PostLegalEntitiesLegalEntityIdTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegalEntitiesLegalEntityIdTaxRatesResponse, error) {
	rsp, err := c.PostLegalEntitiesLegalEntityIdTaxRates(ctx, legalEntityId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegalEntitiesLegalEntityIdTaxRatesResponse(rsp)
}

// GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithResponse request returning *GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse
func (c *ClientWithResponses) GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithResponse(ctx context.Context, legalEntityId string, taxRateId string, params *GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, reqEditors ...RequestEditorFn) (*GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse, error) {
	rsp, err := c.GetLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx, legalEntityId, taxRateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse(rsp)
}

// PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBodyWithResponse request with arbitrary body returning *PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse
func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBodyWithResponse(ctx context.Context, legalEntityId string, taxRateId string, params *PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBody(ctx, legalEntityId, taxRateId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse(rsp)
}

func (c *ClientWithResponses) PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithResponse(ctx context.Context, legalEntityId string, taxRateId string, params *PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, body PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse, error) {
	rsp, err := c.PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx, legalEntityId, taxRateId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse(rsp)
}

// PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBodyWithResponse request with arbitrary body returning *PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse
func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBodyWithResponse(ctx context.Context, legalEntityId string, taxRateId string, params *PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithBody(ctx, legalEntityId, taxRateId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse(rsp)
}

func (c *ClientWithResponses) PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithResponse(ctx context.Context, legalEntityId string, taxRateId string, params *PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams, body PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse, error) {
	rsp, err := c.PutLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx, legalEntityId, taxRateId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse(rsp)
}

// GetSuppliersWithResponse request returning *GetSuppliersResponse
func (c *ClientWithResponses) GetSuppliersWithResponse(ctx context.Context, params *GetSuppliersParams, reqEditors ...RequestEditorFn) (*GetSuppliersResponse, error) {
	rsp, err := c.GetSuppliers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSuppliersResponse(rsp)
}

// PostSuppliersWithBodyWithResponse request with arbitrary body returning *PostSuppliersResponse
func (c *ClientWithResponses) PostSuppliersWithBodyWithResponse(ctx context.Context, params *PostSuppliersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSuppliersResponse, error) {
	rsp, err := c.PostSuppliersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSuppliersResponse(rsp)
}

func (c *ClientWithResponses) PostSuppliersWithResponse(ctx context.Context, params *PostSuppliersParams, body PostSuppliersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSuppliersResponse, error) {
	rsp, err := c.PostSuppliers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSuppliersResponse(rsp)
}

// GetSuppliersSupplierIdWithResponse request returning *GetSuppliersSupplierIdResponse
func (c *ClientWithResponses) GetSuppliersSupplierIdWithResponse(ctx context.Context, supplierId string, params *GetSuppliersSupplierIdParams, reqEditors ...RequestEditorFn) (*GetSuppliersSupplierIdResponse, error) {
	rsp, err := c.GetSuppliersSupplierId(ctx, supplierId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSuppliersSupplierIdResponse(rsp)
}

// PatchSuppliersSupplierIdWithBodyWithResponse request with arbitrary body returning *PatchSuppliersSupplierIdResponse
func (c *ClientWithResponses) PatchSuppliersSupplierIdWithBodyWithResponse(ctx context.Context, supplierId string, params *PatchSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSuppliersSupplierIdResponse, error) {
	rsp, err := c.PatchSuppliersSupplierIdWithBody(ctx, supplierId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSuppliersSupplierIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSuppliersSupplierIdWithResponse(ctx context.Context, supplierId string, params *PatchSuppliersSupplierIdParams, body PatchSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSuppliersSupplierIdResponse, error) {
	rsp, err := c.PatchSuppliersSupplierId(ctx, supplierId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSuppliersSupplierIdResponse(rsp)
}

// PutSuppliersSupplierIdWithBodyWithResponse request with arbitrary body returning *PutSuppliersSupplierIdResponse
func (c *ClientWithResponses) PutSuppliersSupplierIdWithBodyWithResponse(ctx context.Context, supplierId string, params *PutSuppliersSupplierIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSuppliersSupplierIdResponse, error) {
	rsp, err := c.PutSuppliersSupplierIdWithBody(ctx, supplierId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSuppliersSupplierIdResponse(rsp)
}

func (c *ClientWithResponses) PutSuppliersSupplierIdWithResponse(ctx context.Context, supplierId string, params *PutSuppliersSupplierIdParams, body PutSuppliersSupplierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSuppliersSupplierIdResponse, error) {
	rsp, err := c.PutSuppliersSupplierId(ctx, supplierId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSuppliersSupplierIdResponse(rsp)
}

// GetTripsWithResponse request returning *GetTripsResponse
func (c *ClientWithResponses) GetTripsWithResponse(ctx context.Context, params *GetTripsParams, reqEditors ...RequestEditorFn) (*GetTripsResponse, error) {
	rsp, err := c.GetTrips(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTripsResponse(rsp)
}

// GetTripsTripIdWithResponse request returning *GetTripsTripIdResponse
func (c *ClientWithResponses) GetTripsTripIdWithResponse(ctx context.Context, tripId string, params *GetTripsTripIdParams, reqEditors ...RequestEditorFn) (*GetTripsTripIdResponse, error) {
	rsp, err := c.GetTripsTripId(ctx, tripId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTripsTripIdResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// PostUsersWithBodyWithResponse request with arbitrary body returning *PostUsersResponse
func (c *ClientWithResponses) PostUsersWithBodyWithResponse(ctx context.Context, params *PostUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

func (c *ClientWithResponses) PostUsersWithResponse(ctx context.Context, params *PostUsersParams, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

// DeleteUsersUserIdWithResponse request returning *DeleteUsersUserIdResponse
func (c *ClientWithResponses) DeleteUsersUserIdWithResponse(ctx context.Context, userId string, params *DeleteUsersUserIdParams, reqEditors ...RequestEditorFn) (*DeleteUsersUserIdResponse, error) {
	rsp, err := c.DeleteUsersUserId(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersUserIdResponse(rsp)
}

// GetUsersUserIdWithResponse request returning *GetUsersUserIdResponse
func (c *ClientWithResponses) GetUsersUserIdWithResponse(ctx context.Context, userId string, params *GetUsersUserIdParams, reqEditors ...RequestEditorFn) (*GetUsersUserIdResponse, error) {
	rsp, err := c.GetUsersUserId(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUserIdResponse(rsp)
}

// PatchUsersUserIdWithBodyWithResponse request with arbitrary body returning *PatchUsersUserIdResponse
func (c *ClientWithResponses) PatchUsersUserIdWithBodyWithResponse(ctx context.Context, userId string, params *PatchUsersUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersUserIdResponse, error) {
	rsp, err := c.PatchUsersUserIdWithBody(ctx, userId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersUserIdResponse(rsp)
}

func (c *ClientWithResponses) PatchUsersUserIdWithResponse(ctx context.Context, userId string, params *PatchUsersUserIdParams, body PatchUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersUserIdResponse, error) {
	rsp, err := c.PatchUsersUserId(ctx, userId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersUserIdResponse(rsp)
}

// PutUsersUserIdWithBodyWithResponse request with arbitrary body returning *PutUsersUserIdResponse
func (c *ClientWithResponses) PutUsersUserIdWithBodyWithResponse(ctx context.Context, userId string, params *PutUsersUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersUserIdResponse, error) {
	rsp, err := c.PutUsersUserIdWithBody(ctx, userId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutUsersUserIdWithResponse(ctx context.Context, userId string, params *PutUsersUserIdParams, body PutUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersUserIdResponse, error) {
	rsp, err := c.PutUsersUserId(ctx, userId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersUserIdResponse(rsp)
}

// ParseGetExpensesResponse parses an HTTP response from a GetExpensesWithResponse call
func ParseGetExpensesResponse(rsp *http.Response) (*GetExpensesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExpensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Expenses *[]Expense `json:"expenses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetExpensesExpenseIdResponse parses an HTTP response from a GetExpensesExpenseIdWithResponse call
func ParseGetExpensesExpenseIdResponse(rsp *http.Response) (*GetExpensesExpenseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExpensesExpenseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Expense
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesResponse parses an HTTP response from a GetLegalEntitiesWithResponse call
func ParseGetLegalEntitiesResponse(rsp *http.Response) (*GetLegalEntitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			LegalEntities *[]LegalEntity `json:"legalEntities,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LegalEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdCategoriesResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdCategoriesWithResponse call
func ParseGetLegalEntitiesLegalEntityIdCategoriesResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Categories *[]Category `json:"categories,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdCategoriesResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdCategoriesWithResponse call
func ParsePostLegalEntitiesLegalEntityIdCategoriesResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdCategoriesCategoryIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse parses an HTTP response from a PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdWithResponse call
func ParsePatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse(rsp *http.Response) (*PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse parses an HTTP response from a PutLegalEntitiesLegalEntityIdCategoriesCategoryIdWithResponse call
func ParsePutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse(rsp *http.Response) (*PutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLegalEntitiesLegalEntityIdCategoriesCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdCompanyCardsResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdCompanyCardsWithResponse call
func ParseGetLegalEntitiesLegalEntityIdCompanyCardsResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdCompanyCardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdCompanyCardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CompanyCards *[]CompanyCard `json:"companyCards,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdCompanyCardsResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdCompanyCardsWithResponse call
func ParsePostLegalEntitiesLegalEntityIdCompanyCardsResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdCompanyCardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdCompanyCardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CompanyCard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyCard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse parses an HTTP response from a PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithResponse call
func ParsePatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse(rsp *http.Response) (*PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyCard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse parses an HTTP response from a PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdWithResponse call
func ParsePutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse(rsp *http.Response) (*PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyCard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdCostCentersResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdCostCentersWithResponse call
func ParseGetLegalEntitiesLegalEntityIdCostCentersResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdCostCentersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdCostCentersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CostCenters *[]CostCenter `json:"costCenters,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdCostCentersResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdCostCentersWithResponse call
func ParsePostLegalEntitiesLegalEntityIdCostCentersResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdCostCentersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdCostCentersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CostCenter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseDeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse parses an HTTP response from a DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse call
func ParseDeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse(rsp *http.Response) (*DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostCenter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse parses an HTTP response from a PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse call
func ParsePatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse(rsp *http.Response) (*PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostCenter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse parses an HTTP response from a PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdWithResponse call
func ParsePutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse(rsp *http.Response) (*PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostCenter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksWithResponse call
func ParsePostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Resource task id of the export
			Resource *string `json:"resource,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdExportTasksExportTaskIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdExportTasksExportTaskIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsWithResponse call
func ParseGetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdInvoiceCategoriesResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdInvoiceCategoriesWithResponse call
func ParseGetLegalEntitiesLegalEntityIdInvoiceCategoriesResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdInvoiceCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdInvoiceCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			InvoiceCategories *[]InvoiceCategory `json:"invoice-categories,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdInvoiceCategoriesWithResponse call
func ParsePostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdInvoiceCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InvoiceCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse parses an HTTP response from a PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithResponse call
func ParsePatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse(rsp *http.Response) (*PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse parses an HTTP response from a PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdWithResponse call
func ParsePutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse(rsp *http.Response) (*PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksWithResponse call
func ParsePostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Resource task id of the export
			Resource *string `json:"resource,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithResponse call
func ParseGetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			InvoiceGoodsReceipts *[]GoodsReceipt `json:"invoice-goods-receipts,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsWithResponse call
func ParsePostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GoodsReceipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GoodsReceipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse parses an HTTP response from a PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithResponse call
func ParsePatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse(rsp *http.Response) (*PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GoodsReceipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse parses an HTTP response from a PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdWithResponse call
func ParsePutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse(rsp *http.Response) (*PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GoodsReceipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdInvoicePaymentTermsWithResponse call
func ParseGetLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			InvoicePaymentTerms *[]InvoicePaymentTerms `json:"invoice-payment-terms,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdInvoicePaymentTermsWithResponse call
func ParsePostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdInvoicePaymentTermsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InvoicePaymentTerms
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoicePaymentTerms
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse parses an HTTP response from a PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithResponse call
func ParsePatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse(rsp *http.Response) (*PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoicePaymentTerms
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse parses an HTTP response from a PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdWithResponse call
func ParsePutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse(rsp *http.Response) (*PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoicePaymentTerms
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithResponse call
func ParseGetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			InvoicePurchaseOrders *[]PurchaseOrder `json:"invoice-purchase-orders,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersWithResponse call
func ParsePostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PurchaseOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PurchaseOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse parses an HTTP response from a PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithResponse call
func ParsePatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse(rsp *http.Response) (*PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PurchaseOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse parses an HTTP response from a PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdWithResponse call
func ParsePutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse(rsp *http.Response) (*PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PurchaseOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdInvoicesResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdInvoicesWithResponse call
func ParseGetLegalEntitiesLegalEntityIdInvoicesResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdInvoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Invoices *[]Invoice `json:"invoices,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdInvoicesResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdInvoicesWithResponse call
func ParsePostLegalEntitiesLegalEntityIdInvoicesResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdInvoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdInvoicesUploadResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdInvoicesUploadWithResponse call
func ParsePostLegalEntitiesLegalEntityIdInvoicesUploadResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdInvoicesUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdInvoicesUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdInvoicesInvoiceIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdInvoicesInvoiceIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationWithResponse call
func ParseGetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdPoliciesResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdPoliciesWithResponse call
func ParseGetLegalEntitiesLegalEntityIdPoliciesResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Policies *[]Policy `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdPoliciesResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdPoliciesWithResponse call
func ParsePostLegalEntitiesLegalEntityIdPoliciesResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdPoliciesPolicyIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse parses an HTTP response from a PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdWithResponse call
func ParsePatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse(rsp *http.Response) (*PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse parses an HTTP response from a PutLegalEntitiesLegalEntityIdPoliciesPolicyIdWithResponse call
func ParsePutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse(rsp *http.Response) (*PutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLegalEntitiesLegalEntityIdPoliciesPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdSuppliersResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdSuppliersWithResponse call
func ParseGetLegalEntitiesLegalEntityIdSuppliersResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdSuppliersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdSuppliersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Suppliers *[]Supplier `json:"suppliers,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdSuppliersResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdSuppliersWithResponse call
func ParsePostLegalEntitiesLegalEntityIdSuppliersResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdSuppliersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdSuppliersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Supplier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdSuppliersSupplierIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Supplier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse parses an HTTP response from a PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdWithResponse call
func ParsePatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse(rsp *http.Response) (*PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Supplier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse parses an HTTP response from a PutLegalEntitiesLegalEntityIdSuppliersSupplierIdWithResponse call
func ParsePutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse(rsp *http.Response) (*PutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLegalEntitiesLegalEntityIdSuppliersSupplierIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Supplier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdTagsResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdTagsWithResponse call
func ParseGetLegalEntitiesLegalEntityIdTagsResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Tags *[]Tag `json:"tags,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdTagsResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdTagsWithResponse call
func ParsePostLegalEntitiesLegalEntityIdTagsResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseDeleteLegalEntitiesLegalEntityIdTagsTagIdResponse parses an HTTP response from a DeleteLegalEntitiesLegalEntityIdTagsTagIdWithResponse call
func ParseDeleteLegalEntitiesLegalEntityIdTagsTagIdResponse(rsp *http.Response) (*DeleteLegalEntitiesLegalEntityIdTagsTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLegalEntitiesLegalEntityIdTagsTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdTagsTagIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdTagsTagIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdTagsTagIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdTagsTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdTagsTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchLegalEntitiesLegalEntityIdTagsTagIdResponse parses an HTTP response from a PatchLegalEntitiesLegalEntityIdTagsTagIdWithResponse call
func ParsePatchLegalEntitiesLegalEntityIdTagsTagIdResponse(rsp *http.Response) (*PatchLegalEntitiesLegalEntityIdTagsTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLegalEntitiesLegalEntityIdTagsTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePutLegalEntitiesLegalEntityIdTagsTagIdResponse parses an HTTP response from a PutLegalEntitiesLegalEntityIdTagsTagIdWithResponse call
func ParsePutLegalEntitiesLegalEntityIdTagsTagIdResponse(rsp *http.Response) (*PutLegalEntitiesLegalEntityIdTagsTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLegalEntitiesLegalEntityIdTagsTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdTaxRatesResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdTaxRatesWithResponse call
func ParseGetLegalEntitiesLegalEntityIdTaxRatesResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdTaxRatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdTaxRatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			TaxRates *[]TaxRate `json:"taxRates,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostLegalEntitiesLegalEntityIdTaxRatesResponse parses an HTTP response from a PostLegalEntitiesLegalEntityIdTaxRatesWithResponse call
func ParsePostLegalEntitiesLegalEntityIdTaxRatesResponse(rsp *http.Response) (*PostLegalEntitiesLegalEntityIdTaxRatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegalEntitiesLegalEntityIdTaxRatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TaxRate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse parses an HTTP response from a GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithResponse call
func ParseGetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse(rsp *http.Response) (*GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaxRate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse parses an HTTP response from a PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithResponse call
func ParsePatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse(rsp *http.Response) (*PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaxRate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse parses an HTTP response from a PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdWithResponse call
func ParsePutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse(rsp *http.Response) (*PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaxRate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetSuppliersResponse parses an HTTP response from a GetSuppliersWithResponse call
func ParseGetSuppliersResponse(rsp *http.Response) (*GetSuppliersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSuppliersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			OrganizationSuppliers *[]OrganizationSupplier `json:"organization-suppliers,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostSuppliersResponse parses an HTTP response from a PostSuppliersWithResponse call
func ParsePostSuppliersResponse(rsp *http.Response) (*PostSuppliersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSuppliersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OrganizationSupplier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetSuppliersSupplierIdResponse parses an HTTP response from a GetSuppliersSupplierIdWithResponse call
func ParseGetSuppliersSupplierIdResponse(rsp *http.Response) (*GetSuppliersSupplierIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSuppliersSupplierIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationSupplier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchSuppliersSupplierIdResponse parses an HTTP response from a PatchSuppliersSupplierIdWithResponse call
func ParsePatchSuppliersSupplierIdResponse(rsp *http.Response) (*PatchSuppliersSupplierIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSuppliersSupplierIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationSupplier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePutSuppliersSupplierIdResponse parses an HTTP response from a PutSuppliersSupplierIdWithResponse call
func ParsePutSuppliersSupplierIdResponse(rsp *http.Response) (*PutSuppliersSupplierIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSuppliersSupplierIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationSupplier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetTripsResponse parses an HTTP response from a GetTripsWithResponse call
func ParseGetTripsResponse(rsp *http.Response) (*GetTripsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTripsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Trips *[]Trip `json:"trips,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetTripsTripIdResponse parses an HTTP response from a GetTripsTripIdWithResponse call
func ParseGetTripsTripIdResponse(rsp *http.Response) (*GetTripsTripIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTripsTripIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trip
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Users *[]User `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostUsersResponse parses an HTTP response from a PostUsersWithResponse call
func ParsePostUsersResponse(rsp *http.Response) (*PostUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseDeleteUsersUserIdResponse parses an HTTP response from a DeleteUsersUserIdWithResponse call
func ParseDeleteUsersUserIdResponse(rsp *http.Response) (*DeleteUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetUsersUserIdResponse parses an HTTP response from a GetUsersUserIdWithResponse call
func ParseGetUsersUserIdResponse(rsp *http.Response) (*GetUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchUsersUserIdResponse parses an HTTP response from a PatchUsersUserIdWithResponse call
func ParsePatchUsersUserIdResponse(rsp *http.Response) (*PatchUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePutUsersUserIdResponse parses an HTTP response from a PutUsersUserIdWithResponse call
func ParsePutUsersUserIdResponse(rsp *http.Response) (*PutUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all expenses.
	// (GET /expenses)
	GetExpenses(ctx echo.Context, params GetExpensesParams) error
	// Returns an expense by internal ID.
	// (GET /expenses/{expenseId})
	GetExpensesExpenseId(ctx echo.Context, expenseId string, params GetExpensesExpenseIdParams) error
	// Returns all legal entities.
	// (GET /legal-entities)
	GetLegalEntities(ctx echo.Context, params GetLegalEntitiesParams) error
	// Returns a legal entity by internal ID.
	// (GET /legal-entities/{legalEntityId})
	GetLegalEntitiesLegalEntityId(ctx echo.Context, legalEntityId string, params GetLegalEntitiesLegalEntityIdParams) error
	// Returns all categories belonging to the legal entity identified in the path.
	// (GET /legal-entities/{legalEntityId}/categories)
	GetLegalEntitiesLegalEntityIdCategories(ctx echo.Context, legalEntityId string, params GetLegalEntitiesLegalEntityIdCategoriesParams) error
	// Creates a new category and returns the created entity.
	// (POST /legal-entities/{legalEntityId}/categories)
	PostLegalEntitiesLegalEntityIdCategories(ctx echo.Context, legalEntityId string, params PostLegalEntitiesLegalEntityIdCategoriesParams) error
	// Returns a category by internal ID.
	// (GET /legal-entities/{legalEntityId}/categories/{categoryId})
	GetLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx echo.Context, legalEntityId string, categoryId string, params GetLegalEntitiesLegalEntityIdCategoriesCategoryIdParams) error
	// Updates a category, identified by internal ID, by replacing some attributes. The whole entity is returned.
	// (PATCH /legal-entities/{legalEntityId}/categories/{categoryId})
	PatchLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx echo.Context, legalEntityId string, categoryId string, params PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams) error
	// Updates a category, identified by internal ID, by replacing all attributes. The whole entity is returned.
	// (PUT /legal-entities/{legalEntityId}/categories/{categoryId})
	PutLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx echo.Context, legalEntityId string, categoryId string, params PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams) error
	// Returns all company cards belonging to the legal entity identified in the path.
	// (GET /legal-entities/{legalEntityId}/company-cards)
	GetLegalEntitiesLegalEntityIdCompanyCards(ctx echo.Context, legalEntityId string, params GetLegalEntitiesLegalEntityIdCompanyCardsParams) error
	// Creates a new company card and returns the created entity.
	// (POST /legal-entities/{legalEntityId}/company-cards)
	PostLegalEntitiesLegalEntityIdCompanyCards(ctx echo.Context, legalEntityId string, params PostLegalEntitiesLegalEntityIdCompanyCardsParams) error
	// Returns a company card by internal ID.
	// (GET /legal-entities/{legalEntityId}/company-cards/{companyCardId})
	GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx echo.Context, legalEntityId string, companyCardId string, params GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams) error
	// Updates a company card, identified by internal ID, by replacing some attributes. The whole entity is returned.
	// (PATCH /legal-entities/{legalEntityId}/company-cards/{companyCardId})
	PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx echo.Context, legalEntityId string, companyCardId string, params PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams) error
	// Updates a company card, identified by internal ID, by replacing all attributes. The whole entity is returned.
	// (PUT /legal-entities/{legalEntityId}/company-cards/{companyCardId})
	PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx echo.Context, legalEntityId string, companyCardId string, params PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams) error
	// Returns all cost centers belonging to the legal entity identified in the path.
	// (GET /legal-entities/{legalEntityId}/cost-centers)
	GetLegalEntitiesLegalEntityIdCostCenters(ctx echo.Context, legalEntityId string, params GetLegalEntitiesLegalEntityIdCostCentersParams) error
	// Creates a new cost center and returns the created entity.
	// (POST /legal-entities/{legalEntityId}/cost-centers)
	PostLegalEntitiesLegalEntityIdCostCenters(ctx echo.Context, legalEntityId string, params PostLegalEntitiesLegalEntityIdCostCentersParams) error
	// Deletes a cost center by internal ID.
	// (DELETE /legal-entities/{legalEntityId}/cost-centers/{costCenterId})
	DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx echo.Context, legalEntityId string, costCenterId string, params DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams) error
	// Returns a cost center by internal ID.
	// (GET /legal-entities/{legalEntityId}/cost-centers/{costCenterId})
	GetLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx echo.Context, legalEntityId string, costCenterId string, params GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams) error
	// Updates a cost center, identified by internal ID, by replacing some attributes. The whole entity is returned.
	// (PATCH /legal-entities/{legalEntityId}/cost-centers/{costCenterId})
	PatchLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx echo.Context, legalEntityId string, costCenterId string, params PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams) error
	// Updates a cost center, identified by internal ID, by replacing all attributes. The whole entity is returned.
	// (PUT /legal-entities/{legalEntityId}/cost-centers/{costCenterId})
	PutLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx echo.Context, legalEntityId string, costCenterId string, params PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams) error
	// Triggers an expense export in Yokoy and returns the exportTaskId (id of the export).
	// (POST /legal-entities/{legalEntityId}/expense-export-facilities/{exportFacility}/export-tasks)
	PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks(ctx echo.Context, legalEntityId string, exportFacility string, params PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams) error
	// Returns the status of the asynchronous export job.
	// (GET /legal-entities/{legalEntityId}/export-tasks/{exportTaskId})
	GetLegalEntitiesLegalEntityIdExportTasksExportTaskId(ctx echo.Context, legalEntityId string, exportTaskId string, params GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdParams) error
	// Returns the export artefacts in case the selected export facility supports this feature.
	// (GET /legal-entities/{legalEntityId}/export-tasks/{exportTaskId}/artefacts)
	GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefacts(ctx echo.Context, legalEntityId string, exportTaskId string, params GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsParams) error
	// Returns all invoice categories belonging to the legal entity identified in the path.
	// (GET /legal-entities/{legalEntityId}/invoice-categories)
	GetLegalEntitiesLegalEntityIdInvoiceCategories(ctx echo.Context, legalEntityId string, params GetLegalEntitiesLegalEntityIdInvoiceCategoriesParams) error
	// Creates a new invoice category and returns the created entity.
	// (POST /legal-entities/{legalEntityId}/invoice-categories)
	PostLegalEntitiesLegalEntityIdInvoiceCategories(ctx echo.Context, legalEntityId string, params PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams) error
	// Returns an invoice category by internal ID.
	// (GET /legal-entities/{legalEntityId}/invoice-categories/{categoryId})
	GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx echo.Context, legalEntityId string, categoryId string, params GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams) error
	// Updates a category, identified by internal ID, by replacing some attributes. The whole entity is returned.
	// (PATCH /legal-entities/{legalEntityId}/invoice-categories/{categoryId})
	PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx echo.Context, legalEntityId string, categoryId string, params PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams) error
	// Updates an invoice category, identified by internal ID, by replacing all attributes. The whole entity is returned.
	// (PUT /legal-entities/{legalEntityId}/invoice-categories/{categoryId})
	PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx echo.Context, legalEntityId string, categoryId string, params PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams) error
	// Triggers an invoice export in Yokoy and returns the exportTaskId (id of the export).
	// (POST /legal-entities/{legalEntityId}/invoice-export-facilities/{exportFacility}/export-tasks)
	PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks(ctx echo.Context, legalEntityId string, exportFacility string, params PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams) error
	// Returns all goods receipt belonging to the legal entity identified in the path.
	// (GET /legal-entities/{legalEntityId}/invoice-goods-receipts)
	GetLegalEntitiesLegalEntityIdInvoiceGoodsReceipts(ctx echo.Context, legalEntityId string, params GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams) error
	// Creates a new invoice goods receipt and returns the created entity.
	// (POST /legal-entities/{legalEntityId}/invoice-goods-receipts)
	PostLegalEntitiesLegalEntityIdInvoiceGoodsReceipts(ctx echo.Context, legalEntityId string, params PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams) error
	// Returns an invoice goods receipt by internal ID.
	// (GET /legal-entities/{legalEntityId}/invoice-goods-receipts/{goodsReceiptId})
	GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx echo.Context, legalEntityId string, goodsReceiptId string, params GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams) error
	// Updates a invoice goods receipt, identified by internal ID, by replacing some attributes. The whole entity is returned.
	// (PATCH /legal-entities/{legalEntityId}/invoice-goods-receipts/{goodsReceiptId})
	PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx echo.Context, legalEntityId string, goodsReceiptId string, params PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams) error
	// Updates an invoice goods receipt, identified by internal ID, by replacing all attributes. The whole entity is returned.
	// (PUT /legal-entities/{legalEntityId}/invoice-goods-receipts/{goodsReceiptId})
	PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx echo.Context, legalEntityId string, goodsReceiptId string, params PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams) error
	// Returns all payment terms belonging to the legal entity identified in the path.
	// (GET /legal-entities/{legalEntityId}/invoice-payment-terms)
	GetLegalEntitiesLegalEntityIdInvoicePaymentTerms(ctx echo.Context, legalEntityId string, params GetLegalEntitiesLegalEntityIdInvoicePaymentTermsParams) error
	// Creates a new invoice payment term and returns the created entity.
	// (POST /legal-entities/{legalEntityId}/invoice-payment-terms)
	PostLegalEntitiesLegalEntityIdInvoicePaymentTerms(ctx echo.Context, legalEntityId string, params PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams) error
	// Returns an invoice payment term by internal ID.
	// (GET /legal-entities/{legalEntityId}/invoice-payment-terms/{paymentTermId})
	GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx echo.Context, legalEntityId string, paymentTermId string, params GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams) error
	// Updates a invoice payment terms, identified by internal ID, by replacing some attributes. The whole entity is returned.
	// (PATCH /legal-entities/{legalEntityId}/invoice-payment-terms/{paymentTermId})
	PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx echo.Context, legalEntityId string, paymentTermId string, params PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams) error
	// Updates an invoice payment term, identified by internal ID, by replacing all attributes. The whole entity is returned.
	// (PUT /legal-entities/{legalEntityId}/invoice-payment-terms/{paymentTermId})
	PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx echo.Context, legalEntityId string, paymentTermId string, params PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams) error
	// Returns all purchase orders belonging to the legal entity identified in the path.
	// (GET /legal-entities/{legalEntityId}/invoice-purchase-orders)
	GetLegalEntitiesLegalEntityIdInvoicePurchaseOrders(ctx echo.Context, legalEntityId string, params GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams) error
	// Creates a new purchase order and returns the created entity.
	// (POST /legal-entities/{legalEntityId}/invoice-purchase-orders)
	PostLegalEntitiesLegalEntityIdInvoicePurchaseOrders(ctx echo.Context, legalEntityId string, params PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams) error
	// Returns an invoice purchase order by internal ID.
	// (GET /legal-entities/{legalEntityId}/invoice-purchase-orders/{purchaseOrderId})
	GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx echo.Context, legalEntityId string, purchaseOrderId string, params GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams) error
	// Updates a invoice purchase order, identified by internal ID, by replacing some attributes. The whole entity is returned.
	// (PATCH /legal-entities/{legalEntityId}/invoice-purchase-orders/{purchaseOrderId})
	PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx echo.Context, legalEntityId string, purchaseOrderId string, params PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams) error
	// Updates an invoice purchase order, identified by internal ID, by replacing all attributes. The whole entity is returned.
	// (PUT /legal-entities/{legalEntityId}/invoice-purchase-orders/{purchaseOrderId})
	PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx echo.Context, legalEntityId string, purchaseOrderId string, params PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams) error
	// Returns all invoices belonging to the legal entity identified in the path.
	// (GET /legal-entities/{legalEntityId}/invoices)
	GetLegalEntitiesLegalEntityIdInvoices(ctx echo.Context, legalEntityId string, params GetLegalEntitiesLegalEntityIdInvoicesParams) error
	// Creates a new invoice and returns the created entity.
	// (POST /legal-entities/{legalEntityId}/invoices)
	PostLegalEntitiesLegalEntityIdInvoices(ctx echo.Context, legalEntityId string, params PostLegalEntitiesLegalEntityIdInvoicesParams) error
	// Uploads a new invoice to be processed by the Yokoy AI
	// (POST /legal-entities/{legalEntityId}/invoices/upload)
	PostLegalEntitiesLegalEntityIdInvoicesUpload(ctx echo.Context, legalEntityId string, params PostLegalEntitiesLegalEntityIdInvoicesUploadParams) error
	// Returns an invoice by internal ID.
	// (GET /legal-entities/{legalEntityId}/invoices/{invoiceId})
	GetLegalEntitiesLegalEntityIdInvoicesInvoiceId(ctx echo.Context, legalEntityId string, invoiceId string, params GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdParams) error
	// Downloads the supplier invoice file in PDF format
	// (GET /legal-entities/{legalEntityId}/invoices/{invoiceId}/presentation)
	GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentation(ctx echo.Context, legalEntityId string, invoiceId string, params GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationParams) error
	// Returns all policies belonging to the legal entity identified in the path.
	// (GET /legal-entities/{legalEntityId}/policies)
	GetLegalEntitiesLegalEntityIdPolicies(ctx echo.Context, legalEntityId string, params GetLegalEntitiesLegalEntityIdPoliciesParams) error
	// Creates a new policy and returns the created entity.
	// (POST /legal-entities/{legalEntityId}/policies)
	PostLegalEntitiesLegalEntityIdPolicies(ctx echo.Context, legalEntityId string, params PostLegalEntitiesLegalEntityIdPoliciesParams) error
	// Returns a policy by internal ID.
	// (GET /legal-entities/{legalEntityId}/policies/{policyId})
	GetLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx echo.Context, legalEntityId string, policyId string, params GetLegalEntitiesLegalEntityIdPoliciesPolicyIdParams) error
	// Updates a policy, identified by internal ID, by replacing some attributes. The whole entity is returned.
	// (PATCH /legal-entities/{legalEntityId}/policies/{policyId})
	PatchLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx echo.Context, legalEntityId string, policyId string, params PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams) error
	// Updates a policy, identified by internal ID, by replacing all attributes. The whole entity is returned.
	// (PUT /legal-entities/{legalEntityId}/policies/{policyId})
	PutLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx echo.Context, legalEntityId string, policyId string, params PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams) error
	// Returns all suppliers of a legal entity
	// (GET /legal-entities/{legalEntityId}/suppliers)
	GetLegalEntitiesLegalEntityIdSuppliers(ctx echo.Context, legalEntityId string, params GetLegalEntitiesLegalEntityIdSuppliersParams) error
	// Adds a specific organization supplier to an entity with entity specific information.
	// (POST /legal-entities/{legalEntityId}/suppliers)
	PostLegalEntitiesLegalEntityIdSuppliers(ctx echo.Context, legalEntityId string, params PostLegalEntitiesLegalEntityIdSuppliersParams) error
	// Returns a supplier based on internal Yokoy id.
	// (GET /legal-entities/{legalEntityId}/suppliers/{supplierId})
	GetLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx echo.Context, legalEntityId string, supplierId string, params GetLegalEntitiesLegalEntityIdSuppliersSupplierIdParams) error
	// Updates an entity supplier, identified by internal ID, by replacing some entity specific attributes. The whole entity is returned.
	// (PATCH /legal-entities/{legalEntityId}/suppliers/{supplierId})
	PatchLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx echo.Context, legalEntityId string, supplierId string, params PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams) error
	// Updates an entity supplier, identified by internal ID, by replacing all entity specific attributes. The whole entity is returned.
	// (PUT /legal-entities/{legalEntityId}/suppliers/{supplierId})
	PutLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx echo.Context, legalEntityId string, supplierId string, params PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams) error
	// Returns all tags belonging to the legal entity identified in the path.
	// (GET /legal-entities/{legalEntityId}/tags)
	GetLegalEntitiesLegalEntityIdTags(ctx echo.Context, legalEntityId string, params GetLegalEntitiesLegalEntityIdTagsParams) error
	// Creates a new tag and returns the created entity.
	// (POST /legal-entities/{legalEntityId}/tags)
	PostLegalEntitiesLegalEntityIdTags(ctx echo.Context, legalEntityId string, params PostLegalEntitiesLegalEntityIdTagsParams) error
	// Deletes a tag by internal ID.
	// (DELETE /legal-entities/{legalEntityId}/tags/{tagId})
	DeleteLegalEntitiesLegalEntityIdTagsTagId(ctx echo.Context, legalEntityId string, tagId string, params DeleteLegalEntitiesLegalEntityIdTagsTagIdParams) error
	// Returns a tag by internal ID.
	// (GET /legal-entities/{legalEntityId}/tags/{tagId})
	GetLegalEntitiesLegalEntityIdTagsTagId(ctx echo.Context, legalEntityId string, tagId string, params GetLegalEntitiesLegalEntityIdTagsTagIdParams) error
	// Updates a tag, identified by internal ID, by replacing some attributes. The whole entity is returned.
	// (PATCH /legal-entities/{legalEntityId}/tags/{tagId})
	PatchLegalEntitiesLegalEntityIdTagsTagId(ctx echo.Context, legalEntityId string, tagId string, params PatchLegalEntitiesLegalEntityIdTagsTagIdParams) error
	// Updates a tag, identified by internal ID, by replacing all attributes. The whole entity is returned.
	// (PUT /legal-entities/{legalEntityId}/tags/{tagId})
	PutLegalEntitiesLegalEntityIdTagsTagId(ctx echo.Context, legalEntityId string, tagId string, params PutLegalEntitiesLegalEntityIdTagsTagIdParams) error
	// Returns all tax rates belonging to the legal entity identified in the path.
	// (GET /legal-entities/{legalEntityId}/tax-rates)
	GetLegalEntitiesLegalEntityIdTaxRates(ctx echo.Context, legalEntityId string, params GetLegalEntitiesLegalEntityIdTaxRatesParams) error
	// Creates a new tax rate and returns the created entity.
	// (POST /legal-entities/{legalEntityId}/tax-rates)
	PostLegalEntitiesLegalEntityIdTaxRates(ctx echo.Context, legalEntityId string, params PostLegalEntitiesLegalEntityIdTaxRatesParams) error
	// Returns a tax rate by internal ID.
	// (GET /legal-entities/{legalEntityId}/tax-rates/{taxRateId})
	GetLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx echo.Context, legalEntityId string, taxRateId string, params GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams) error
	// Updates a tax rate, identified by internal ID, by replacing some attributes. The whole entity is returned.
	// (PATCH /legal-entities/{legalEntityId}/tax-rates/{taxRateId})
	PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx echo.Context, legalEntityId string, taxRateId string, params PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams) error
	// Updates a tax rate, identified by internal ID, by replacing all attributes. The whole entity is returned.
	// (PUT /legal-entities/{legalEntityId}/tax-rates/{taxRateId})
	PutLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx echo.Context, legalEntityId string, taxRateId string, params PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams) error
	// Returns all organization level suppliers of an organization
	// (GET /suppliers)
	GetSuppliers(ctx echo.Context, params GetSuppliersParams) error
	// Creates a new organization supplier and returns the created entity.
	// (POST /suppliers)
	PostSuppliers(ctx echo.Context, params PostSuppliersParams) error
	// Returns an organization supplier based on internal Yokoy id.
	// (GET /suppliers/{supplierId})
	GetSuppliersSupplierId(ctx echo.Context, supplierId string, params GetSuppliersSupplierIdParams) error
	// Updates a organization supplier, identified by internal ID, by replacing some attributes. The whole entity is returned.
	// (PATCH /suppliers/{supplierId})
	PatchSuppliersSupplierId(ctx echo.Context, supplierId string, params PatchSuppliersSupplierIdParams) error
	// Updates an organization supplier, identified by internal ID, by replacing all attributes. The whole entity is returned.
	// (PUT /suppliers/{supplierId})
	PutSuppliersSupplierId(ctx echo.Context, supplierId string, params PutSuppliersSupplierIdParams) error
	// Returns all trips.
	// (GET /trips)
	GetTrips(ctx echo.Context, params GetTripsParams) error
	// Returns an trip by internal ID.
	// (GET /trips/{tripId})
	GetTripsTripId(ctx echo.Context, tripId string, params GetTripsTripIdParams) error
	// Returns all users.
	// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Creates a new user and returns the created entity.
	// (POST /users)
	PostUsers(ctx echo.Context, params PostUsersParams) error
	// Deletes a user by internal ID.
	// (DELETE /users/{userId})
	DeleteUsersUserId(ctx echo.Context, userId string, params DeleteUsersUserIdParams) error
	// Returns a user by internal ID.
	// (GET /users/{userId})
	GetUsersUserId(ctx echo.Context, userId string, params GetUsersUserIdParams) error
	// Updates a user, identified by internal ID, by replacing some attributes. The whole entity is returned.
	// (PATCH /users/{userId})
	PatchUsersUserId(ctx echo.Context, userId string, params PatchUsersUserIdParams) error
	// Updates a user, identified by internal ID, by replacing all attributes. The whole entity is returned.
	// (PUT /users/{userId})
	PutUsersUserId(ctx echo.Context, userId string, params PutUsersUserIdParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetExpenses converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpenses(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExpensesParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExpenses(ctx, params)
	return err
}

// GetExpensesExpenseId converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpensesExpenseId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "expenseId" -------------
	var expenseId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "expenseId", runtime.ParamLocationPath, ctx.Param("expenseId"), &expenseId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expenseId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExpensesExpenseIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExpensesExpenseId(ctx, expenseId, params)
	return err
}

// GetLegalEntities converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntities(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntities(ctx, params)
	return err
}

// GetLegalEntitiesLegalEntityId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityId(ctx, legalEntityId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdCategories(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdCategoriesParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdCategories(ctx, legalEntityId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdCategories converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdCategories(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdCategoriesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdCategories(ctx, legalEntityId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdCategoriesCategoryId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "categoryId" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, ctx.Param("categoryId"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter categoryId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdCategoriesCategoryIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx, legalEntityId, categoryId, params)
	return err
}

// PatchLegalEntitiesLegalEntityIdCategoriesCategoryId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "categoryId" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, ctx.Param("categoryId"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter categoryId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchLegalEntitiesLegalEntityIdCategoriesCategoryIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx, legalEntityId, categoryId, params)
	return err
}

// PutLegalEntitiesLegalEntityIdCategoriesCategoryId converts echo context to params.
func (w *ServerInterfaceWrapper) PutLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "categoryId" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, ctx.Param("categoryId"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter categoryId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutLegalEntitiesLegalEntityIdCategoriesCategoryIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLegalEntitiesLegalEntityIdCategoriesCategoryId(ctx, legalEntityId, categoryId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdCompanyCards converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdCompanyCards(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdCompanyCardsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdCompanyCards(ctx, legalEntityId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdCompanyCards converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdCompanyCards(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdCompanyCardsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdCompanyCards(ctx, legalEntityId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "companyCardId" -------------
	var companyCardId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "companyCardId", runtime.ParamLocationPath, ctx.Param("companyCardId"), &companyCardId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyCardId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx, legalEntityId, companyCardId, params)
	return err
}

// PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "companyCardId" -------------
	var companyCardId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "companyCardId", runtime.ParamLocationPath, ctx.Param("companyCardId"), &companyCardId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyCardId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx, legalEntityId, companyCardId, params)
	return err
}

// PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId converts echo context to params.
func (w *ServerInterfaceWrapper) PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "companyCardId" -------------
	var companyCardId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "companyCardId", runtime.ParamLocationPath, ctx.Param("companyCardId"), &companyCardId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyCardId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId(ctx, legalEntityId, companyCardId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdCostCenters converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdCostCenters(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdCostCentersParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdCostCenters(ctx, legalEntityId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdCostCenters converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdCostCenters(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdCostCentersParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdCostCenters(ctx, legalEntityId, params)
	return err
}

// DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "costCenterId" -------------
	var costCenterId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "costCenterId", runtime.ParamLocationPath, ctx.Param("costCenterId"), &costCenterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter costCenterId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx, legalEntityId, costCenterId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdCostCentersCostCenterId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "costCenterId" -------------
	var costCenterId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "costCenterId", runtime.ParamLocationPath, ctx.Param("costCenterId"), &costCenterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter costCenterId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx, legalEntityId, costCenterId, params)
	return err
}

// PatchLegalEntitiesLegalEntityIdCostCentersCostCenterId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "costCenterId" -------------
	var costCenterId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "costCenterId", runtime.ParamLocationPath, ctx.Param("costCenterId"), &costCenterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter costCenterId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx, legalEntityId, costCenterId, params)
	return err
}

// PutLegalEntitiesLegalEntityIdCostCentersCostCenterId converts echo context to params.
func (w *ServerInterfaceWrapper) PutLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "costCenterId" -------------
	var costCenterId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "costCenterId", runtime.ParamLocationPath, ctx.Param("costCenterId"), &costCenterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter costCenterId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutLegalEntitiesLegalEntityIdCostCentersCostCenterIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLegalEntitiesLegalEntityIdCostCentersCostCenterId(ctx, legalEntityId, costCenterId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "exportFacility" -------------
	var exportFacility string

	err = runtime.BindStyledParameterWithLocation("simple", false, "exportFacility", runtime.ParamLocationPath, ctx.Param("exportFacility"), &exportFacility)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exportFacility: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasksParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks(ctx, legalEntityId, exportFacility, params)
	return err
}

// GetLegalEntitiesLegalEntityIdExportTasksExportTaskId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdExportTasksExportTaskId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "exportTaskId" -------------
	var exportTaskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "exportTaskId", runtime.ParamLocationPath, ctx.Param("exportTaskId"), &exportTaskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exportTaskId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdExportTasksExportTaskId(ctx, legalEntityId, exportTaskId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefacts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "exportTaskId" -------------
	var exportTaskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "exportTaskId", runtime.ParamLocationPath, ctx.Param("exportTaskId"), &exportTaskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exportTaskId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefactsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefacts(ctx, legalEntityId, exportTaskId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdInvoiceCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdInvoiceCategories(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdInvoiceCategoriesParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdInvoiceCategories(ctx, legalEntityId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdInvoiceCategories converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdInvoiceCategories(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdInvoiceCategoriesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdInvoiceCategories(ctx, legalEntityId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "categoryId" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, ctx.Param("categoryId"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter categoryId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx, legalEntityId, categoryId, params)
	return err
}

// PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "categoryId" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, ctx.Param("categoryId"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter categoryId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx, legalEntityId, categoryId, params)
	return err
}

// PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId converts echo context to params.
func (w *ServerInterfaceWrapper) PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "categoryId" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, ctx.Param("categoryId"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter categoryId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId(ctx, legalEntityId, categoryId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "exportFacility" -------------
	var exportFacility string

	err = runtime.BindStyledParameterWithLocation("simple", false, "exportFacility", runtime.ParamLocationPath, ctx.Param("exportFacility"), &exportFacility)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exportFacility: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasksParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks(ctx, legalEntityId, exportFacility, params)
	return err
}

// GetLegalEntitiesLegalEntityIdInvoiceGoodsReceipts converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdInvoiceGoodsReceipts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdInvoiceGoodsReceipts(ctx, legalEntityId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdInvoiceGoodsReceipts converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdInvoiceGoodsReceipts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdInvoiceGoodsReceipts(ctx, legalEntityId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "goodsReceiptId" -------------
	var goodsReceiptId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "goodsReceiptId", runtime.ParamLocationPath, ctx.Param("goodsReceiptId"), &goodsReceiptId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter goodsReceiptId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx, legalEntityId, goodsReceiptId, params)
	return err
}

// PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "goodsReceiptId" -------------
	var goodsReceiptId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "goodsReceiptId", runtime.ParamLocationPath, ctx.Param("goodsReceiptId"), &goodsReceiptId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter goodsReceiptId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx, legalEntityId, goodsReceiptId, params)
	return err
}

// PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId converts echo context to params.
func (w *ServerInterfaceWrapper) PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "goodsReceiptId" -------------
	var goodsReceiptId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "goodsReceiptId", runtime.ParamLocationPath, ctx.Param("goodsReceiptId"), &goodsReceiptId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter goodsReceiptId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId(ctx, legalEntityId, goodsReceiptId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdInvoicePaymentTerms converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdInvoicePaymentTerms(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdInvoicePaymentTermsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdInvoicePaymentTerms(ctx, legalEntityId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdInvoicePaymentTerms converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdInvoicePaymentTerms(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdInvoicePaymentTermsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdInvoicePaymentTerms(ctx, legalEntityId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "paymentTermId" -------------
	var paymentTermId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "paymentTermId", runtime.ParamLocationPath, ctx.Param("paymentTermId"), &paymentTermId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paymentTermId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx, legalEntityId, paymentTermId, params)
	return err
}

// PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "paymentTermId" -------------
	var paymentTermId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "paymentTermId", runtime.ParamLocationPath, ctx.Param("paymentTermId"), &paymentTermId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paymentTermId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx, legalEntityId, paymentTermId, params)
	return err
}

// PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId converts echo context to params.
func (w *ServerInterfaceWrapper) PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "paymentTermId" -------------
	var paymentTermId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "paymentTermId", runtime.ParamLocationPath, ctx.Param("paymentTermId"), &paymentTermId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paymentTermId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId(ctx, legalEntityId, paymentTermId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdInvoicePurchaseOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdInvoicePurchaseOrders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdInvoicePurchaseOrders(ctx, legalEntityId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdInvoicePurchaseOrders converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdInvoicePurchaseOrders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdInvoicePurchaseOrdersParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdInvoicePurchaseOrders(ctx, legalEntityId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "purchaseOrderId" -------------
	var purchaseOrderId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "purchaseOrderId", runtime.ParamLocationPath, ctx.Param("purchaseOrderId"), &purchaseOrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter purchaseOrderId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx, legalEntityId, purchaseOrderId, params)
	return err
}

// PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "purchaseOrderId" -------------
	var purchaseOrderId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "purchaseOrderId", runtime.ParamLocationPath, ctx.Param("purchaseOrderId"), &purchaseOrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter purchaseOrderId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx, legalEntityId, purchaseOrderId, params)
	return err
}

// PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId converts echo context to params.
func (w *ServerInterfaceWrapper) PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "purchaseOrderId" -------------
	var purchaseOrderId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "purchaseOrderId", runtime.ParamLocationPath, ctx.Param("purchaseOrderId"), &purchaseOrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter purchaseOrderId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId(ctx, legalEntityId, purchaseOrderId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdInvoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdInvoices(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdInvoicesParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdInvoices(ctx, legalEntityId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdInvoices converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdInvoices(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdInvoicesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdInvoices(ctx, legalEntityId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdInvoicesUpload converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdInvoicesUpload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdInvoicesUploadParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdInvoicesUpload(ctx, legalEntityId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdInvoicesInvoiceId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdInvoicesInvoiceId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, ctx.Param("invoiceId"), &invoiceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdInvoicesInvoiceId(ctx, legalEntityId, invoiceId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentation converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, ctx.Param("invoiceId"), &invoiceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentationParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentation(ctx, legalEntityId, invoiceId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdPolicies converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdPolicies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdPoliciesParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdPolicies(ctx, legalEntityId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdPolicies converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdPolicies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdPoliciesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdPolicies(ctx, legalEntityId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdPoliciesPolicyId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyId", runtime.ParamLocationPath, ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdPoliciesPolicyIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx, legalEntityId, policyId, params)
	return err
}

// PatchLegalEntitiesLegalEntityIdPoliciesPolicyId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyId", runtime.ParamLocationPath, ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchLegalEntitiesLegalEntityIdPoliciesPolicyIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx, legalEntityId, policyId, params)
	return err
}

// PutLegalEntitiesLegalEntityIdPoliciesPolicyId converts echo context to params.
func (w *ServerInterfaceWrapper) PutLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyId", runtime.ParamLocationPath, ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutLegalEntitiesLegalEntityIdPoliciesPolicyIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLegalEntitiesLegalEntityIdPoliciesPolicyId(ctx, legalEntityId, policyId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdSuppliers converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdSuppliers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdSuppliersParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdSuppliers(ctx, legalEntityId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdSuppliers converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdSuppliers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdSuppliersParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdSuppliers(ctx, legalEntityId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdSuppliersSupplierId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "supplierId" -------------
	var supplierId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "supplierId", runtime.ParamLocationPath, ctx.Param("supplierId"), &supplierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter supplierId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdSuppliersSupplierIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx, legalEntityId, supplierId, params)
	return err
}

// PatchLegalEntitiesLegalEntityIdSuppliersSupplierId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "supplierId" -------------
	var supplierId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "supplierId", runtime.ParamLocationPath, ctx.Param("supplierId"), &supplierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter supplierId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchLegalEntitiesLegalEntityIdSuppliersSupplierIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx, legalEntityId, supplierId, params)
	return err
}

// PutLegalEntitiesLegalEntityIdSuppliersSupplierId converts echo context to params.
func (w *ServerInterfaceWrapper) PutLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "supplierId" -------------
	var supplierId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "supplierId", runtime.ParamLocationPath, ctx.Param("supplierId"), &supplierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter supplierId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutLegalEntitiesLegalEntityIdSuppliersSupplierIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLegalEntitiesLegalEntityIdSuppliersSupplierId(ctx, legalEntityId, supplierId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdTagsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdTags(ctx, legalEntityId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdTagsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdTags(ctx, legalEntityId, params)
	return err
}

// DeleteLegalEntitiesLegalEntityIdTagsTagId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLegalEntitiesLegalEntityIdTagsTagId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "tagId" -------------
	var tagId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tagId", runtime.ParamLocationPath, ctx.Param("tagId"), &tagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteLegalEntitiesLegalEntityIdTagsTagIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLegalEntitiesLegalEntityIdTagsTagId(ctx, legalEntityId, tagId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdTagsTagId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdTagsTagId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "tagId" -------------
	var tagId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tagId", runtime.ParamLocationPath, ctx.Param("tagId"), &tagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdTagsTagIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdTagsTagId(ctx, legalEntityId, tagId, params)
	return err
}

// PatchLegalEntitiesLegalEntityIdTagsTagId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegalEntitiesLegalEntityIdTagsTagId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "tagId" -------------
	var tagId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tagId", runtime.ParamLocationPath, ctx.Param("tagId"), &tagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchLegalEntitiesLegalEntityIdTagsTagIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegalEntitiesLegalEntityIdTagsTagId(ctx, legalEntityId, tagId, params)
	return err
}

// PutLegalEntitiesLegalEntityIdTagsTagId converts echo context to params.
func (w *ServerInterfaceWrapper) PutLegalEntitiesLegalEntityIdTagsTagId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "tagId" -------------
	var tagId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tagId", runtime.ParamLocationPath, ctx.Param("tagId"), &tagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutLegalEntitiesLegalEntityIdTagsTagIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLegalEntitiesLegalEntityIdTagsTagId(ctx, legalEntityId, tagId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdTaxRates converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdTaxRates(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdTaxRatesParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdTaxRates(ctx, legalEntityId, params)
	return err
}

// PostLegalEntitiesLegalEntityIdTaxRates converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntitiesLegalEntityIdTaxRates(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegalEntitiesLegalEntityIdTaxRatesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntitiesLegalEntityIdTaxRates(ctx, legalEntityId, params)
	return err
}

// GetLegalEntitiesLegalEntityIdTaxRatesTaxRateId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "taxRateId" -------------
	var taxRateId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taxRateId", runtime.ParamLocationPath, ctx.Param("taxRateId"), &taxRateId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taxRateId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx, legalEntityId, taxRateId, params)
	return err
}

// PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "taxRateId" -------------
	var taxRateId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taxRateId", runtime.ParamLocationPath, ctx.Param("taxRateId"), &taxRateId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taxRateId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx, legalEntityId, taxRateId, params)
	return err
}

// PutLegalEntitiesLegalEntityIdTaxRatesTaxRateId converts echo context to params.
func (w *ServerInterfaceWrapper) PutLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "legalEntityId" -------------
	var legalEntityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "legalEntityId", runtime.ParamLocationPath, ctx.Param("legalEntityId"), &legalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// ------------- Path parameter "taxRateId" -------------
	var taxRateId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taxRateId", runtime.ParamLocationPath, ctx.Param("taxRateId"), &taxRateId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taxRateId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutLegalEntitiesLegalEntityIdTaxRatesTaxRateIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLegalEntitiesLegalEntityIdTaxRatesTaxRateId(ctx, legalEntityId, taxRateId, params)
	return err
}

// GetSuppliers converts echo context to params.
func (w *ServerInterfaceWrapper) GetSuppliers(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSuppliersParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSuppliers(ctx, params)
	return err
}

// PostSuppliers converts echo context to params.
func (w *ServerInterfaceWrapper) PostSuppliers(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSuppliersParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSuppliers(ctx, params)
	return err
}

// GetSuppliersSupplierId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSuppliersSupplierId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "supplierId" -------------
	var supplierId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "supplierId", runtime.ParamLocationPath, ctx.Param("supplierId"), &supplierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter supplierId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSuppliersSupplierIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSuppliersSupplierId(ctx, supplierId, params)
	return err
}

// PatchSuppliersSupplierId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSuppliersSupplierId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "supplierId" -------------
	var supplierId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "supplierId", runtime.ParamLocationPath, ctx.Param("supplierId"), &supplierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter supplierId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchSuppliersSupplierIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSuppliersSupplierId(ctx, supplierId, params)
	return err
}

// PutSuppliersSupplierId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSuppliersSupplierId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "supplierId" -------------
	var supplierId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "supplierId", runtime.ParamLocationPath, ctx.Param("supplierId"), &supplierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter supplierId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutSuppliersSupplierIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSuppliersSupplierId(ctx, supplierId, params)
	return err
}

// GetTrips converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrips(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTripsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTrips(ctx, params)
	return err
}

// GetTripsTripId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTripsTripId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tripId" -------------
	var tripId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tripId", runtime.ParamLocationPath, ctx.Param("tripId"), &tripId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tripId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTripsTripIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTripsTripId(ctx, tripId, params)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostUsersParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx, params)
	return err
}

// DeleteUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteUsersUserIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersUserId(ctx, userId, params)
	return err
}

// GetUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersUserIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserId(ctx, userId, params)
	return err
}

// PatchUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchUsersUserIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUsersUserId(ctx, userId, params)
	return err
}

// PutUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutUsersUserIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Yk-Auth-Method" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Auth-Method")]; found {
		var XYkAuthMethod string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Auth-Method, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Auth-Method", runtime.ParamLocationHeader, valueList[0], &XYkAuthMethod)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Auth-Method: %s", err))
		}

		params.XYkAuthMethod = XYkAuthMethod
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Yk-Auth-Method is required, but not found"))
	}
	// ------------- Optional header parameter "X-Yk-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Yk-Correlation-Id")]; found {
		var XYkCorrelationId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Yk-Correlation-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Yk-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XYkCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Yk-Correlation-Id: %s", err))
		}

		params.XYkCorrelationId = &XYkCorrelationId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersUserId(ctx, userId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/expenses", wrapper.GetExpenses)
	router.GET(baseURL+"/expenses/:expenseId", wrapper.GetExpensesExpenseId)
	router.GET(baseURL+"/legal-entities", wrapper.GetLegalEntities)
	router.GET(baseURL+"/legal-entities/:legalEntityId", wrapper.GetLegalEntitiesLegalEntityId)
	router.GET(baseURL+"/legal-entities/:legalEntityId/categories", wrapper.GetLegalEntitiesLegalEntityIdCategories)
	router.POST(baseURL+"/legal-entities/:legalEntityId/categories", wrapper.PostLegalEntitiesLegalEntityIdCategories)
	router.GET(baseURL+"/legal-entities/:legalEntityId/categories/:categoryId", wrapper.GetLegalEntitiesLegalEntityIdCategoriesCategoryId)
	router.PATCH(baseURL+"/legal-entities/:legalEntityId/categories/:categoryId", wrapper.PatchLegalEntitiesLegalEntityIdCategoriesCategoryId)
	router.PUT(baseURL+"/legal-entities/:legalEntityId/categories/:categoryId", wrapper.PutLegalEntitiesLegalEntityIdCategoriesCategoryId)
	router.GET(baseURL+"/legal-entities/:legalEntityId/company-cards", wrapper.GetLegalEntitiesLegalEntityIdCompanyCards)
	router.POST(baseURL+"/legal-entities/:legalEntityId/company-cards", wrapper.PostLegalEntitiesLegalEntityIdCompanyCards)
	router.GET(baseURL+"/legal-entities/:legalEntityId/company-cards/:companyCardId", wrapper.GetLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId)
	router.PATCH(baseURL+"/legal-entities/:legalEntityId/company-cards/:companyCardId", wrapper.PatchLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId)
	router.PUT(baseURL+"/legal-entities/:legalEntityId/company-cards/:companyCardId", wrapper.PutLegalEntitiesLegalEntityIdCompanyCardsCompanyCardId)
	router.GET(baseURL+"/legal-entities/:legalEntityId/cost-centers", wrapper.GetLegalEntitiesLegalEntityIdCostCenters)
	router.POST(baseURL+"/legal-entities/:legalEntityId/cost-centers", wrapper.PostLegalEntitiesLegalEntityIdCostCenters)
	router.DELETE(baseURL+"/legal-entities/:legalEntityId/cost-centers/:costCenterId", wrapper.DeleteLegalEntitiesLegalEntityIdCostCentersCostCenterId)
	router.GET(baseURL+"/legal-entities/:legalEntityId/cost-centers/:costCenterId", wrapper.GetLegalEntitiesLegalEntityIdCostCentersCostCenterId)
	router.PATCH(baseURL+"/legal-entities/:legalEntityId/cost-centers/:costCenterId", wrapper.PatchLegalEntitiesLegalEntityIdCostCentersCostCenterId)
	router.PUT(baseURL+"/legal-entities/:legalEntityId/cost-centers/:costCenterId", wrapper.PutLegalEntitiesLegalEntityIdCostCentersCostCenterId)
	router.POST(baseURL+"/legal-entities/:legalEntityId/expense-export-facilities/:exportFacility/export-tasks", wrapper.PostLegalEntitiesLegalEntityIdExpenseExportFacilitiesExportFacilityExportTasks)
	router.GET(baseURL+"/legal-entities/:legalEntityId/export-tasks/:exportTaskId", wrapper.GetLegalEntitiesLegalEntityIdExportTasksExportTaskId)
	router.GET(baseURL+"/legal-entities/:legalEntityId/export-tasks/:exportTaskId/artefacts", wrapper.GetLegalEntitiesLegalEntityIdExportTasksExportTaskIdArtefacts)
	router.GET(baseURL+"/legal-entities/:legalEntityId/invoice-categories", wrapper.GetLegalEntitiesLegalEntityIdInvoiceCategories)
	router.POST(baseURL+"/legal-entities/:legalEntityId/invoice-categories", wrapper.PostLegalEntitiesLegalEntityIdInvoiceCategories)
	router.GET(baseURL+"/legal-entities/:legalEntityId/invoice-categories/:categoryId", wrapper.GetLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId)
	router.PATCH(baseURL+"/legal-entities/:legalEntityId/invoice-categories/:categoryId", wrapper.PatchLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId)
	router.PUT(baseURL+"/legal-entities/:legalEntityId/invoice-categories/:categoryId", wrapper.PutLegalEntitiesLegalEntityIdInvoiceCategoriesCategoryId)
	router.POST(baseURL+"/legal-entities/:legalEntityId/invoice-export-facilities/:exportFacility/export-tasks", wrapper.PostLegalEntitiesLegalEntityIdInvoiceExportFacilitiesExportFacilityExportTasks)
	router.GET(baseURL+"/legal-entities/:legalEntityId/invoice-goods-receipts", wrapper.GetLegalEntitiesLegalEntityIdInvoiceGoodsReceipts)
	router.POST(baseURL+"/legal-entities/:legalEntityId/invoice-goods-receipts", wrapper.PostLegalEntitiesLegalEntityIdInvoiceGoodsReceipts)
	router.GET(baseURL+"/legal-entities/:legalEntityId/invoice-goods-receipts/:goodsReceiptId", wrapper.GetLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId)
	router.PATCH(baseURL+"/legal-entities/:legalEntityId/invoice-goods-receipts/:goodsReceiptId", wrapper.PatchLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId)
	router.PUT(baseURL+"/legal-entities/:legalEntityId/invoice-goods-receipts/:goodsReceiptId", wrapper.PutLegalEntitiesLegalEntityIdInvoiceGoodsReceiptsGoodsReceiptId)
	router.GET(baseURL+"/legal-entities/:legalEntityId/invoice-payment-terms", wrapper.GetLegalEntitiesLegalEntityIdInvoicePaymentTerms)
	router.POST(baseURL+"/legal-entities/:legalEntityId/invoice-payment-terms", wrapper.PostLegalEntitiesLegalEntityIdInvoicePaymentTerms)
	router.GET(baseURL+"/legal-entities/:legalEntityId/invoice-payment-terms/:paymentTermId", wrapper.GetLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId)
	router.PATCH(baseURL+"/legal-entities/:legalEntityId/invoice-payment-terms/:paymentTermId", wrapper.PatchLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId)
	router.PUT(baseURL+"/legal-entities/:legalEntityId/invoice-payment-terms/:paymentTermId", wrapper.PutLegalEntitiesLegalEntityIdInvoicePaymentTermsPaymentTermId)
	router.GET(baseURL+"/legal-entities/:legalEntityId/invoice-purchase-orders", wrapper.GetLegalEntitiesLegalEntityIdInvoicePurchaseOrders)
	router.POST(baseURL+"/legal-entities/:legalEntityId/invoice-purchase-orders", wrapper.PostLegalEntitiesLegalEntityIdInvoicePurchaseOrders)
	router.GET(baseURL+"/legal-entities/:legalEntityId/invoice-purchase-orders/:purchaseOrderId", wrapper.GetLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId)
	router.PATCH(baseURL+"/legal-entities/:legalEntityId/invoice-purchase-orders/:purchaseOrderId", wrapper.PatchLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId)
	router.PUT(baseURL+"/legal-entities/:legalEntityId/invoice-purchase-orders/:purchaseOrderId", wrapper.PutLegalEntitiesLegalEntityIdInvoicePurchaseOrdersPurchaseOrderId)
	router.GET(baseURL+"/legal-entities/:legalEntityId/invoices", wrapper.GetLegalEntitiesLegalEntityIdInvoices)
	router.POST(baseURL+"/legal-entities/:legalEntityId/invoices", wrapper.PostLegalEntitiesLegalEntityIdInvoices)
	router.POST(baseURL+"/legal-entities/:legalEntityId/invoices/upload", wrapper.PostLegalEntitiesLegalEntityIdInvoicesUpload)
	router.GET(baseURL+"/legal-entities/:legalEntityId/invoices/:invoiceId", wrapper.GetLegalEntitiesLegalEntityIdInvoicesInvoiceId)
	router.GET(baseURL+"/legal-entities/:legalEntityId/invoices/:invoiceId/presentation", wrapper.GetLegalEntitiesLegalEntityIdInvoicesInvoiceIdPresentation)
	router.GET(baseURL+"/legal-entities/:legalEntityId/policies", wrapper.GetLegalEntitiesLegalEntityIdPolicies)
	router.POST(baseURL+"/legal-entities/:legalEntityId/policies", wrapper.PostLegalEntitiesLegalEntityIdPolicies)
	router.GET(baseURL+"/legal-entities/:legalEntityId/policies/:policyId", wrapper.GetLegalEntitiesLegalEntityIdPoliciesPolicyId)
	router.PATCH(baseURL+"/legal-entities/:legalEntityId/policies/:policyId", wrapper.PatchLegalEntitiesLegalEntityIdPoliciesPolicyId)
	router.PUT(baseURL+"/legal-entities/:legalEntityId/policies/:policyId", wrapper.PutLegalEntitiesLegalEntityIdPoliciesPolicyId)
	router.GET(baseURL+"/legal-entities/:legalEntityId/suppliers", wrapper.GetLegalEntitiesLegalEntityIdSuppliers)
	router.POST(baseURL+"/legal-entities/:legalEntityId/suppliers", wrapper.PostLegalEntitiesLegalEntityIdSuppliers)
	router.GET(baseURL+"/legal-entities/:legalEntityId/suppliers/:supplierId", wrapper.GetLegalEntitiesLegalEntityIdSuppliersSupplierId)
	router.PATCH(baseURL+"/legal-entities/:legalEntityId/suppliers/:supplierId", wrapper.PatchLegalEntitiesLegalEntityIdSuppliersSupplierId)
	router.PUT(baseURL+"/legal-entities/:legalEntityId/suppliers/:supplierId", wrapper.PutLegalEntitiesLegalEntityIdSuppliersSupplierId)
	router.GET(baseURL+"/legal-entities/:legalEntityId/tags", wrapper.GetLegalEntitiesLegalEntityIdTags)
	router.POST(baseURL+"/legal-entities/:legalEntityId/tags", wrapper.PostLegalEntitiesLegalEntityIdTags)
	router.DELETE(baseURL+"/legal-entities/:legalEntityId/tags/:tagId", wrapper.DeleteLegalEntitiesLegalEntityIdTagsTagId)
	router.GET(baseURL+"/legal-entities/:legalEntityId/tags/:tagId", wrapper.GetLegalEntitiesLegalEntityIdTagsTagId)
	router.PATCH(baseURL+"/legal-entities/:legalEntityId/tags/:tagId", wrapper.PatchLegalEntitiesLegalEntityIdTagsTagId)
	router.PUT(baseURL+"/legal-entities/:legalEntityId/tags/:tagId", wrapper.PutLegalEntitiesLegalEntityIdTagsTagId)
	router.GET(baseURL+"/legal-entities/:legalEntityId/tax-rates", wrapper.GetLegalEntitiesLegalEntityIdTaxRates)
	router.POST(baseURL+"/legal-entities/:legalEntityId/tax-rates", wrapper.PostLegalEntitiesLegalEntityIdTaxRates)
	router.GET(baseURL+"/legal-entities/:legalEntityId/tax-rates/:taxRateId", wrapper.GetLegalEntitiesLegalEntityIdTaxRatesTaxRateId)
	router.PATCH(baseURL+"/legal-entities/:legalEntityId/tax-rates/:taxRateId", wrapper.PatchLegalEntitiesLegalEntityIdTaxRatesTaxRateId)
	router.PUT(baseURL+"/legal-entities/:legalEntityId/tax-rates/:taxRateId", wrapper.PutLegalEntitiesLegalEntityIdTaxRatesTaxRateId)
	router.GET(baseURL+"/suppliers", wrapper.GetSuppliers)
	router.POST(baseURL+"/suppliers", wrapper.PostSuppliers)
	router.GET(baseURL+"/suppliers/:supplierId", wrapper.GetSuppliersSupplierId)
	router.PATCH(baseURL+"/suppliers/:supplierId", wrapper.PatchSuppliersSupplierId)
	router.PUT(baseURL+"/suppliers/:supplierId", wrapper.PutSuppliersSupplierId)
	router.GET(baseURL+"/trips", wrapper.GetTrips)
	router.GET(baseURL+"/trips/:tripId", wrapper.GetTripsTripId)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:userId", wrapper.DeleteUsersUserId)
	router.GET(baseURL+"/users/:userId", wrapper.GetUsersUserId)
	router.PATCH(baseURL+"/users/:userId", wrapper.PatchUsersUserId)
	router.PUT(baseURL+"/users/:userId", wrapper.PutUsersUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9iW/buLoH+q8QvvdiWlzbsZ10SYADvDRJO5lpm0zjTm9P3XdKS7TNiUxqSCqJm5f/",
	"/YGbdtmStzYeAQXqSOL+rT9+/HjfcOjUpwQRwRtH9w2GuE8JR+qP15QNsesiIv9wKBGICPkT+r6HHSgw",
	"JXt/capeozs49T2kv3RR4+igs99sTBHncIwaR42PHDFAqAAwEBPK8HfkAkEBdBzEOaBsDAn+rqpsPDQb",
	"3JmgKZSV/TdDo8ZR47/2on7u6bd874wxyhoPDw/Nhou4w7Cvyh81+hMEHA8jIgDmOa36iI0omwIxQYCh",
	"vwPEBXIB9RFTPWjLLryn4jUNiLvc2A/iY/+AOA2Yg1RPRqrS9YyR+8jBI4xcwGwTt5BHzaiB9Cl9B8ns",
	"gx4nX2o8vcP4eASlYArJzM4dX9NwTHXAgUQOYYiAz6ikD+SC4UytFkfsBjHgBkiuY9gRhxInYEwuuO2T",
	"GvtHEi38cgvZjQ+8T68RAejOxwytbQ31iOS6BQQOPTUwxAUcephP1KCxi4jAYgboSP2tSbvdeAh7oFb1",
	"BAo0pmwmf/tMUrPAmpGh49CAiA9ohBgijhpgDseY8r9wYAoAZku0G81odhpeQJzJsf6m0WyImS+fcsEw",
	"GctpcSaQjVGfnk19j85QTnuvPTgGI8pAIKcWYDWrlIlEOyPocdRskMDz5MQ0jgQLUNjckFIPQSUunIAL",
	"Oj0nkqm1DJGDdl0sf0PvMjEZmd4me3aKHVWKqenWNQMcVQ0g59TBUGhRImITl+i8pCaBGIHeuds4kovT",
	"lY0VDIYO/0KOkB9gd+HqYKIrBthNrsvh2xeM3rz//n7SP+G/XfWvh6O/G82GD4Us0DhqfBkMbltf/7fR",
	"bDAE3QvizVL9iGaFwOliOpEfJbvwVpIGOLvzkdIiORVzAUXAjx2Bb3Ia+DRBYoJYYl6lEIfq+0Rb+dTw",
	"IMf2d6A49OiLHkYzywGpfnzNWYkTOvUhmZ1A5i7PUsxdzE7yK8NN3d5+LkNB5i5oylJb1EhInnocqjPZ",
	"hjvdRiFVxjqgpKszmztM+1ETnF9dAClBk82d/Po6b3CJ+uZUH3uRrPc4GiJDLhbhSBcOq5DZYlM2j+E+",
	"P3d6/v6bzt0muEw1neUwSY8XRD3MVhdMh4gVVwj0B21wTGZAF5PaVqpaHkiFiNwmoMTTytaDXBkSDEiB",
	"Dh2BGG8CH7oucsEtFhPABZSPbrHnyToYEgEjyG2DPwLEMOKqclXfEIEpdBEIuGxT1v4LIi6XtfxiLC/K",
	"ACW6PcqAJ+3CeLuoPW6DX/QAALoFg0a3t38waPySOxP0liB2XrC84XoG0irFrtGwo5ntm5l8VUlmxf3e",
	"m/3Ou4IVX0ncMXcNos6OPNV0rgw09BLj73xByMUJknOWIwd9n9Eb6L3FUyyy4zs2r4En30s976Ex9IAx",
	"aGyzicF2O51Op9mYYoKnwbRx1ClkZNP9h6bpxiorTqXhqQYpBbaprnjt0z0qRQswEPR4wYQF0itadtaq",
	"Tpu2cvMmzKosw285Rk80YSn5tL9/ePgyV4v9YDOtoMcpS01OY/eklK3mIrkuAp1Jj2BWpJflO+BCgQAk",
	"LhB4ikJDPkF0trbkdL5muAm6B+A4GINep9cBve7Rs8OjZ4fgzbt+DiEuVDm2mTWxSn6vJ4fOH/Cv4Ztl",
	"OWWxTZDqRIFpIEUX0LJLTTqCU0ALlGexMRBvqtAWCCbT65PD7+++kw0YA4kuOB6CLMcy6CM47eaNzIfS",
	"NV644LFWFq+7rjPlf7C3z/7v5eVvy656BV0Z7+ryKlPJv6bVnPHmSvkHVi2eCzTNqsY8evpMr2nChYus",
	"9axM2FO/dYOF7FVqYn1HfEJ4PMlROIpDfMRkk9IVh5zjMYmkpotc7CgxOqdnU3inlU43rYJSKuchZx5P",
	"oUAfIBmrJccCTXkCi/nS6HV6+61Or9WTxB3+0ZOLouV946gh5WtiNv7fwcC9P3gYDFpPOl+6rcOv/1/3",
	"S6fb+/o09uRLt/f1S0f+2v/S6X59+t95czeFd+e6Uz01tOgP8ylkDM7sQK50ufgAkv3fQo813pShR6vs",
	"zfeSBMfaDAgRrozazecX+30eV5zdICLe0vEZEflQlKS7viqVJkVVFMgaFbUTSUJfrGknDVjmTLQpO4TO",
	"dZ9+QDcY3SrG8CkTkpERcrl8zDUPM+RAz1M/VP/kD1OGB0NpgKkniIkzWwWeyh/IDav9oN6rByPKbqWv",
	"bswzOf5oldNtZ80fOp0a8DE5bvMCyFqxG4GdSgE7lLiBI6wQRjcZqXvpIcil89UKfI9CV2OG5IZiR/7P",
	"BYKulS4+nE01Suog7KuKSgmQfNX0Hka2jOqsmEBhe4zcqMMpiOgagavr2S30rpXzsdBNlzYTF3DqZ7sg",
	"eS5uUmWb6weoCbrPwHt6Iw2oHui+OOq8PDp4ZgyoTGtyJGWNozUaPXmi0eBoOWwUWs0nCmvlOZ5E+AnQ",
	"eCyXIn2IgPbfjXgXVEAPwKky9p+YsYAWENhvSrXAdQXSNR0hxJtgRBnCYwLQnTORQlsu9w1ikujVF09T",
	"XsnSjlzOkN5iqXVGavK5JrYJvEHWXTMEZ+asGemSZC3ndg3PQ7awrS6LpmYpNqUaLJS52AYLMU8XPPEZ",
	"nkI22xthprZFzCsBx2PkSrcwNt6na7W/nYRtwxOaed5WR8omKnaiopmRlJfnPJ3oF+B2glg4SkAd5f26",
	"AHJwfnWx333+HBx7/gS2esBop2gWPl7ljo0hac/MkSW3E5SYW7U7Y4utJFuKcdQLhsdYUoBt035qRnrQ",
	"674AZrKid5khn338UNyuOK7GXKaUNwNSuYEQmUBLM5rdpds8w/1YrMHMTQpnGFJ6jclYWz+N46vT193e",
	"/kFJqGGOQ3wa/QUwcbzAlebCMOCYIM6BHzCfcgSejBhCQKA7EXeYuVEIw5le+qQAb/xKBYqIckRZVO8U",
	"IWmX5C0HMlZgacGRNBtLyA3TI8mz+Zyc5eJQdjxRaAwl1gwClFmD6WkO+tLrgt8g0Qze6Rypf0UMbto6",
	"I25+z86Iq7EgOgKQhF1jyLPko54KROSacAFn4IlCvidqHeSDJhh50pdLdbU/CZqg96JyV68EZCK/s+rV",
	"hrp7FZAm6O1X7m6B62A6lnYezAJrV0D+8hDnUqYgdorRVPoy2EPGl4k6FxUrjRKZ7m0WIcL8RO1wvad5",
	"y/VBbb9wIAsDPErQPuYA2u0xQgUCT6RbdwM95XJRQNAYCnwTFdAm4dOl9uM9yMU76qrQlKpqVm06TW3h",
	"lZStAs3PFGa+0O5KAOw54FfivaDgdoKdSWaGDXaS6DZ8dfjXH/Rs/9ezfGhOOWTvkJhQt5iurd82Vd/F",
	"KdyH2L1k+AYK5M0aystUu9ZqqdXedbMhGLxBUudJ95IlST1dPttDyqWUXyRoY9NAGeATqLcEZelILY4R",
	"QUzNtjtO7xsogbDfKS8QNEBXPGf6fXyuXAZHeTDBiLLQp1d/hcjCiDJTXQgQaCjBAgTRK4sQ9BkkXMMc",
	"YRmRfqY+luw+ey1LYP8qGE4xt9CBWq9T1dvEYtkBZM0fOObzLJws5c/oNVWuhCV1nNzmUfu7ykOEY+Di",
	"KSKyc3whWK8ql93JrSyyGaNB3YOB7P+pbaM7aBzpR+FW5cUo/raZKtCbW6A3aDw0SlhYIsT5SposfV2g",
	"jLEi4N37gq35d4hJR1oAAe/sbhu6E2rb2wUjRqfxidszZko6sOKs1X3Rax++OGz3nh/kEoj084+VTC/m",
	"GAMDYAJooTfyBN1ZAxNmEIaEujg8rOr8q06eeBBPc2hWARWOfLmgg5EFvKCD3eobpoJhf6EukR/9YP/9",
	"x2FYcbgYR1EIjSQJJtb6azHypaVlH/LrlCuXhMNs+GsO6F3J2adMKCNEMDweI4ZSBpxUS63OQavT7Vvb",
	"o33w4uW/c81VyDyMuLicpz7PzEcAeh69RS4wylbb3FF4r3S7oi5mOrXf6uy39rsJq1JvJrTkfz37X4FZ",
	"LfVRIbVIIkkatdJxGqIJ9EbSK0gYQnb+0B1yApGevu/DDyfD570Lz3n98pMTXPz+Jz+c16X3hfuhplME",
	"Tk2Ukvq1bL/UplxeR0bQwV6B9Xgen5BRvCFbCjxxKNMB9UoaJaEB5ao8jVsnkW504mZb0gKIPsr0VhtX",
	"ArmvsYfmADwj7CE1YVx5dZGMlC84CKuxAkoFTd+J5Cjbcdgn6h4PplLitX13VAalwfkmr5xFAfl1xoOa",
	"PBe+9967eX9Hfv3oo+Nb98VprpPGL5Ga9Pm7yGbB/qJDabZygT0P+Kbgwq3kZmNaYLT3tfSQa64/yePf",
	"cHcLq/1TEijbEwaCSiHnJFddf7VwwyBvC+ENpdLW1f5sdh+hwCKQTDaWJS1E8gs31kEbnEDPCbT/H5on",
	"mBCpSyRBJFZs/1lSwRZ4uLGIpLmBpukuhV+XCDONB/mUqTsMqE0ToX3R6vb2D549f/HysFNmE2scW4j3",
	"c+I0E/2wAZuJDiTaLQ1QpMe3lShyXMmijtOqNa3TIiPljs6rLrYfn2uZ5KxIjABt578uYKr84I/SjKWZ",
	"JmKvedyT4ZZKNK1aihH2+XroGldpO050A/KaMkDQrZ6Cpj7gM+MCTXVEsdVE6sX5aRvI79Ed1iaSKTSj",
	"gYoyjoW9T6DQ9W+UrMvzsBn7QlZePNUCTS8ZLjoCYNrxjSQGPjOeYiUXxw+kQ8rRBXOLrUKNHiQ+XYQj",
	"eJjoLuaCTIlGBZpWaFh+vlLjfwdQ4XoV1tIWSW529/YX8Gv5ALdUqxVC3JqNgOACySPfWDsuPiURQV6P",
	"FxNisZcXxpqniSh/hZtWTObJ2HONdGRF6xCSa3v4bIEGMHW8ipWYt+XcjwJnpHFhNluh508g0NvLAHLg",
	"ohEm2jw2FrLZiG51AReQuNp6jxskjcpHamLdqGDj/Khdz5DP8uCp+wanU9S6RjPZmvx5A70Aldv2rKjm",
	"mw2XOsEUEXEKBcwJigFDyNHzA4CIXE7XHoIxPGELxze44sMCA9KfYB59Z0++6Mgr5KoQbw+T62zZAfmV",
	"3qIbxJrJplQV5rwrJNCbfY8iwI7P27LF2NfTgOsvweXpa63iwohCPbQMXTQbtwwLFCk0aYwyyvnxHBsl",
	"oj/1qbFOmgCOx0zFeyeMf/ttKFN4nAAOnnUqegHYXdSr7Vivurl5mj7qUXiWpuKunZX6VJ+PTwTvpTbt",
	"ssK/xF4cJqgarm2E5ltTMM8IJ0iUIB4OCBKrUU6vKuWYjbI+YgtMiJjBkIqNFIhN+TzpVobeFtpyS/ox",
	"GdWaF/knl0mOKmksAZoy00oP8kvRKP99+eHlxzfk/3p/UHzxqodO3/uHUpmHdJZzQnH+TglH7AY7BWEd",
	"SYYznyqs9Al/2gbnIwABx2Ts6YeSf3yo0gdAyUlG1osJIgDbGJghMsFOskR7QM48rjfPb6l6xAFkyFZj",
	"i2JpHRCOXaRC0QBTkZB0pEtosZweKSXoYtQ4+lJhrRd/quPmH77O2Q5NTZr6SkpN0I/crSkkUAWISuUm",
	"VViUgkFHebrAxQw5wpuV2U/FJLadikm4m2o3PAv2Uu2+KEG3+dueSwlxHegtEJsDiYYBzOenHNxOKLCF",
	"ksHUlKmX0XFXlSwFm6QNyj6sxkGrsYo+sZvroylIG7RypJwJYbCFNy7nBLyT78vZGgLOVAqMtVobJU/I",
	"xY6oFO9hJS2ClLUZV7ZzPJpXSf9lrnOTnSz5Qep0ZhPQkUBEUrArRReh4PzV8XsNlfDkKr588fzZwX6v",
	"1KF/2dTJPF/JekiGtOT3yfjb38s28zsqaEJOFvgdzZoAepwCB3qeNI8ZJM4kG/3a6Xb3u8/KNjrPrlPt",
	"vjfTm2havsg03O219g9az56XaXoRaGdaIAQpBywJRUuX8+zDpRHcvBRqNIQFhyjDPSw1WkN2ICTuaHhv",
	"Xr3sgU9nV33Q7e0fgGfPX7wEkpDAfq9MD/gtHomTwrPGV/K1mtPkVEuaenV+kuiJ7MSbV8d/lkIpijhw",
	"1Uw5Vh+Uz5jDIeQ/45HoEplrzslN6eQ1C4/t5sxccVoPldhJpaBg4IqOxK20xPS+LuZa2o1U5K6hYhPn",
	"zFdBrXM6+IPT7eT0KHv0N5weOWErpt1JN/iD0u8YXq0jQOoIkMcaAZJsxB1dPjskBzdv/7y5eP77p796",
	"L/yrOo6jjuMoF8eRRuWycm7OEcOPBP8dFCNfGYm/aAutXE6c3FOFF2pES3QylnJgU/1baL7Enthg2bm7",
	"aW/tU+mTlfK5FNpesBEZA+LnNvuis2AbssQ+st48rtTMwp1lggp82ggmXm1c29i6XgzsbnEre2Fn5m9t",
	"27frXebHchYhn2WLTyP8Cb2g9EmE9MfmFELeqYMPBcmYFshDAe+Aio7ZkDDcchSBFnxaSMxxBy6j/R2e",
	"1YEu5srRmGM1QRB+BLA61BjbbfPhzMwiJgCCMb6RngGeohHTjkxoKqXahTOe52DMuK0sMkZt8yGMbDIR",
	"y5mKx37lcJYtmtOUrRQTm8wnrdyfPPsf8K9/gWeJgwbPSmXoWXwWdz6iVZybNL7nlh+Ndu521+HPxxua",
	"59N3nt/1ggMCx8fvzv7eH7+h75zJ+n36VG9y/HkLzxt6B5LgcxOzIGE+uUQM51mxp7FtLgTcQOc4T9Il",
	"DHuEObBcKWlJEnZ7Plnm4eXG7c90Lo+x30anNAuNWptRK5/7tp7euk43vXK+hjq9dDYRShE+Hj97HKNe",
	"49ZHuwGp0NJulejwVBuFa544zbyUVPQgGQcm29jCfkwhJsCWSGw964R9LSWdkYr0Ja3xsNFsjNTWBU/t",
	"IJsvK9BhqidZWjw+eXcGHMp8qkVq/uFpDzvzpVfxuqvCMxWJmE6lrV9Viv8Pa1uH7qui62y72Rm09wOA",
	"S/XNauys21kDM5vNvcoMbEz55dbaWvM8d7kFvHvx4idURbbX81RRH96tpopsI1VI9x1dB+nGFyVLvS/a",
	"L/4HXJmAX/BBp3NcgYBDh257JDzfsM9P/hjK75h0a8YNtQVGnjVtc7ijPDHPjX6M70eOYOCJ47LZwT8b",
	"XzuMB9blC/KB63wu775/J8unOVb1n5TNDlfUvzSAu6l+Rtndlu1pYdrwtXXycnEE6MJeFrulq3czLRCy",
	"+xHzArtU2Map7W/83qwopEtQk5KpDd4FPObm6GRN5vzURbysh26QF9ZQPOISJ0GSWXcSoykhkeK9KpYU",
	"sSipynHNqcMgC/MTFqKndmBSY2c2+95SDo7JGHnlwhEcSgR0LG6liLBx9CUeHjhvZHaiTnQtFdIuFgfl",
	"xEdnwrye2GtdUqm8VJrFElfIrFu6L4KdYkOIRVBZHLUN1FEOe6Ai0Girxf5IkrfyY2LhSCCmE0Nq+z8G",
	"4BTegoAX9/aH5JiPL3hBgvljZ4rA+fuTXLGGHCotodn7Mi2o3Xq7+MlGTpEPmVDi97hUcNmEMlGqUfWl",
	"bnpEGXAx9z04yw6xVKuLpbhgqGjDK94p9VkmFRZHArzybtySIbbzQhljjdHRCDsYerFkQ+kTjAdltgaY",
	"t7CpWzQEHKfvhbi9vW1DZ4raDi21f/Ud+6VE1HfsZ90mdbh2qdOMMckSgpkLVZdxYudszPP5iBfALs9x",
	"srRj2y7Os7oNvK48WvUToxarIPaPFMWIE18ZGo7vRud5aPPOrCYPGlU8ujo39uI4EXlhz2slmksnQ8U8",
	"nunWbn9ky6wcrp0Z9doThyw6q5npQTxSJD9fS6ZIdJZitfwtuOwsbTf9SIkOJU6TlDK7L9OhG0sclcx0",
	"I4qFWXHlDpY/OckLaX3hEckUg2kH1MPkOswVbNxP440lNjj5LzodXbUYm3m2T+rsY/VsOsUBNFfBVEoi",
	"84EOwqyyQCpbxMJVqaA5Usc8K6WMWAQ54Gys69wTZKXJIHUc7RcOzk/XZrTcQA+7WMxi2bjLn7O1hRP5",
	"sVdJN5RHtPPgkZK5iLJS6MeFhs5Z6ExFqXX+CQNJ54wmVkeWZONDWbudE+veEhZPsvRi2weSwHdyYruP",
	"3wPKwMfLE/nfEDJ19tWSTHYrOjw0Vs7iqWZybSivVUWzK8zjlTC+KmXzwm6lhh5HLq3KubPyF3fjybNC",
	"xlg9g9YUCsRwMfmefbiUy5cRTLZcRipVY9pKFmc4v5HZOc+KzIx1foBxfltLJs8yCjWd0HJhNpXLbCdU",
	"ElZHaAn5Jp5qq5SxtF2b7N0CcrqKAceboqlNhynPUbVhBasYDFsIZs4YZvHtK+h5JZJ/5G5+LUoDkre1",
	"rhKCpHeFMmYhmkLsFZ3sV2WkVpUfpWA8JBBr8ykWk/8nBuZmD89hxucg81EbOj96Flm7lA3l3uwBy1Uc",
	"ngxM4euy67nhWhNKFlaqPspVSP/bVefj82pm1FtYsfzGRvWF3pW5zyM1AOghKbJ8hjgiAhp/YT6yrZc7",
	"viyxibRjNz3NczT6cFwtomm8arBieNSjeA8g/MSm58uGKI2TTendTJwfPVocgzSeh1mdXHY+v0GHf95+",
	"/4Tv3l782+3//nL9GLTuRNHm3LmA3mzVCKTx+pDn5OKVwJ7tfRoZGis4E/cmfh6OB9qhC5Pu2VuLo6gq",
	"krkrImmAPMs1Ogq03uKLnHNj4yrf3CzgXbZxWXV0V8eCUZU64dHX+n3Z2Pp4oNyiTBjC/ROKedH1a4+R",
	"nJfCJlmn+rAJzq8uTLKwdqlEnnUMZsUYzJWE4Ooxmawwu1yi9mCKGHYkb6en90X7xUpY7fpDPXNOIDA9",
	"ekv+ZSQww/5KCTTUzTfbvCxVNbjmm1J/LDcz7K/v1lCkgW+5SLlXUbbc1PXZ+uoiAnQXwefPnz+33r1r",
	"nZ72J5Oj6TQv78jzVveg39s/qnbeRDa02UinqpcQhrT76G4g1Iu21PWD8+51ZyZgKgeSVi0udZ3sK3t5",
	"rL7cRg7k/eeTArNV77vkU6/altk8/RZm1ZQNmWSaDI08FF3RT28Qg55n39IRkH8ZKy1apTjHP/I7CvW9",
	"aJcM2R4WPH6fGlPq9TmJ/ZF9Hf5EbvblBzvikvcllrxpLkZWK94c99PeyFZ8B9tHnhsDVP4QQCzYP7Zx",
	"HFN6C04DGPG/3A32P1aPy5WcZ5GfdbvlLPI5IJ3JgaW+kFKXIc6bOi+eoMCjY7kSujv6oIOgdA6UZ5Em",
	"jeaFWeUtbJTdpTNxb0VkoBOXU5bKVhrPt5vozLNnh4fVUUQzCTpVQwUIEZfOdtYuhJ2XTSqPhSKbC3Ji",
	"Q8fnegtaKnCFCVKzukO1NY8Vmi4tGGNwAzXdQl3nm+x4hcub553PNdPjK++eITc8nKtCqqVyH2tiK31Y",
	"N3m9HSmD5s+Hf00XR3CKvVkV9Hed1prpRPyzigeps93DBL1TibpLK5JEbmuoTRTIEx3EBJn03ykRfPH5",
	"9t3ot9+cY/dCfLzp9w578MWywjjW9f6EIT6hXs4IrC4HHp5iBW0lZjkf36quiXWI7cIptJG4eXrLir7o",
	"oxQU8sfl4d+Cn3z8rcuuxTP+/G9xvq7zYovlhEYUmgC3UVvt54eqIOLMxZuP1tY7RZ5Kwb0+movqBq6p",
	"PAVlj4LrV394hx71g+D2tw/HV+RqLeZPwdZH+siaVXkxDbcQPdFHYAKGxezKmaCpNiwujgMx6eWQeiAm",
	"kqwdbT8ktPTx5TlgyMOIA2o2gyygpasbEMfDiAilYWUt0ONg5NHb9oAMSLcNLoYC6kNM0HGUs0WvEZEv",
	"LxGTih1A8O3y4qr/TSV7QVwAQQfk20QInx/t7RmFzdtqU7cN8R6FsuE9Vc+3NriEXK+o6Qh2B0QdkdJ/",
	"cuQwJOSqyxXXZ32Iqy5RuKVMJZaBYAg5doCsd0AmCKowwSskolSVRLTkHOuumSRJcrb27lq3t7ctOY5W",
	"wDxzk8831YROmDobkG9jBon4j6zgX7pX/4nN1je7HzWk7kzN2iDodPYReE8FOlKxMcrslzODyA1mlEwR",
	"Ecq40pTMvLBMdtpkuYK5A5hwgaCrGj3TFB8ugk0vGc4q+Haifp6b4ekXA2Im2Ly9Un99OxqQb9++DYhc",
	"WFBuKQdEEhRlZs/5CLxSi/JH787/96dnnatPfzy3vz/2/vzLmf7ZGZATszj9mY+OwMKFGZC5S2E6fU70",
	"5RNGCJgAJn1hx7d5/fkGMB8Qqiheww76GqSWat6qY13TgITzeZSYuqak1TDv0UjFtCnq1OwDE9yapRfN",
	"twRhJYpNPRwQZREhbtP46uIc0FFYnjvUVxeG6Guefru6eG+vlTA7w5hoTotzsqVeKATDw0AgySDq/X8s",
	"h8rawop0UvV4bejOxyYRFCaKnihxeYoodWlLVvcDAgAAg0a8JZ3v7sA7vbm8Zq9ev3zx6ddgduOdv//j",
	"dNBo2hKqNcT/g9X3+4edTvhK1aJoQ1f1CkGG2KAxIA+m3QHpxQROYhpUUDwXyAddfcPLUJUOJ2lAeDDk",
	"krnUfpRiMm6F7fHleWK8WgaBEUZePNFrcjLiTdqJSbOQ7kP+nOgS0vD16K12pxUdnkQMoS5MU2QhfxEV",
	"kKD/U7jFNSIfmdc4alSQOok9P/W88fCgXJERzeqmy2DoYUepIaPKjV6KOF0qWiyi1Mny40azcYMY13V0",
	"2y/aHdlh6iMCfdw4auy3O+2OtnUnamh7FhJTe7z6qKR0ylULykl+g0Qs1ZMPGZwifZHLl2zk7Ah7AjEr",
	"MwyHKGUXu7BPPvvCHTxN8uTXJ3Y2pYvM2xiJUZuy8d5ETL09NnJePD84+C+uL2Ro7bcP2r12L4VsYheg",
	"v8FARyUOGlpep0GItn7yWhEZugUjStWtIo2jxt8BUrs0GpJt6OFIu0PF+eSgFA9fpXGj6VLNYa/T0QCN",
	"ks8K74gJ57+49jOj+lLRQLHVKHX8xSxN9tBLTkLjDKRy8bssd1CqxzEMRW8OHyibH3Gu3NTGOVGx+kkK",
	"OJJzCxAYQr03F4567pAYoyyvu1qcai19C7mKLVSNtvUwukU1hwu095FAIyiQqwvtLy70mrIhdl2kbPKD",
	"3uHiEn1K30Ey+2CkXcIwVXxjTdIvXyUBmUTfjaPGByQCRngCrJYUrtO5fmnY5f76kGHFiAlmJpG6omgt",
	"USOS/r/W5+uWbL31Tmfcjhvn2qSPlsliB7rGrzmWfVoEnFCmrm1USk2BJNpaYzQYT2ggwAQS1zO3PZrF",
	"THDwAYIvD18+Q62XHdhrHXRgp/USHnRaB50u7MLu/ouD4f7cscV60NI+QzHvPjQjAbh3b36duw9lhOGZ",
	"/bqxogQoxd7FzLsdqu8cLC7xnorXNCDuFtkkCrwZziIn+Py0JM/kZUlVH5fOvqfoUGrTiApRgjCKWKuU",
	"31xz9bJcrdCElgKt8HzjJgrdxY/BwlERlo/axvESE17W0IlnqK2NnZ0zdmIgM06aPPGFr82eDQnIvfsE",
	"/PpQWmC+TaG2G7OEEvxfW0O5fJTcqim2iBaw1JoSE+eYRl6GWmrz6Cfk/r1kxvfqguAkKl8bVBs3qAry",
	"88+TpuHlm7UptXOmVEQOYIg8SsZq/4Vm41fDc6Ihi0lpneM6g5Bcam3xT9MWzYZPeY78v6S8rAIwY3hF",
	"3dnazMFIgCXDC+TyPGSka3dD7aYW1py3WJts/FMKKVVEybYjnTZzArkJPuNI1OKxjHjUKyMtZIJuY2l0",
	"iAuYkZxCB0vqyKIwVGyOIKxkRu3dR+l/Hla1qWKZyjfocM2j9NrbkrQU0tFC7HlXFGjZlKfN6IDFcJYT",
	"8FaUuyZnDE6S2GsL4EdYAFA4kxwTQD5eQmAtZw3My1I+76TASSjtbaCOUp+B70KB2uDsTjaKBSCB50m9",
	"FyAOppBdx79XmaqRh2yi7BwPaZEJsl3BXFsfj1nFfFS0GVcxzbizllQ3Tfk3Q74HHSkxOJ3GYtK4DkK7",
	"nVAPhW4fN0aPPpwwX1UFeaZ/ILbG9evzAWoGrBlwGwwIPW9d/FfGxdDnxVoOZO6yYK2u4kTVUMO1m4dr",
	"4/NdGrCNCtWY7Q5itnp5gWLjlWHbOLHUiG2N2JZCbJNaYCP2WlyGbRm2TTddI7ePErmNickK6G1SHla1",
	"qvbuYxp7efg2xl8n8fo2iuHOJ/saxlUmfpyoiqHc3VGqeelPoymoiOR+fu70/P03nbsC+DZD6rVF8HgQ",
	"3Lkya8swbtT+7iC55cRzbZDsCJYUk7JbAHQzCqs6lrsB/l+rg1CzYs2KW2TFZaHdJfwPLlo6JdvSoK5N",
	"EFdjulvBdKPpLg/p2jI1oruLiG6YVXEdgG5IKjWeW+O55fDcuALYjLUWya9to7nJlmsw93GCuVFi2ipY",
	"bkwUVjSl9u7jeXMfdNYdD+l7CJLMdaqel2Kvk3gu3gzVH2Rz+0QFNBSB/sk2uZ5obZNH9DAPhk2owpUs",
	"4/kr19mSvKpR+KVXf7cw+HACKkLwiTzduRh8isxrI+4RQfDF0mrbAHyotXYHfy8jl2sTclcwv1DAbgV9",
	"T2qqJcD3dXP+Op25mglrJtwaEy6Pu1fzFU3mthZSV++0RtDBnvlSP3qtn8zUp/ITAfk116bT7liiNqWe",
	"HiMw0zADT1Q67pmvLnoKr1LSvIPMbUUK2c9Pihebv1KmoGmh0Ww4kLnhbUepuyrCj2rUb3buJu6geh3S",
	"b+Lvmf6rr0h3eW2S3ABxqRNMVVLvnHu63mKurvcOid5SmC0FsJsmJPCEEm8GHEo4dhFDLsAj8/LKoT4C",
	"g3ibg4a6mwV56v4pTYR2DyZ771Riq6XZQJB5GHEhpxaT8WnuxZRn5iMpjOgtcoGvvwba+H1NWcQS6mp1",
	"SICumCU+1UnV40+09JKyLn4rO5rXHngiKIA3FEeP5QNPXRQGHE9dUDOk9Dp985u+bW2/td9NXHgyGLj3",
	"Bw8t+V/P/pd721A0/zmXwanZVzcx+T6j0JnEMnjnCos2ONPZ2hN3s2GiM7LbxNdpMSQmUADIpJaVox3p",
	"mZefyIcR/Qwa0PMGjafqOh7gSuE8VZuZHImEBDP7mVoLiQnCLKLUGIXKGhMk9xSoXPlmLLGrdqDnNZoJ",
	"lkjILP26YHKL75XJXooEKAFDNIHeSI4nuovQTIfqHXICNdO2BqDutJMLMYE3+h6FESaQOEhffW6XLH3T",
	"oWB4PFZIrak+SVjfhx9Ohs97F57z+uUnJ7j4/U9+uPgy9Bg5Jcafz5Nft+AuJqUaQ5wGLO/CZan4Y/es",
	"IHuBX+zKuOfC9957N+/vyK8ffXR86744zZ2Rkhu9uVDyeyomhvtNF/6xNmZfE2giKbBlBGKy56e3GVCo",
	"Cc9d8CS9nE/jtuRrwyTmqsay9mRoJFoTUje2ZBB5THOfxWpbFbumBF2M1OSWyEUdazh2r580t+YVPic3",
	"FDtFhb/WsHguLG7uHTI3mOr7r2bEmTBKaGB1D/iLDudSanPXvBPF066+LkZ7feYGYS0C7H0zeXqqRPLu",
	"JFuttf87lyhyjoTbg0ygEXQEX6usOw5rTQm9WlKEVrCZIan3HGguy7K+UcacVhdaMsH11U8jBEXA0D9P",
	"nkgSXjHrfy04ygsOrO2B1qqZZo1dUSec3Wa0a/7ilQp6Ta5XnX92ByNfDXWsMw+toZo6D20dBVsND89T",
	"D5vYPs2Ite0GxOY2X0fFPsao2JT0rJKkNkdKLmWJrSFZbYbvtpOztgQf1LCSQkgzZFYcc7ljyjfv8vTk",
	"XNS5bOswzIrybLuhmGmO3JmAzAryuzZh6gy3FcPB8hVZ5cDMzciCtXsXNVfWXLksV2btw80Ha67mvfzD",
	"QzbtcqU3d6RFNoECOJBI1hlJOgIBcREDx+4UEzAIOp19BM6JQGMtALl9dhVI5kXMVm73m5uA+ojYTdZb",
	"/B0yNwwbsmNL96Q9IAPSn4QBU1EXpwEXsm/QEfgGhbEa7QFJTLI7unx2SA5u3v55c/H8909/9V74VyuH",
	"mm5mL0bOQ9zqFZGoeaT42c8eT2rJf1PxpD8knDRkuzqcNBVOGs7MnHDS8JtthZOGDdbhpHU4aR1Oukvh",
	"pCnr6keFk1pbd0ypy1sMOQj7YrW4iTeyqg+2pjp0YmuhE9k1LBU+EV+vOnZi92InFFkAQxZrC5tQVAMs",
	"2dSxE3XsRAXfL60iNgFwJsXadmMnsm3XgROPOXAiKUKrR0+kheXShtne/ThGWquGUiTY8E2i4k1GVCzi",
	"jjqcIuEhpPT3wpiKXdLMxah0YlY2Fl0xzjJFbWs8tgiLRWLuxwRapHTKjkRblJXttdGzG6EWueJ4i3EX",
	"Ocpu2eCLzYiJ9booNaPWjLpi9MWSnLpqCMYKLpAPZ1NEREsgNl0Nmr7UNfVVRTUyvTVkOrOCVc71JRat",
	"xqd3Dp82xAEUcawNnzZUAzTZ1Ph0jU9XwKdTemKD8bdJ4fZDTvhlu1CD1Y8ZrI7L0yWw6rTgXNZQ27v3",
	"I8JaFamO0+hlvNotnPxbxB81XJ3wLxLktxit3iU9XYxWxydlY2C1n2GM2u54bFj1fEH3Y5DqBIvu2rnA",
	"stK9Nnx2C7BOeJ1bBKxz9N2ygPUmZMVGXJaaaWumXQ94Hefa7WHXq7hEAXMmkKMWZe7SFy9bqjd1Xeiq",
	"avx6e/h1dhVLIdiJFaux6x3Ers0CA00Y60Ovbb2acmr4uoavq8DXaUWxCWswJdu2C13nNF6D1o8RtE4K",
	"0GXg6rSkXN4427v342S1Mmad4MLLZNWbxK0XMkeNWCediiQNlsCsd0k7zwGtE/OyOdg6hzNqi+PRAdcL",
	"pd0PAq8TvLoz6HVpGV/bPjuGWyeE8jaB6xyltzRyvSFhsWZ/pWbXml1XRqyX5NeVMevl/aLVUOoamN4e",
	"MF05lrrGoHf2bpS1gc812lyjzVXQ5g1HSP+gqOgaVH78kdCV0eRqZtJe4HsUuo87728tLlcRl8lRfFT0",
	"kKZCzco+ow7iPMzgadL9HZ+3wTHwqEr3OZKWJge32PNUDtKpL2YACntlLxNgGIjwtQavXECJo5NkHp8r",
	"0cECohMdLyPL9RDmSvRp4AnsQyb2pKXccqEwi+5QV07Q0b20h1GsVN9YnDEJ6bsjzd0FBq6tQRvjjaPG",
	"EBOoTO75+TpVueWycNYq5B+tQpZi3pVVyL35tepmIz+39WzhREy9p7hwT3HhJuKu7hpubJsQJwi8tnp+",
	"4huYE2Jtz2eIIyKgHnQo41Kbd/SWaPmrjJ3UNRFAqnWACbg8fQ20SZBj4VSTk5fxblWSmdJ2SYjMxUZK",
	"RlyeFw6sNg1+OtOgMnH+A8R9ehZW6W4t2n9+0e5TDztLX6l/aUvXe0Mb3xuKr1S5UwqyQH1t/i4eTzCk",
	"sPLWkCGRemeo3hkqgybGxP1GQnmMwNrymYNYqzWo9ygPG6gVrLAtFIq9CgbS3r1uZmlEzzLPpalmo0cF",
	"Cmm6xvMk1RiKKUbzdkIxZruqx10Ry+s8v+sFBwSOj9+d/b0/fkPfOZOCkP84adda/dHE+ueKpu3G9V8a",
	"Gb4rcfwLBXBtT+xGAL+WeVsI2I+rpMoB+mvk8HVZ8DWz1cy2aWZbNtq+ioNgEfMlIdSrsHiNoW4cQ02s",
	"VSkQ1S5PDaPuHowaUoM0QGHCj8s5eRNSQo2W1mhpGbQ0Ltk3YWzFGouk1Hax02S7NXr6OGTgsaviIa19",
	"ACgbQ4K/a24MAwAEVTfuazvpFouJ/R2WwzGdP19gVjGj9u7tz6Wh1pDzrsKaNom2zuOCGm9VpGaJagi5",
	"Cm2PFKIOucVue3dV7vyuhpOzsRBLnuSC2oB4NMBskSD7iYyJ7YrR2o7YkTwKKdlXET9NWyKrZFRIKpnK",
	"yGrNojWL1iyaQV03xKElHAldehm3oS9L1ijsxlFYu0KlANg+HNfY6+5hr5IGVg5flbRRo7E1GlsGjTXC",
	"fROGmRJR2wVewyZrzPUxRqwKOK4QrqrFXEnTZ+9ewLFBTlU4FMpyyql6Pp9X+rKWLGp6kD3j2YdjHXiF",
	"/smGs55TucBycYsjS63OWs48LViVzqYFSw1jl1/ZXQKqBRxXhKVPLjuf36DDP2+/f8J3by/+7fZ/f5nf",
	"fRHScm1EPRpEOimEthsjLBXNrgQIL5Czte22GwGLAo63EBocap7K6PU62HktrlHNWTVnbY6zlo0DruB5",
	"3bWY7NmyyPPdB1W6Rp+3gD6buS6PQKsCNQq9iyj0HVBsuwYoWhNJDUfXcHQ5ODqU+Juxu4zM2jYsHWu2",
	"hqYfJzStRWIlfNrKviqW0t690cRLh/laHurbejYLjBaSdg2OaoPcEM48hHQXlGQeSqqHvmJihXe0KLGC",
	"SFB4reQfEVyaJ6K2DZvegQ9Kou8MdrpQFNcGxq6gPFqybgVEjSmnJYDU9TH62gz7muVqltsCyy2Prsb9",
	"hlJ5FOpsCVtESuPnQlvVUydcxIrXaRR2F0RNHB/20A1KZ1YgiU8qnvOsvZX1XWSVRHryj30vgH3AgByT",
	"gqJYlxhCnjwcrtNrRGeAA6FYwsPkGrn6nPnM1j8g/Qnm0cfqViz5NZ/QWxD4VmhD328C6bQg5FrrwHYV",
	"k1Q2DwA5uEXqTk1Q9hh6wVVbm07qkC80t4viFvehhnQfI6S7FKMvPodVPWPDlvMylKXjGr/laSW9nYwN",
	"uS3WaRD+oSjqek9SL4uWxoVGSM47A51WFYm1Vt8NUCdX0m4BVK2UZGF7qRSWt7JrVqxZccW8Civy4rJo",
	"a4EVLxj250KuffXBTw+3YveRh6XadSgXk8qwX2OpOxiQKqkgsUciF7qGRdd2HaKa4L17+d8CsELJvb76",
	"bqNxZYqTa1CiAJSQCzUvoqyAPXJitBj2VwkjExEl1MjBD2HdgC/YHP7I643hrdgq4UqUslXkstS2yu7Z",
	"KooK4sJYLXRtq2z8VImVc5tARjSzbne/MWpz2/uLaAqxV28wrrrBKCVBhf1EIydCnb53L/8rlbNIkf5H",
	"nr9zmJObSH5aJyeKJSdSS1VsT4cifK6NVbQAnY2LhNorqrKIC50iWVHF/dbPzx2/92a/8y7fTQp4vcH6",
	"s26wpnl3uxurShTvyj7qIvlUWys7snEq5dkW9kkjkV2wN7oe3l2P5V+zUc1GG2WjZbc4rWOh+sduCgDA",
	"y3Og3wLuUF9HICf2ZNVlV9hNPFRsFzBPammDAEIft5Uh0YZ476a7F/+c790nSz80mo0byDAcetnDFZLJ",
	"ZTdHMPCE7OLQOUWvu739g0aazHTwXSJI6fxU0WPeOIWkxrUNVtb2E434a7jw99Zgih3Ja+TZclyAEyTJ",
	"jjcB9DgFDvQ85AJHvtGWhCY3jgBkKspcypuhpwBiMKRiAtCdjyRbNPVmnfJ7sd5bV2iY6YpsTLelehI+",
	"nfqQzE4gc/M6CAUaU4aNtRO1FO/rkNJrxSSOQwOS7C8l3izdaVuL6qjqclMJJ/kup99n+nNg+jKL995e",
	"tJw9BG/z6Kxp8qKUS/fRo3H8TwMq36e6nSih98jTfX2NCSQOkl2hTIApciaQYD4FmBh/R8kbPxh62AGS",
	"i+SXcgLFhCEEXDwaIYaIAIi4PsVE6NUSEwSmkMAxmsqXdARGiZb40YB022BP/9USkF8rDSQYHo8VfmK7",
	"9IQj6bkJlNOCmUC9mBNkJw9MqRt46Kk9PwEd7bFwIHX5DfRklwQFjocdRT2y7EDOGmVi0ADDQAhKQEBc",
	"xICdoUHQ6ewjoD9SgsJsjGiWjCnj9oAcSzHPEA88Yc97OA7ifBR4ZlzN+AD4nl12RSscCZt4SX+MXMCF",
	"dA4GpJeatL17/Vcf8utz90GW86nnqcIuEhB7HDzBBPiQCewEHtQzJ6sL+FPZOXWAhM+IM2GU0IDbif+L",
	"DtsDsj+/vT3IBBpBR6jVGyHhTHSF4WO9VpSHNDaCDvbUeRMgJlCooB/5XMilGgVEu0mePv8yIOcEUObq",
	"KxjHiCBFCmYIxIXMNQtgag8bbsbmz7Y5AwMjQa9sYbOeT44vz58OGmAacKHNIA855viMLvHk2J1iYsng",
	"nAg01kYp13SGgAsFlKSHPDutYRfTnQNPDIvq5o/Nc0XIJjQp+eappF7NusNoT051xoFgwtDoX4NCXcxv",
	"oWSqtjQSBw09ghH1PHorif/CR0SZAfGtPV3zHtQft9X5HyNJLEPoDubIlHNLy4ZJdFfAuckVFoqSZijs",
	"gAOJFtexg0uUSbOGYXSD3CYgSKpt7SOrdxbHHJC+9Z2jx2HNTeB7CHJkgAokZUEQhu1D308MzfQ8Ljdt",
	"oFieBrDvLuFMSbk+YlOeMyFhKKfibtkLKiaIKZ6cJVWPlLYzMIE3KHlmTM+dbLcJoOsyxLW6GEJyHVN+",
	"ihBnajrlTFIywuOAaYKJRHXsNBiWU6SsHmN+cOAjFp0/i7quOGOEmeaPcJF0x3JOPVICvkWnYr7pRsQE",
	"YZY9E6cZSFU1U4fYUmfYKEmeYIu1kD7BhrKH177lmnXRoY7zUzk936ITEd+U4FHmEzhL3vvE7dwaStyz",
	"XfxLTQ9lwEFMQEwSCh8jz+VSkyHgUieQxBKeBVRSymg2VcGUslB0P5VLGpeAl8f9k1+b4PLiqi+p/fJj",
	"HyT6Ga2XdF4UKzDkUOaCJ6g9bodUFEqoMOJSOpZSBEnjBJJrHQ0QrtBTLU614cmT5wF4TDPHFm+CDb3I",
	"MXySKyDV4JBLx4kIZcBZLZc7hLDWJihYCnUcUkjCiRYkj59B7MB1lnkD5kykhLiQc5z3xRtKXQ4+IAdh",
	"XzQevj78/wEAAP//ns4zuHgoAgA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
